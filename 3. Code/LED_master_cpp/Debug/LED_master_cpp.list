
LED_master_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  0800aae0  0800aae0  0001aae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b34c  0800b34c  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b34c  0800b34c  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b34c  0800b34c  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b34c  0800b34c  0001b34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b354  0800b354  0001b354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800b358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cbc  2000021c  0800b574  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed8  0800b574  00020ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e588  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005826  00000000  00000000  0004e7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013d4e  00000000  00000000  00053ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001850  00000000  00000000  00067d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001918  00000000  00000000  00069598  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001e5bf  00000000  00000000  0006aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001991a  00000000  00000000  0008946f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00084003  00000000  00000000  000a2d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00126d8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005480  00000000  00000000  00126e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000021c 	.word	0x2000021c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aac8 	.word	0x0800aac8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000220 	.word	0x20000220
 800014c:	0800aac8 	.word	0x0800aac8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_frsub>:
 8000a78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	e002      	b.n	8000a84 <__addsf3>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fsub>:
 8000a80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a84 <__addsf3>:
 8000a84:	0042      	lsls	r2, r0, #1
 8000a86:	bf1f      	itttt	ne
 8000a88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a8c:	ea92 0f03 	teqne	r2, r3
 8000a90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a98:	d06a      	beq.n	8000b70 <__addsf3+0xec>
 8000a9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa2:	bfc1      	itttt	gt
 8000aa4:	18d2      	addgt	r2, r2, r3
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	4048      	eorgt	r0, r1
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	bfb8      	it	lt
 8000aae:	425b      	neglt	r3, r3
 8000ab0:	2b19      	cmp	r3, #25
 8000ab2:	bf88      	it	hi
 8000ab4:	4770      	bxhi	lr
 8000ab6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000abe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ace:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4249      	negne	r1, r1
 8000ad6:	ea92 0f03 	teq	r2, r3
 8000ada:	d03f      	beq.n	8000b5c <__addsf3+0xd8>
 8000adc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae4:	eb10 000c 	adds.w	r0, r0, ip
 8000ae8:	f1c3 0320 	rsb	r3, r3, #32
 8000aec:	fa01 f103 	lsl.w	r1, r1, r3
 8000af0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__addsf3+0x78>
 8000af6:	4249      	negs	r1, r1
 8000af8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000afc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b00:	d313      	bcc.n	8000b2a <__addsf3+0xa6>
 8000b02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b06:	d306      	bcc.n	8000b16 <__addsf3+0x92>
 8000b08:	0840      	lsrs	r0, r0, #1
 8000b0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0e:	f102 0201 	add.w	r2, r2, #1
 8000b12:	2afe      	cmp	r2, #254	; 0xfe
 8000b14:	d251      	bcs.n	8000bba <__addsf3+0x136>
 8000b16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1e:	bf08      	it	eq
 8000b20:	f020 0001 	biceq.w	r0, r0, #1
 8000b24:	ea40 0003 	orr.w	r0, r0, r3
 8000b28:	4770      	bx	lr
 8000b2a:	0049      	lsls	r1, r1, #1
 8000b2c:	eb40 0000 	adc.w	r0, r0, r0
 8000b30:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b34:	f1a2 0201 	sub.w	r2, r2, #1
 8000b38:	d1ed      	bne.n	8000b16 <__addsf3+0x92>
 8000b3a:	fab0 fc80 	clz	ip, r0
 8000b3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b42:	ebb2 020c 	subs.w	r2, r2, ip
 8000b46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4a:	bfaa      	itet	ge
 8000b4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b50:	4252      	neglt	r2, r2
 8000b52:	4318      	orrge	r0, r3
 8000b54:	bfbc      	itt	lt
 8000b56:	40d0      	lsrlt	r0, r2
 8000b58:	4318      	orrlt	r0, r3
 8000b5a:	4770      	bx	lr
 8000b5c:	f092 0f00 	teq	r2, #0
 8000b60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b64:	bf06      	itte	eq
 8000b66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b6a:	3201      	addeq	r2, #1
 8000b6c:	3b01      	subne	r3, #1
 8000b6e:	e7b5      	b.n	8000adc <__addsf3+0x58>
 8000b70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7e:	d021      	beq.n	8000bc4 <__addsf3+0x140>
 8000b80:	ea92 0f03 	teq	r2, r3
 8000b84:	d004      	beq.n	8000b90 <__addsf3+0x10c>
 8000b86:	f092 0f00 	teq	r2, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	4608      	moveq	r0, r1
 8000b8e:	4770      	bx	lr
 8000b90:	ea90 0f01 	teq	r0, r1
 8000b94:	bf1c      	itt	ne
 8000b96:	2000      	movne	r0, #0
 8000b98:	4770      	bxne	lr
 8000b9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9e:	d104      	bne.n	8000baa <__addsf3+0x126>
 8000ba0:	0040      	lsls	r0, r0, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	4770      	bx	lr
 8000baa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bae:	bf3c      	itt	cc
 8000bb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bxcc	lr
 8000bb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	4770      	bx	lr
 8000bc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc8:	bf16      	itet	ne
 8000bca:	4608      	movne	r0, r1
 8000bcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd0:	4601      	movne	r1, r0
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	bf06      	itte	eq
 8000bd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bda:	ea90 0f01 	teqeq	r0, r1
 8000bde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000be2:	4770      	bx	lr

08000be4 <__aeabi_ui2f>:
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e004      	b.n	8000bf4 <__aeabi_i2f+0x8>
 8000bea:	bf00      	nop

08000bec <__aeabi_i2f>:
 8000bec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	bf48      	it	mi
 8000bf2:	4240      	negmi	r0, r0
 8000bf4:	ea5f 0c00 	movs.w	ip, r0
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c00:	4601      	mov	r1, r0
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	e01c      	b.n	8000c42 <__aeabi_l2f+0x2a>

08000c08 <__aeabi_ul2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e00a      	b.n	8000c2c <__aeabi_l2f+0x14>
 8000c16:	bf00      	nop

08000c18 <__aeabi_l2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__aeabi_l2f+0x14>
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	ea5f 0c01 	movs.w	ip, r1
 8000c30:	bf02      	ittt	eq
 8000c32:	4684      	moveq	ip, r0
 8000c34:	4601      	moveq	r1, r0
 8000c36:	2000      	moveq	r0, #0
 8000c38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c3c:	bf08      	it	eq
 8000c3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c46:	fabc f28c 	clz	r2, ip
 8000c4a:	3a08      	subs	r2, #8
 8000c4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c50:	db10      	blt.n	8000c74 <__aeabi_l2f+0x5c>
 8000c52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c56:	4463      	add	r3, ip
 8000c58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5c:	f1c2 0220 	rsb	r2, r2, #32
 8000c60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	eb43 0002 	adc.w	r0, r3, r2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f102 0220 	add.w	r2, r2, #32
 8000c78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c84:	fa21 f202 	lsr.w	r2, r1, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_fmul>:
 8000c94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ca2:	ea92 0f0c 	teqne	r2, ip
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d06f      	beq.n	8000d8c <__aeabi_fmul+0xf8>
 8000cac:	441a      	add	r2, r3
 8000cae:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb2:	0240      	lsls	r0, r0, #9
 8000cb4:	bf18      	it	ne
 8000cb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cba:	d01e      	beq.n	8000cfa <__aeabi_fmul+0x66>
 8000cbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ccc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd4:	bf3e      	ittt	cc
 8000cd6:	0049      	lslcc	r1, r1, #1
 8000cd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	ea40 0001 	orr.w	r0, r0, r1
 8000ce2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce6:	2afd      	cmp	r2, #253	; 0xfd
 8000ce8:	d81d      	bhi.n	8000d26 <__aeabi_fmul+0x92>
 8000cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf2:	bf08      	it	eq
 8000cf4:	f020 0001 	biceq.w	r0, r0, #1
 8000cf8:	4770      	bx	lr
 8000cfa:	f090 0f00 	teq	r0, #0
 8000cfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d02:	bf08      	it	eq
 8000d04:	0249      	lsleq	r1, r1, #9
 8000d06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0e:	3a7f      	subs	r2, #127	; 0x7f
 8000d10:	bfc2      	ittt	gt
 8000d12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d1a:	4770      	bxgt	lr
 8000d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	3a01      	subs	r2, #1
 8000d26:	dc5d      	bgt.n	8000de4 <__aeabi_fmul+0x150>
 8000d28:	f112 0f19 	cmn.w	r2, #25
 8000d2c:	bfdc      	itt	le
 8000d2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d32:	4770      	bxle	lr
 8000d34:	f1c2 0200 	rsb	r2, r2, #0
 8000d38:	0041      	lsls	r1, r0, #1
 8000d3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3e:	f1c2 0220 	rsb	r2, r2, #32
 8000d42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d4a:	f140 0000 	adc.w	r0, r0, #0
 8000d4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d52:	bf08      	it	eq
 8000d54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d58:	4770      	bx	lr
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fmul+0xce>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fmul+0xe6>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e78f      	b.n	8000cac <__aeabi_fmul+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	bf18      	it	ne
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d00a      	beq.n	8000db2 <__aeabi_fmul+0x11e>
 8000d9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da0:	bf18      	it	ne
 8000da2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da6:	d1d8      	bne.n	8000d5a <__aeabi_fmul+0xc6>
 8000da8:	ea80 0001 	eor.w	r0, r0, r1
 8000dac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	bf17      	itett	ne
 8000db8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	f091 0f00 	teqne	r1, #0
 8000dc2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc6:	d014      	beq.n	8000df2 <__aeabi_fmul+0x15e>
 8000dc8:	ea92 0f0c 	teq	r2, ip
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_fmul+0x13e>
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	d10f      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000dd2:	ea93 0f0c 	teq	r3, ip
 8000dd6:	d103      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000dd8:	024b      	lsls	r3, r1, #9
 8000dda:	bf18      	it	ne
 8000ddc:	4608      	movne	r0, r1
 8000dde:	d108      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000de0:	ea80 0001 	eor.w	r0, r0, r1
 8000de4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df0:	4770      	bx	lr
 8000df2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fdiv>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d069      	beq.n	8000ee8 <__aeabi_fdiv+0xec>
 8000e14:	eba2 0203 	sub.w	r2, r2, r3
 8000e18:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e22:	d037      	beq.n	8000e94 <__aeabi_fdiv+0x98>
 8000e24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e34:	428b      	cmp	r3, r1
 8000e36:	bf38      	it	cc
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e42:	428b      	cmp	r3, r1
 8000e44:	bf24      	itt	cs
 8000e46:	1a5b      	subcs	r3, r3, r1
 8000e48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5e:	bf24      	itt	cs
 8000e60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	bf18      	it	ne
 8000e7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7e:	d1e0      	bne.n	8000e42 <__aeabi_fdiv+0x46>
 8000e80:	2afd      	cmp	r2, #253	; 0xfd
 8000e82:	f63f af50 	bhi.w	8000d26 <__aeabi_fmul+0x92>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9c:	327f      	adds	r2, #127	; 0x7f
 8000e9e:	bfc2      	ittt	gt
 8000ea0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea8:	4770      	bxgt	lr
 8000eaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	3a01      	subs	r2, #1
 8000eb4:	e737      	b.n	8000d26 <__aeabi_fmul+0x92>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fdiv+0xc2>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fdiv+0xda>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e795      	b.n	8000e14 <__aeabi_fdiv+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d108      	bne.n	8000f04 <__aeabi_fdiv+0x108>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	f47f af7d 	bne.w	8000df2 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	f47f af70 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e776      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	d104      	bne.n	8000f14 <__aeabi_fdiv+0x118>
 8000f0a:	024b      	lsls	r3, r1, #9
 8000f0c:	f43f af4c 	beq.w	8000da8 <__aeabi_fmul+0x114>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e76e      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f18:	bf18      	it	ne
 8000f1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	d1ca      	bne.n	8000eb6 <__aeabi_fdiv+0xba>
 8000f20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f24:	f47f af5c 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f2c:	f47f af3c 	bne.w	8000da8 <__aeabi_fmul+0x114>
 8000f30:	e75f      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <_ZL6linearttt>:
 * https://www.desmos.com/calculator/sowyhttjta
 *
 * x * 100 / v
 */
static inline uint8_t linear(uint16_t voltage, uint16_t minVoltage, uint16_t maxVoltage) {
	return (unsigned long)(voltage - minVoltage) * 100 / (maxVoltage - minVoltage);
 8000f74:	1a43      	subs	r3, r0, r1
 8000f76:	2064      	movs	r0, #100	; 0x64
 8000f78:	4358      	muls	r0, r3
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	fbb0 f0f2 	udiv	r0, r0, r2
}
 8000f80:	b2c0      	uxtb	r0, r0
 8000f82:	4770      	bx	lr

08000f84 <_ZN7BatteryC1Ett>:
 */

#include "Battery.h"

Battery::Battery(uint16_t minVoltage, uint16_t maxVoltage) {
	this->minVoltage = minVoltage;
 8000f84:	8041      	strh	r1, [r0, #2]
	this->maxVoltage = maxVoltage;
 8000f86:	8082      	strh	r2, [r0, #4]
}
 8000f88:	4770      	bx	lr
	...

08000f8c <_ZN7Battery5beginEtfPFhtttE>:

void Battery::begin(uint16_t refVoltage, float dividerRatio, mapFn_t mapFunction) {
	this->refVoltage = refVoltage;
	this->dividerRatio = dividerRatio;
 8000f8c:	6082      	str	r2, [r0, #8]
	this->mapFunction = mapFunction ? mapFunction : &linear;
 8000f8e:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <_ZN7Battery5beginEtfPFhtttE+0x10>)
	this->refVoltage = refVoltage;
 8000f90:	8001      	strh	r1, [r0, #0]
	this->mapFunction = mapFunction ? mapFunction : &linear;
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf08      	it	eq
 8000f96:	4613      	moveq	r3, r2
 8000f98:	6103      	str	r3, [r0, #16]
}
 8000f9a:	4770      	bx	lr
 8000f9c:	08000f75 	.word	0x08000f75

08000fa0 <_ZN7Battery5levelEt>:

uint8_t Battery::level() {
	return this->level(this->voltage());
}

uint8_t Battery::level(uint16_t voltage) {
 8000fa0:	460b      	mov	r3, r1
	if (voltage <= minVoltage) {
 8000fa2:	8841      	ldrh	r1, [r0, #2]
uint8_t Battery::level(uint16_t voltage) {
 8000fa4:	b410      	push	{r4}
	if (voltage <= minVoltage) {
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	d207      	bcs.n	8000fba <_ZN7Battery5levelEt+0x1a>
		return 0;
	} else if (voltage >= maxVoltage) {
 8000faa:	8882      	ldrh	r2, [r0, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d907      	bls.n	8000fc0 <_ZN7Battery5levelEt+0x20>
		return 100;
	} else {
		return (*mapFunction)(voltage, minVoltage, maxVoltage);
 8000fb0:	6904      	ldr	r4, [r0, #16]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	4623      	mov	r3, r4
	}
}
 8000fb6:	bc10      	pop	{r4}
		return (*mapFunction)(voltage, minVoltage, maxVoltage);
 8000fb8:	4718      	bx	r3
		return 0;
 8000fba:	2000      	movs	r0, #0
}
 8000fbc:	bc10      	pop	{r4}
 8000fbe:	4770      	bx	lr
		return 100;
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	e7fb      	b.n	8000fbc <_ZN7Battery5levelEt+0x1c>

08000fc4 <_ZN7Battery7voltageEv>:

uint16_t Battery::voltage() {
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	4605      	mov	r5, r0
	HAL_ADC_Start(&hadc1);
 8000fc8:	4c11      	ldr	r4, [pc, #68]	; (8001010 <_ZN7Battery7voltageEv+0x4c>)
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f002 fe02 	bl	8003bd4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,100);
 8000fd0:	2164      	movs	r1, #100	; 0x64
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f002 fc0e 	bl	80037f4 <HAL_ADC_PollForConversion>
	uint16_t reading = HAL_ADC_GetValue(&hadc1) * dividerRatio * refVoltage / 4096;
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f002 fcd7 	bl	800398c <HAL_ADC_GetValue>
 8000fde:	f7ff fe01 	bl	8000be4 <__aeabi_ui2f>
 8000fe2:	68a9      	ldr	r1, [r5, #8]
 8000fe4:	f7ff fe56 	bl	8000c94 <__aeabi_fmul>
 8000fe8:	4606      	mov	r6, r0
 8000fea:	8828      	ldrh	r0, [r5, #0]
 8000fec:	f7ff fdfe 	bl	8000bec <__aeabi_i2f>
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f7ff fe4e 	bl	8000c94 <__aeabi_fmul>
 8000ff8:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8000ffc:	f7ff fe4a 	bl	8000c94 <__aeabi_fmul>
 8001000:	f7ff ff98 	bl	8000f34 <__aeabi_f2uiz>
 8001004:	b285      	uxth	r5, r0
	HAL_ADC_Stop(&hadc1);
 8001006:	4620      	mov	r0, r4
 8001008:	f002 ff7a 	bl	8003f00 <HAL_ADC_Stop>
	return reading;
}
 800100c:	4628      	mov	r0, r5
 800100e:	bd70      	pop	{r4, r5, r6, pc}
 8001010:	200009e8 	.word	0x200009e8

08001014 <_ZN7Battery5levelEv>:
uint8_t Battery::level() {
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
	return this->level(this->voltage());
 8001018:	f7ff ffd4 	bl	8000fc4 <_ZN7Battery7voltageEv>
 800101c:	4601      	mov	r1, r0
 800101e:	4620      	mov	r0, r4
}
 8001020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return this->level(this->voltage());
 8001024:	f7ff bfbc 	b.w	8000fa0 <_ZN7Battery5levelEt>

08001028 <_ZN7GButtonC1EP12GPIO_TypeDeflbb>:
#include "GyverButton_HALmod.h"
#include <Arduino_HALmod.h>

// ==================== CONSTRUCTOR ====================
GButton::GButton(GPIO_TypeDef * port, int32_t pin, bool type, bool dir) {
 8001028:	b530      	push	{r4, r5, lr}
 800102a:	2500      	movs	r5, #0
 800102c:	f8df c044 	ldr.w	ip, [pc, #68]	; 8001074 <_ZN7GButtonC1EP12GPIO_TypeDeflbb+0x4c>
 8001030:	4c0f      	ldr	r4, [pc, #60]	; (8001070 <_ZN7GButtonC1EP12GPIO_TypeDeflbb+0x48>)
 8001032:	8045      	strh	r5, [r0, #2]
 8001034:	e9c0 c402 	strd	ip, r4, [r0, #8]
	if (pin != BTN_NO_PIN) {
 8001038:	1c54      	adds	r4, r2, #1
 800103a:	7844      	ldrb	r4, [r0, #1]
		_PIN = (uint16_t)pin;
 800103c:	bf1a      	itte	ne
 800103e:	8042      	strhne	r2, [r0, #2]
		_PORT = (uint32_t)port;
		flags.noPin = false;
 8001040:	f365 1445 	bfine	r4, r5, #5, #1
	} else {
		flags.noPin = true;
 8001044:	f044 0420 	orreq.w	r4, r4, #32
 8001048:	7044      	strb	r4, [r0, #1]
}
void GButton::setStepTimeout(uint16_t step_timeout) {
	_step_timeout = step_timeout;
}
void GButton::setType(bool type) {
	flags.type = type;
 800104a:	7842      	ldrb	r2, [r0, #1]
GButton::GButton(GPIO_TypeDef * port, int32_t pin, bool type, bool dir) {
 800104c:	8205      	strh	r5, [r0, #16]
	flags.type = type;
 800104e:	f363 02c3 	bfi	r2, r3, #3, #1
	flags.inv_state = dir;
 8001052:	f002 03eb 	and.w	r3, r2, #235	; 0xeb
 8001056:	f89d 200c 	ldrb.w	r2, [sp, #12]
GButton::GButton(GPIO_TypeDef * port, int32_t pin, bool type, bool dir) {
 800105a:	7485      	strb	r5, [r0, #18]
	flags.inv_state = dir;
 800105c:	f362 0341 	bfi	r3, r2, #1, #1
GButton::GButton(GPIO_TypeDef * port, int32_t pin, bool type, bool dir) {
 8001060:	6145      	str	r5, [r0, #20]
 8001062:	7605      	strb	r5, [r0, #24]
 8001064:	7645      	strb	r5, [r0, #25]
		_PORT = (uint32_t)port;
 8001066:	bf18      	it	ne
 8001068:	6041      	strne	r1, [r0, #4]
	flags.inv_state = dir;
 800106a:	7043      	strb	r3, [r0, #1]
}
 800106c:	bd30      	pop	{r4, r5, pc}
 800106e:	bf00      	nop
 8001070:	019001f4 	.word	0x019001f4
 8001074:	01f4003c 	.word	0x01f4003c

08001078 <_ZN7GButton10setTimeoutEt>:
	_timeout = new_timeout;
 8001078:	8141      	strh	r1, [r0, #10]
}
 800107a:	4770      	bx	lr

0800107c <_ZN7GButton11setTickModeEb>:
}
void GButton::setDirection(bool dir) {
	flags.inv_state = dir;
}
void GButton::setTickMode(bool tickMode) {
	flags.tickMode = tickMode;
 800107c:	7843      	ldrb	r3, [r0, #1]
 800107e:	f361 1304 	bfi	r3, r1, #4, #1
 8001082:	7043      	strb	r3, [r0, #1]
}
 8001084:	4770      	bx	lr

08001086 <_ZN7GButton4tickEv>:
	btn_state = state ^ flags.inv_state;
	GButton::tick();
	flags.mode = false;
}

void GButton::tick() {	
 8001086:	b538      	push	{r3, r4, r5, lr}
	// читаем пин
	if (!flags.mode && !flags.noPin) btn_state = !HAL_GPIO_ReadPin((GPIO_TypeDef*)_PORT, _PIN) ^ (flags.inv_state ^ flags.type);
 8001088:	7843      	ldrb	r3, [r0, #1]
void GButton::tick() {	
 800108a:	4604      	mov	r4, r0
	if (!flags.mode && !flags.noPin) btn_state = !HAL_GPIO_ReadPin((GPIO_TypeDef*)_PORT, _PIN) ^ (flags.inv_state ^ flags.type);
 800108c:	075d      	lsls	r5, r3, #29
 800108e:	d411      	bmi.n	80010b4 <_ZN7GButton4tickEv+0x2e>
 8001090:	0698      	lsls	r0, r3, #26
 8001092:	d40f      	bmi.n	80010b4 <_ZN7GButton4tickEv+0x2e>
 8001094:	8861      	ldrh	r1, [r4, #2]
 8001096:	6860      	ldr	r0, [r4, #4]
 8001098:	f003 fb42 	bl	8004720 <HAL_GPIO_ReadPin>
 800109c:	7862      	ldrb	r2, [r4, #1]
 800109e:	f3c2 0340 	ubfx	r3, r2, #1, #1
 80010a2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80010a6:	4053      	eors	r3, r2
 80010a8:	2800      	cmp	r0, #0
 80010aa:	bf14      	ite	ne
 80010ac:	4618      	movne	r0, r3
 80010ae:	f083 0001 	eoreq.w	r0, r3, #1
 80010b2:	7620      	strb	r0, [r4, #24]

	uint32_t thisMls = millis();
 80010b4:	f002 fb84 	bl	80037c0 <HAL_GetTick>

	// нажатие
	if (btn_state && !btn_flag) {
 80010b8:	7e22      	ldrb	r2, [r4, #24]
 80010ba:	7e63      	ldrb	r3, [r4, #25]
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d036      	beq.n	800112e <_ZN7GButton4tickEv+0xa8>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d134      	bne.n	800112e <_ZN7GButton4tickEv+0xa8>
		if (!flags.btn_deb) {
 80010c4:	7823      	ldrb	r3, [r4, #0]
 80010c6:	07d9      	lsls	r1, r3, #31
 80010c8:	d426      	bmi.n	8001118 <_ZN7GButton4tickEv+0x92>
			flags.btn_deb = true;
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	7023      	strb	r3, [r4, #0]
			btn_timer = thisMls;
 80010d0:	6160      	str	r0, [r4, #20]
			flags.isOne_f = true;
		}
	}

	// кнопка удерживается
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout) && !flags.hold_flag) {
 80010d2:	7e63      	ldrb	r3, [r4, #25]
 80010d4:	b18b      	cbz	r3, 80010fa <_ZN7GButton4tickEv+0x74>
 80010d6:	b182      	cbz	r2, 80010fa <_ZN7GButton4tickEv+0x74>
 80010d8:	6963      	ldr	r3, [r4, #20]
 80010da:	8962      	ldrh	r2, [r4, #10]
 80010dc:	1ac3      	subs	r3, r0, r3
 80010de:	429a      	cmp	r2, r3
 80010e0:	d80b      	bhi.n	80010fa <_ZN7GButton4tickEv+0x74>
 80010e2:	7823      	ldrb	r3, [r4, #0]
 80010e4:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80010e8:	b93a      	cbnz	r2, 80010fa <_ZN7GButton4tickEv+0x74>
		flags.hold_flag = true;
		last_hold_counter = btn_counter;
 80010ea:	7c21      	ldrb	r1, [r4, #16]
		//btn_counter = 0;
		//last_counter = 0;
		flags.isHolded_f = true;
		flags.step_flag = true;
		flags.oneClick_f = false;
 80010ec:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 80010f0:	f362 13c7 	bfi	r3, r2, #7, #1
		last_hold_counter = btn_counter;
 80010f4:	74a1      	strb	r1, [r4, #18]
		flags.oneClick_f = false;
 80010f6:	7023      	strb	r3, [r4, #0]
		btn_timer = thisMls;
 80010f8:	6160      	str	r0, [r4, #20]
	}

	// обработка накликивания
	if ((thisMls - btn_timer >= _click_timeout) && (btn_counter != 0)) {
 80010fa:	6963      	ldr	r3, [r4, #20]
 80010fc:	1ac0      	subs	r0, r0, r3
 80010fe:	89a3      	ldrh	r3, [r4, #12]
 8001100:	4298      	cmp	r0, r3
 8001102:	d308      	bcc.n	8001116 <_ZN7GButton4tickEv+0x90>
 8001104:	7c23      	ldrb	r3, [r4, #16]
 8001106:	b133      	cbz	r3, 8001116 <_ZN7GButton4tickEv+0x90>
		last_counter = btn_counter;
 8001108:	7463      	strb	r3, [r4, #17]
		btn_counter = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	7423      	strb	r3, [r4, #16]
		flags.counter_flag = true;
 800110e:	7823      	ldrb	r3, [r4, #0]
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	7023      	strb	r3, [r4, #0]
	}
}
 8001116:	bd38      	pop	{r3, r4, r5, pc}
			if (thisMls - btn_timer >= _debounce) {
 8001118:	6961      	ldr	r1, [r4, #20]
 800111a:	8925      	ldrh	r5, [r4, #8]
 800111c:	1a41      	subs	r1, r0, r1
 800111e:	42a9      	cmp	r1, r5
 8001120:	d3eb      	bcc.n	80010fa <_ZN7GButton4tickEv+0x74>
				btn_flag = true;
 8001122:	2101      	movs	r1, #1
				flags.oneClick_f = true;
 8001124:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
				btn_flag = true;
 8001128:	7661      	strb	r1, [r4, #25]
				flags.oneClick_f = true;
 800112a:	7023      	strb	r3, [r4, #0]
 800112c:	e7d1      	b.n	80010d2 <_ZN7GButton4tickEv+0x4c>
		flags.btn_deb = false;
 800112e:	7821      	ldrb	r1, [r4, #0]
 8001130:	f36f 0100 	bfc	r1, #0, #1
 8001134:	7021      	strb	r1, [r4, #0]
	if (!btn_state && btn_flag) {
 8001136:	2a00      	cmp	r2, #0
 8001138:	d1cb      	bne.n	80010d2 <_ZN7GButton4tickEv+0x4c>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0dd      	beq.n	80010fa <_ZN7GButton4tickEv+0x74>
		if (!flags.hold_flag) btn_counter++;
 800113e:	b2cb      	uxtb	r3, r1
 8001140:	079d      	lsls	r5, r3, #30
 8001142:	bf58      	it	pl
 8001144:	7c23      	ldrbpl	r3, [r4, #16]
		btn_flag = false;
 8001146:	7662      	strb	r2, [r4, #25]
		if (!flags.hold_flag) btn_counter++;
 8001148:	bf5c      	itt	pl
 800114a:	3301      	addpl	r3, #1
 800114c:	7423      	strbpl	r3, [r4, #16]
		flags.hold_flag = false;
 800114e:	7823      	ldrb	r3, [r4, #0]
		btn_timer = thisMls;
 8001150:	6160      	str	r0, [r4, #20]
		flags.isRelease_f = true;
 8001152:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001156:	f043 0310 	orr.w	r3, r3, #16
		if (flags.step_flag) {
 800115a:	0659      	lsls	r1, r3, #25
			btn_counter = 0;
 800115c:	bf48      	it	mi
 800115e:	2100      	movmi	r1, #0
		flags.isRelease_f = true;
 8001160:	7023      	strb	r3, [r4, #0]
			flags.step_flag = false;
 8001162:	bf44      	itt	mi
 8001164:	f361 1386 	bfimi	r3, r1, #6, #1
 8001168:	7023      	strbmi	r3, [r4, #0]
		if (flags.oneClick_f) {
 800116a:	7823      	ldrb	r3, [r4, #0]
			btn_counter = 0;
 800116c:	bf48      	it	mi
 800116e:	8221      	strhmi	r1, [r4, #16]
		if (flags.oneClick_f) {
 8001170:	09d9      	lsrs	r1, r3, #7
 8001172:	d0c2      	beq.n	80010fa <_ZN7GButton4tickEv+0x74>
			flags.oneClick_f = false;
 8001174:	f36f 13c7 	bfc	r3, #7, #1
 8001178:	7023      	strb	r3, [r4, #0]
			flags.isOne_f = true;
 800117a:	7863      	ldrb	r3, [r4, #1]
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	7063      	strb	r3, [r4, #1]
 8001182:	e7a6      	b.n	80010d2 <_ZN7GButton4tickEv+0x4c>

08001184 <_ZN7GButton7isClickEv>:
	if (flags.tickMode) GButton::tick();
 8001184:	7843      	ldrb	r3, [r0, #1]
boolean GButton::isClick() {
 8001186:	b510      	push	{r4, lr}
	if (flags.tickMode) GButton::tick();
 8001188:	06db      	lsls	r3, r3, #27
boolean GButton::isClick() {
 800118a:	4604      	mov	r4, r0
	if (flags.tickMode) GButton::tick();
 800118c:	d501      	bpl.n	8001192 <_ZN7GButton7isClickEv+0xe>
 800118e:	f7ff ff7a 	bl	8001086 <_ZN7GButton4tickEv>
	if (flags.isOne_f) {
 8001192:	7863      	ldrb	r3, [r4, #1]
 8001194:	f013 0001 	ands.w	r0, r3, #1
		flags.isOne_f = false;
 8001198:	bf1c      	itt	ne
 800119a:	f36f 0300 	bfcne	r3, #0, #1
 800119e:	7063      	strbne	r3, [r4, #1]
}
 80011a0:	bd10      	pop	{r4, pc}

080011a2 <_ZN7GButton8isHoldedEv>:
	if (flags.tickMode) GButton::tick();
 80011a2:	7843      	ldrb	r3, [r0, #1]
boolean GButton::isHolded() {
 80011a4:	b510      	push	{r4, lr}
	if (flags.tickMode) GButton::tick();
 80011a6:	06db      	lsls	r3, r3, #27
boolean GButton::isHolded() {
 80011a8:	4604      	mov	r4, r0
	if (flags.tickMode) GButton::tick();
 80011aa:	d501      	bpl.n	80011b0 <_ZN7GButton8isHoldedEv+0xe>
 80011ac:	f7ff ff6b 	bl	8001086 <_ZN7GButton4tickEv>
	if (flags.isHolded_f) {
 80011b0:	7823      	ldrb	r3, [r4, #0]
 80011b2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
 80011b6:	b110      	cbz	r0, 80011be <_ZN7GButton8isHoldedEv+0x1c>
		flags.isHolded_f = false;
 80011b8:	f36f 03c3 	bfc	r3, #3, #1
 80011bc:	7023      	strb	r3, [r4, #0]
}
 80011be:	bd10      	pop	{r4, pc}

080011c0 <_ZN7GButton6isHoldEv>:
	if (flags.tickMode) GButton::tick();
 80011c0:	7843      	ldrb	r3, [r0, #1]
boolean GButton::isHold() {
 80011c2:	b510      	push	{r4, lr}
	if (flags.tickMode) GButton::tick();
 80011c4:	06db      	lsls	r3, r3, #27
boolean GButton::isHold() {
 80011c6:	4604      	mov	r4, r0
	if (flags.tickMode) GButton::tick();
 80011c8:	d501      	bpl.n	80011ce <_ZN7GButton6isHoldEv+0xe>
 80011ca:	f7ff ff5c 	bl	8001086 <_ZN7GButton4tickEv>
	if (flags.step_flag) return true;
 80011ce:	7820      	ldrb	r0, [r4, #0]
}
 80011d0:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80011d4:	bd10      	pop	{r4, pc}
	...

080011d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011d8:	b500      	push	{lr}
 80011da:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80011dc:	2300      	movs	r3, #0
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	9303      	str	r3, [sp, #12]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011e4:	4811      	ldr	r0, [pc, #68]	; (800122c <MX_ADC1_Init+0x54>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <MX_ADC1_Init+0x58>)
 80011e8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ea:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ec:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011f4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f6:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011fc:	f002 fd94 	bl	8003d28 <HAL_ADC_Init>
 8001200:	b968      	cbnz	r0, 800121e <MX_ADC1_Init+0x46>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001202:	2303      	movs	r3, #3
 8001204:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001206:	2301      	movs	r3, #1
 8001208:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800120a:	2300      	movs	r3, #0
 800120c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120e:	a901      	add	r1, sp, #4
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_ADC1_Init+0x54>)
 8001212:	f002 fbd1 	bl	80039b8 <HAL_ADC_ConfigChannel>
 8001216:	b928      	cbnz	r0, 8001224 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
  }

}
 8001218:	b005      	add	sp, #20
 800121a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800121e:	f000 fa65 	bl	80016ec <Error_Handler>
 8001222:	e7ee      	b.n	8001202 <MX_ADC1_Init+0x2a>
    Error_Handler();
 8001224:	f000 fa62 	bl	80016ec <Error_Handler>
}
 8001228:	e7f6      	b.n	8001218 <MX_ADC1_Init+0x40>
 800122a:	bf00      	nop
 800122c:	200009e8 	.word	0x200009e8
 8001230:	40012400 	.word	0x40012400

08001234 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001234:	b500      	push	{lr}
 8001236:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	2300      	movs	r3, #0
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	9303      	str	r3, [sp, #12]
 800123e:	9304      	str	r3, [sp, #16]
 8001240:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 8001242:	6802      	ldr	r2, [r0, #0]
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_ADC_MspInit+0x58>)
 8001246:	429a      	cmp	r2, r3
 8001248:	d002      	beq.n	8001250 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800124a:	b007      	add	sp, #28
 800124c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001250:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800125a:	619a      	str	r2, [r3, #24]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	699a      	ldr	r2, [r3, #24]
 8001268:	f042 0204 	orr.w	r2, r2, #4
 800126c:	619a      	str	r2, [r3, #24]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BATTERY_LEVEL_Pin;
 8001278:	2308      	movs	r3, #8
 800127a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127c:	2303      	movs	r3, #3
 800127e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BATTERY_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8001280:	a902      	add	r1, sp, #8
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <HAL_ADC_MspInit+0x5c>)
 8001284:	f003 f8da 	bl	800443c <HAL_GPIO_Init>
}
 8001288:	e7df      	b.n	800124a <HAL_ADC_MspInit+0x16>
 800128a:	bf00      	nop
 800128c:	40012400 	.word	0x40012400
 8001290:	40010800 	.word	0x40010800

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001294:	b500      	push	{lr}
 8001296:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_DMA_Init+0x50>)
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	f042 0201 	orr.w	r2, r2, #1
 80012a0:	615a      	str	r2, [r3, #20]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	4611      	mov	r1, r2
 80012b0:	200c      	movs	r0, #12
 80012b2:	f002 fe71 	bl	8003f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012b6:	200c      	movs	r0, #12
 80012b8:	f002 feb2 	bl	8004020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	4611      	mov	r1, r2
 80012c0:	200d      	movs	r0, #13
 80012c2:	f002 fe69 	bl	8003f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012c6:	200d      	movs	r0, #13
 80012c8:	f002 feaa 	bl	8004020 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	4611      	mov	r1, r2
 80012d0:	200e      	movs	r0, #14
 80012d2:	f002 fe61 	bl	8003f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80012d6:	200e      	movs	r0, #14
 80012d8:	f002 fea2 	bl	8004020 <HAL_NVIC_EnableIRQ>

}
 80012dc:	b003      	add	sp, #12
 80012de:	f85d fb04 	ldr.w	pc, [sp], #4
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <MX_GPIO_Init>:
     PA1   ------> S_TIM2_CH2
     PA2   ------> S_TIM2_CH3
     PB4   ------> S_TIM3_CH1
*/
void MX_GPIO_Init(void)
{
 80012e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ec:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	2400      	movs	r4, #0
 80012f0:	9404      	str	r4, [sp, #16]
 80012f2:	9405      	str	r4, [sp, #20]
 80012f4:	9406      	str	r4, [sp, #24]
 80012f6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <MX_GPIO_Init+0x130>)
 80012fa:	699a      	ldr	r2, [r3, #24]
 80012fc:	f042 0210 	orr.w	r2, r2, #16
 8001300:	619a      	str	r2, [r3, #24]
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	f002 0210 	and.w	r2, r2, #16
 8001308:	9200      	str	r2, [sp, #0]
 800130a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	f042 0220 	orr.w	r2, r2, #32
 8001312:	619a      	str	r2, [r3, #24]
 8001314:	699a      	ldr	r2, [r3, #24]
 8001316:	f002 0220 	and.w	r2, r2, #32
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	699a      	ldr	r2, [r3, #24]
 8001320:	f042 0204 	orr.w	r2, r2, #4
 8001324:	619a      	str	r2, [r3, #24]
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	f002 0204 	and.w	r2, r2, #4
 800132c:	9202      	str	r2, [sp, #8]
 800132e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	f042 0208 	orr.w	r2, r2, #8
 8001336:	619a      	str	r2, [r3, #24]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	9303      	str	r3, [sp, #12]
 8001340:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8001342:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8001428 <MX_GPIO_Init+0x140>
 8001346:	4622      	mov	r2, r4
 8001348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134c:	4648      	mov	r0, r9
 800134e:	f003 f9f9 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001352:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800142c <MX_GPIO_Init+0x144>
 8001356:	4622      	mov	r2, r4
 8001358:	2110      	movs	r1, #16
 800135a:	4640      	mov	r0, r8
 800135c:	f003 f9f2 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_CS_Pin|RADIO_CE_Pin, GPIO_PIN_SET);
 8001360:	4f2e      	ldr	r7, [pc, #184]	; (800141c <MX_GPIO_Init+0x134>)
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001368:	4638      	mov	r0, r7
 800136a:	f003 f9eb 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2601      	movs	r6, #1
 8001376:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001378:	2502      	movs	r5, #2
 800137a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 800137e:	a904      	add	r1, sp, #16
 8001380:	4648      	mov	r0, r9
 8001382:	f003 f85b 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin|CH3_Pin;
 8001386:	2307      	movs	r3, #7
 8001388:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	a904      	add	r1, sp, #16
 8001390:	4640      	mov	r0, r8
 8001392:	f003 f853 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001396:	f04f 0910 	mov.w	r9, #16
 800139a:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80013a4:	eb0d 0109 	add.w	r1, sp, r9
 80013a8:	4640      	mov	r0, r8
 80013aa:	f003 f847 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SD_CD_Pin|BUTTON_LEFT_Pin|BUTTON_OK_Pin|BUTTON_RIGHT_Pin
 80013ae:	f640 4343 	movw	r3, #3139	; 0xc43
 80013b2:	9304      	str	r3, [sp, #16]
                          |RADIO_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_GPIO_Init+0x138>)
 80013b6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b8:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	eb0d 0109 	add.w	r1, sp, r9
 80013be:	4638      	mov	r0, r7
 80013c0:	f003 f83c 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_CS_Pin|RADIO_CE_Pin;
 80013c4:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80013c8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	eb0d 0109 	add.w	r1, sp, r9
 80013d6:	4638      	mov	r0, r7
 80013d8:	f003 f830 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CH4_Pin;
 80013dc:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 80013e4:	eb0d 0109 	add.w	r1, sp, r9
 80013e8:	4638      	mov	r0, r7
 80013ea:	f003 f827 	bl	800443c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80013ee:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <MX_GPIO_Init+0x13c>)
 80013f0:	6853      	ldr	r3, [r2, #4]
 80013f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80013f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013fe:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001400:	4622      	mov	r2, r4
 8001402:	4621      	mov	r1, r4
 8001404:	2017      	movs	r0, #23
 8001406:	f002 fdc7 	bl	8003f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800140a:	2017      	movs	r0, #23
 800140c:	f002 fe08 	bl	8004020 <HAL_NVIC_EnableIRQ>

}
 8001410:	b009      	add	sp, #36	; 0x24
 8001412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	40010c00 	.word	0x40010c00
 8001420:	10210000 	.word	0x10210000
 8001424:	40010000 	.word	0x40010000
 8001428:	40011000 	.word	0x40011000
 800142c:	40010800 	.word	0x40010800

08001430 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001430:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8001432:	480b      	ldr	r0, [pc, #44]	; (8001460 <MX_I2C1_Init+0x30>)
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_I2C1_Init+0x34>)
 8001436:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_I2C1_Init+0x38>)
 800143a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800143c:	2300      	movs	r3, #0
 800143e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001440:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001446:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800144a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001450:	f003 f9ba 	bl	80047c8 <HAL_I2C_Init>
 8001454:	b900      	cbnz	r0, 8001458 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
  }

}
 8001456:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001458:	f000 f948 	bl	80016ec <Error_Handler>
}
 800145c:	e7fb      	b.n	8001456 <MX_I2C1_Init+0x26>
 800145e:	bf00      	nop
 8001460:	20000a18 	.word	0x20000a18
 8001464:	40005400 	.word	0x40005400
 8001468:	000186a0 	.word	0x000186a0

0800146c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800146c:	b510      	push	{r4, lr}
 800146e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	2300      	movs	r3, #0
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	9303      	str	r3, [sp, #12]
 8001476:	9304      	str	r3, [sp, #16]
 8001478:	9305      	str	r3, [sp, #20]
  if(i2cHandle->Instance==I2C1)
 800147a:	6802      	ldr	r2, [r0, #0]
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_I2C_MspInit+0x68>)
 800147e:	429a      	cmp	r2, r3
 8001480:	d001      	beq.n	8001486 <HAL_I2C_MspInit+0x1a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001482:	b006      	add	sp, #24
 8001484:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4c14      	ldr	r4, [pc, #80]	; (80014d8 <HAL_I2C_MspInit+0x6c>)
 8001488:	69a3      	ldr	r3, [r4, #24]
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	61a3      	str	r3, [r4, #24]
 8001490:	69a3      	ldr	r3, [r4, #24]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800149a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a0:	2312      	movs	r3, #18
 80014a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	a902      	add	r1, sp, #8
 80014aa:	480c      	ldr	r0, [pc, #48]	; (80014dc <HAL_I2C_MspInit+0x70>)
 80014ac:	f002 ffc6 	bl	800443c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80014b0:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_I2C_MspInit+0x74>)
 80014b2:	6853      	ldr	r3, [r2, #4]
 80014b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014be:	69e3      	ldr	r3, [r4, #28]
 80014c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c4:	61e3      	str	r3, [r4, #28]
 80014c6:	69e3      	ldr	r3, [r4, #28]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	9b01      	ldr	r3, [sp, #4]
}
 80014d0:	e7d7      	b.n	8001482 <HAL_I2C_MspInit+0x16>
 80014d2:	bf00      	nop
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010c00 	.word	0x40010c00
 80014e0:	40010000 	.word	0x40010000
 80014e4:	00000000 	.word	0x00000000

080014e8 <_ZL9sigmoidalttt>:
static inline uint8_t sigmoidal(uint16_t voltage, uint16_t minVoltage, uint16_t maxVoltage) {
 80014e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t result = 105 - (105 / (1 + pow(1.724 * (voltage - minVoltage)/(maxVoltage - minVoltage), 5.5)));
 80014ea:	1a40      	subs	r0, r0, r1
static inline uint8_t sigmoidal(uint16_t voltage, uint16_t minVoltage, uint16_t maxVoltage) {
 80014ec:	4615      	mov	r5, r2
 80014ee:	460c      	mov	r4, r1
	uint8_t result = 105 - (105 / (1 + pow(1.724 * (voltage - minVoltage)/(maxVoltage - minVoltage), 5.5)));
 80014f0:	f7fe ff88 	bl	8000404 <__aeabi_i2d>
 80014f4:	a316      	add	r3, pc, #88	; (adr r3, 8001550 <_ZL9sigmoidalttt+0x68>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe ffed 	bl	80004d8 <__aeabi_dmul>
 80014fe:	4606      	mov	r6, r0
 8001500:	1b28      	subs	r0, r5, r4
 8001502:	460f      	mov	r7, r1
 8001504:	f7fe ff7e 	bl	8000404 <__aeabi_i2d>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4630      	mov	r0, r6
 800150e:	4639      	mov	r1, r7
 8001510:	f7ff f90c 	bl	800072c <__aeabi_ddiv>
 8001514:	2200      	movs	r2, #0
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_ZL9sigmoidalttt+0x70>)
 8001518:	f007 fa04 	bl	8008924 <pow>
 800151c:	2200      	movs	r2, #0
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <_ZL9sigmoidalttt+0x74>)
 8001520:	f7fe fe24 	bl	800016c <__adddf3>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	2000      	movs	r0, #0
 800152a:	490d      	ldr	r1, [pc, #52]	; (8001560 <_ZL9sigmoidalttt+0x78>)
 800152c:	f7ff f8fe 	bl	800072c <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	2000      	movs	r0, #0
 8001536:	490a      	ldr	r1, [pc, #40]	; (8001560 <_ZL9sigmoidalttt+0x78>)
 8001538:	f7fe fe16 	bl	8000168 <__aeabi_dsub>
 800153c:	f7ff fa7c 	bl	8000a38 <__aeabi_d2uiz>
	return result >= 100 ? 100 : result;
 8001540:	b2c0      	uxtb	r0, r0
}
 8001542:	2864      	cmp	r0, #100	; 0x64
 8001544:	bf28      	it	cs
 8001546:	2064      	movcs	r0, #100	; 0x64
 8001548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w
 8001550:	0624dd2f 	.word	0x0624dd2f
 8001554:	3ffb9581 	.word	0x3ffb9581
 8001558:	40160000 	.word	0x40160000
 800155c:	3ff00000 	.word	0x3ff00000
 8001560:	405a4000 	.word	0x405a4000

08001564 <_Z14show_bat_levelv>:

GButton butt_OK(BUTTON_OK_GPIO_Port, BUTTON_OK_Pin);
GButton butt_RIGHT(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin);
GButton butt_LEFT(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin);

uint8_t show_bat_level (void){
 8001564:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t bat_level;
	WS2812_clear(&SD);
 8001568:	4820      	ldr	r0, [pc, #128]	; (80015ec <_Z14show_bat_levelv+0x88>)
 800156a:	f002 f8b5 	bl	80036d8 <WS2812_clear>
	WS2812_start(&WS2812_ch5, &SD, &htim4, TIM_CHANNEL_2, to_show_massage);
 800156e:	2301      	movs	r3, #1
 8001570:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <_Z14show_bat_levelv+0x8c>)
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	491d      	ldr	r1, [pc, #116]	; (80015ec <_Z14show_bat_levelv+0x88>)
 8001576:	2304      	movs	r3, #4
 8001578:	481e      	ldr	r0, [pc, #120]	; (80015f4 <_Z14show_bat_levelv+0x90>)
 800157a:	f001 ff5f 	bl	800343c <WS2812_start>
	do {
		bat_level = bat.level();
 800157e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001608 <_Z14show_bat_levelv+0xa4>
		for (int i = bat_level/11; i >= 0; i--) {
			if		(i<3)	WS2812_setColor(&SD, i, RED);
			else if (i<7)	WS2812_setColor(&SD, i, YELLOW);
			else			WS2812_setColor(&SD, i, GREEN);
 8001582:	4d1a      	ldr	r5, [pc, #104]	; (80015ec <_Z14show_bat_levelv+0x88>)
			else if (i<7)	WS2812_setColor(&SD, i, YELLOW);
 8001584:	4f1c      	ldr	r7, [pc, #112]	; (80015f8 <_Z14show_bat_levelv+0x94>)
		bat_level = bat.level();
 8001586:	4640      	mov	r0, r8
 8001588:	f7ff fd44 	bl	8001014 <_ZN7Battery5levelEv>
		for (int i = bat_level/11; i >= 0; i--) {
 800158c:	240b      	movs	r4, #11
 800158e:	fbb0 f4f4 	udiv	r4, r0, r4
		bat_level = bat.level();
 8001592:	4606      	mov	r6, r0
		for (int i = bat_level/11; i >= 0; i--) {
 8001594:	b2e4      	uxtb	r4, r4
			if		(i<3)	WS2812_setColor(&SD, i, RED);
 8001596:	2c02      	cmp	r4, #2
 8001598:	dc22      	bgt.n	80015e0 <_Z14show_bat_levelv+0x7c>
 800159a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
			else			WS2812_setColor(&SD, i, GREEN);
 800159e:	4621      	mov	r1, r4
 80015a0:	4628      	mov	r0, r5
 80015a2:	f002 f875 	bl	8003690 <WS2812_setColor>
		for (int i = bat_level/11; i >= 0; i--) {
 80015a6:	f114 34ff 	adds.w	r4, r4, #4294967295
 80015aa:	d2f4      	bcs.n	8001596 <_Z14show_bat_levelv+0x32>
		}
	} while (butt_RIGHT.isHold() || butt_LEFT.isHold());
 80015ac:	4813      	ldr	r0, [pc, #76]	; (80015fc <_Z14show_bat_levelv+0x98>)
 80015ae:	f7ff fe07 	bl	80011c0 <_ZN7GButton6isHoldEv>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d1e7      	bne.n	8001586 <_Z14show_bat_levelv+0x22>
 80015b6:	4812      	ldr	r0, [pc, #72]	; (8001600 <_Z14show_bat_levelv+0x9c>)
 80015b8:	f7ff fe02 	bl	80011c0 <_ZN7GButton6isHoldEv>
 80015bc:	4604      	mov	r4, r0
 80015be:	2800      	cmp	r0, #0
 80015c0:	d1e1      	bne.n	8001586 <_Z14show_bat_levelv+0x22>
	HAL_Delay(2000);
 80015c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015c6:	f002 f901 	bl	80037cc <HAL_Delay>
	WS2812_clear(&SD);
 80015ca:	4808      	ldr	r0, [pc, #32]	; (80015ec <_Z14show_bat_levelv+0x88>)
 80015cc:	f002 f884 	bl	80036d8 <WS2812_clear>
	printf("bat_level: %d\r\n", bat_level);
 80015d0:	4631      	mov	r1, r6
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <_Z14show_bat_levelv+0xa0>)
 80015d4:	f008 fa2c 	bl	8009a30 <iprintf>
	return HAL_OK;
}
 80015d8:	4620      	mov	r0, r4
 80015da:	b002      	add	sp, #8
 80015dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if (i<7)	WS2812_setColor(&SD, i, YELLOW);
 80015e0:	2c06      	cmp	r4, #6
 80015e2:	bfd4      	ite	le
 80015e4:	463a      	movle	r2, r7
			else			WS2812_setColor(&SD, i, GREEN);
 80015e6:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
 80015ea:	e7d8      	b.n	800159e <_Z14show_bat_levelv+0x3a>
 80015ec:	2000023c 	.word	0x2000023c
 80015f0:	20000bec 	.word	0x20000bec
 80015f4:	200008f4 	.word	0x200008f4
 80015f8:	00ff8000 	.word	0x00ff8000
 80015fc:	2000097c 	.word	0x2000097c
 8001600:	20000944 	.word	0x20000944
 8001604:	0800ab28 	.word	0x0800ab28
 8001608:	20000930 	.word	0x20000930

0800160c <_Z16show_file_numberv>:

uint8_t show_file_number(void){
 800160c:	b510      	push	{r4, lr}
	WS2812_clear(&SD);
 800160e:	4c0f      	ldr	r4, [pc, #60]	; (800164c <_Z16show_file_numberv+0x40>)
 8001610:	4620      	mov	r0, r4
 8001612:	f002 f861 	bl	80036d8 <WS2812_clear>
	if (SD.repeate_mode==repeate_off) {
 8001616:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
 800161a:	b943      	cbnz	r3, 800162e <_Z16show_file_numberv+0x22>
		WS2812_setColor(&SD, SD.file_num - 1, BLUE);
 800161c:	22ff      	movs	r2, #255	; 0xff
 800161e:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
	}
	else if (SD.repeate_mode==repeate_one) {
		WS2812_setColor(&SD, SD.file_num - 1, GREEN);
	}
	else if (SD.repeate_mode==repeate_all) {
		WS2812_setColor(&SD, SD.file_num - 1, RED);
 8001622:	3901      	subs	r1, #1
 8001624:	4620      	mov	r0, r4
 8001626:	f002 f833 	bl	8003690 <WS2812_setColor>
	}
	return HAL_OK;
}
 800162a:	2000      	movs	r0, #0
 800162c:	bd10      	pop	{r4, pc}
	else if (SD.repeate_mode==repeate_one) {
 800162e:	2b01      	cmp	r3, #1
 8001630:	d104      	bne.n	800163c <_Z16show_file_numberv+0x30>
		WS2812_setColor(&SD, SD.file_num - 1, GREEN);
 8001632:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
 8001636:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800163a:	e7f2      	b.n	8001622 <_Z16show_file_numberv+0x16>
	else if (SD.repeate_mode==repeate_all) {
 800163c:	2b02      	cmp	r3, #2
 800163e:	d1f4      	bne.n	800162a <_Z16show_file_numberv+0x1e>
		WS2812_setColor(&SD, SD.file_num - 1, RED);
 8001640:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
 8001644:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8001648:	e7eb      	b.n	8001622 <_Z16show_file_numberv+0x16>
 800164a:	bf00      	nop
 800164c:	2000023c 	.word	0x2000023c

08001650 <_Z10show_alarm6COLORS>:

uint8_t show_alarm(COLORS color){
 8001650:	b513      	push	{r0, r1, r4, lr}
	WS2812_fill(&SD, color);
 8001652:	4c07      	ldr	r4, [pc, #28]	; (8001670 <_Z10show_alarm6COLORS+0x20>)
 8001654:	4601      	mov	r1, r0
 8001656:	4620      	mov	r0, r4
 8001658:	f002 f82f 	bl	80036ba <WS2812_fill>
	return WS2812_start(&WS2812_ch5, &SD, &htim4, TIM_CHANNEL_2, to_show_massage);
 800165c:	2301      	movs	r3, #1
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <_Z10show_alarm6COLORS+0x24>)
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	4621      	mov	r1, r4
 8001664:	2304      	movs	r3, #4
 8001666:	4804      	ldr	r0, [pc, #16]	; (8001678 <_Z10show_alarm6COLORS+0x28>)
 8001668:	f001 fee8 	bl	800343c <WS2812_start>
}
 800166c:	b002      	add	sp, #8
 800166e:	bd10      	pop	{r4, pc}
 8001670:	2000023c 	.word	0x2000023c
 8001674:	20000bec 	.word	0x20000bec
 8001678:	200008f4 	.word	0x200008f4

0800167c <_Z4playv>:

uint8_t play (void){
 800167c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_2);

  	if(SD_prepare_file(&SD)==FR_OK){
 800167e:	4d15      	ldr	r5, [pc, #84]	; (80016d4 <_Z4playv+0x58>)
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_2);
 8001680:	2104      	movs	r1, #4
 8001682:	4815      	ldr	r0, [pc, #84]	; (80016d8 <_Z4playv+0x5c>)
 8001684:	f005 f9ee 	bl	8006a64 <HAL_TIM_PWM_Stop_DMA>
  	if(SD_prepare_file(&SD)==FR_OK){
 8001688:	4628      	mov	r0, r5
 800168a:	f001 fe17 	bl	80032bc <SD_prepare_file>
 800168e:	b9b0      	cbnz	r0, 80016be <_Z4playv+0x42>

	  	if (WS2812_start(&WS2812_ch5, &SD, &htim4, TIM_CHANNEL_2, to_play_file) == HAL_OK){
 8001690:	9000      	str	r0, [sp, #0]
 8001692:	2304      	movs	r3, #4
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <_Z4playv+0x5c>)
 8001696:	4629      	mov	r1, r5
 8001698:	4810      	ldr	r0, [pc, #64]	; (80016dc <_Z4playv+0x60>)
 800169a:	f001 fecf 	bl	800343c <WS2812_start>
 800169e:	2601      	movs	r6, #1
 80016a0:	4604      	mov	r4, r0
 80016a2:	b938      	cbnz	r0, 80016b4 <_Z4playv+0x38>
	  		SD.play_flag = 1;
			#ifdef DEBUG_ON
	  		printf("WS2812_start: OK \r\n");
 80016a4:	480e      	ldr	r0, [pc, #56]	; (80016e0 <_Z4playv+0x64>)
	  		SD.play_flag = 1;
 80016a6:	f885 66af 	strb.w	r6, [r5, #1711]	; 0x6af
	  		printf("WS2812_start: OK \r\n");
 80016aa:	f008 fa35 	bl	8009b18 <puts>
	else{
		show_alarm(RED);
		printf("file prepare ERROR: %s\r\n",SD.file_name);
		return HAL_ERROR;
	}
}
 80016ae:	4620      	mov	r0, r4
 80016b0:	b002      	add	sp, #8
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
	  		printf("WS2812_start: ERROR  \r\n");
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <_Z4playv+0x68>)
 80016b6:	f008 fa2f 	bl	8009b18 <puts>
		return HAL_ERROR;
 80016ba:	2401      	movs	r4, #1
 80016bc:	e7f7      	b.n	80016ae <_Z4playv+0x32>
		show_alarm(RED);
 80016be:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80016c2:	f7ff ffc5 	bl	8001650 <_Z10show_alarm6COLORS>
		printf("file prepare ERROR: %s\r\n",SD.file_name);
 80016c6:	f505 7117 	add.w	r1, r5, #604	; 0x25c
 80016ca:	4807      	ldr	r0, [pc, #28]	; (80016e8 <_Z4playv+0x6c>)
 80016cc:	f008 f9b0 	bl	8009a30 <iprintf>
 80016d0:	e7f3      	b.n	80016ba <_Z4playv+0x3e>
 80016d2:	bf00      	nop
 80016d4:	2000023c 	.word	0x2000023c
 80016d8:	20000bec 	.word	0x20000bec
 80016dc:	200008f4 	.word	0x200008f4
 80016e0:	0800ab38 	.word	0x0800ab38
 80016e4:	0800ab4b 	.word	0x0800ab4b
 80016e8:	0800ab62 	.word	0x0800ab62

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	#ifdef DEBUG_ON
	printf("%s\r\n", debug_message);
 80016ee:	4c05      	ldr	r4, [pc, #20]	; (8001704 <Error_Handler+0x18>)
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <Error_Handler+0x1c>)
 80016f2:	4621      	mov	r1, r4
 80016f4:	f008 f99c 	bl	8009a30 <iprintf>
	strcpy (debug_message, "_____________unknown error_____________");
 80016f8:	4620      	mov	r0, r4
	#endif
  /* USER CODE END Error_Handler_Debug */
}
 80016fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy (debug_message, "_____________unknown error_____________");
 80016fe:	4903      	ldr	r1, [pc, #12]	; (800170c <Error_Handler+0x20>)
 8001700:	f008 ba12 	b.w	8009b28 <strcpy>
 8001704:	20000000 	.word	0x20000000
 8001708:	0800ab76 	.word	0x0800ab76
 800170c:	0800ab00 	.word	0x0800ab00

08001710 <_Z18SystemClock_Configv>:
{
 8001710:	b510      	push	{r4, lr}
 8001712:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001714:	2214      	movs	r2, #20
 8001716:	2100      	movs	r1, #0
 8001718:	a80c      	add	r0, sp, #48	; 0x30
 800171a:	f008 f980 	bl	8009a1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171e:	2214      	movs	r2, #20
 8001720:	2100      	movs	r1, #0
 8001722:	eb0d 0002 	add.w	r0, sp, r2
 8001726:	f008 f97a 	bl	8009a1e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172a:	2210      	movs	r2, #16
 800172c:	2100      	movs	r1, #0
 800172e:	a801      	add	r0, sp, #4
 8001730:	f008 f975 	bl	8009a1e <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001734:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173c:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001740:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001744:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800174a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800174c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	f003 f959 	bl	8004a04 <HAL_RCC_OscConfig>
 8001752:	b108      	cbz	r0, 8001758 <_Z18SystemClock_Configv+0x48>
    Error_Handler();
 8001754:	f7ff ffca 	bl	80016ec <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001758:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001762:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001764:	2102      	movs	r1, #2
 8001766:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001768:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176e:	f003 fc1d 	bl	8004fac <HAL_RCC_ClockConfig>
 8001772:	b108      	cbz	r0, 8001778 <_Z18SystemClock_Configv+0x68>
    Error_Handler();
 8001774:	f7ff ffba 	bl	80016ec <Error_Handler>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001778:	2302      	movs	r3, #2
 800177a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800177c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001780:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001782:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001784:	f003 fd42 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>
 8001788:	b108      	cbz	r0, 800178e <_Z18SystemClock_Configv+0x7e>
    Error_Handler();
 800178a:	f7ff ffaf 	bl	80016ec <Error_Handler>
}
 800178e:	b014      	add	sp, #80	; 0x50
 8001790:	bd10      	pop	{r4, pc}
 8001792:	0000      	movs	r0, r0
 8001794:	0000      	movs	r0, r0
	...

08001798 <main>:
{
 8001798:	b583      	push	{r0, r1, r7, lr}
  HAL_Init();
 800179a:	f001 fff3 	bl	8003784 <HAL_Init>
  SystemClock_Config();
 800179e:	f7ff ffb7 	bl	8001710 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80017a2:	f7ff fda1 	bl	80012e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017a6:	f7ff fd75 	bl	8001294 <MX_DMA_Init>
  MX_ADC1_Init();
 80017aa:	f7ff fd15 	bl	80011d8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017ae:	f7ff fe3f 	bl	8001430 <MX_I2C1_Init>
  MX_SPI1_Init();
 80017b2:	f000 fde1 	bl	8002378 <MX_SPI1_Init>
  MX_SPI2_Init();
 80017b6:	f000 fe01 	bl	80023bc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80017ba:	f001 f83b 	bl	8002834 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80017be:	f005 fbcb 	bl	8006f58 <MX_FATFS_Init>
  MX_TIM4_Init();
 80017c2:	f000 ffdf 	bl	8002784 <MX_TIM4_Init>
	HAL_Delay(100);
 80017c6:	2064      	movs	r0, #100	; 0x64
 80017c8:	f002 f800 	bl	80037cc <HAL_Delay>
	bat.begin(3400, 2, sigmoidal);
 80017cc:	4b96      	ldr	r3, [pc, #600]	; (8001a28 <main+0x290>)
 80017ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d2:	f640 5148 	movw	r1, #3400	; 0xd48
 80017d6:	4895      	ldr	r0, [pc, #596]	; (8001a2c <main+0x294>)
 80017d8:	f7ff fbd8 	bl	8000f8c <_ZN7Battery5beginEtfPFhtttE>
	butt_OK.setTickMode(AUTO);
 80017dc:	2101      	movs	r1, #1
 80017de:	4894      	ldr	r0, [pc, #592]	; (8001a30 <main+0x298>)
 80017e0:	f7ff fc4c 	bl	800107c <_ZN7GButton11setTickModeEb>
	butt_LEFT.setTickMode(AUTO);
 80017e4:	2101      	movs	r1, #1
 80017e6:	4893      	ldr	r0, [pc, #588]	; (8001a34 <main+0x29c>)
 80017e8:	f7ff fc48 	bl	800107c <_ZN7GButton11setTickModeEb>
	if (SD_read_settings(&SD)!=FR_OK){
 80017ec:	4c92      	ldr	r4, [pc, #584]	; (8001a38 <main+0x2a0>)
	butt_RIGHT.setTickMode(AUTO);
 80017ee:	2101      	movs	r1, #1
 80017f0:	4892      	ldr	r0, [pc, #584]	; (8001a3c <main+0x2a4>)
 80017f2:	f7ff fc43 	bl	800107c <_ZN7GButton11setTickModeEb>
	butt_OK.setTimeout(3000);//таймаут (мс) удержания кнопки (для остальных по умолчанию он равен 300 мс)
 80017f6:	488e      	ldr	r0, [pc, #568]	; (8001a30 <main+0x298>)
 80017f8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80017fc:	f7ff fc3c 	bl	8001078 <_ZN7GButton10setTimeoutEt>
	if (SD_read_settings(&SD)!=FR_OK){
 8001800:	4620      	mov	r0, r4
 8001802:	f001 fc0b 	bl	800301c <SD_read_settings>
 8001806:	2800      	cmp	r0, #0
 8001808:	f000 80e0 	beq.w	80019cc <main+0x234>
		SD.status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
		show_alarm(RED);
 800180e:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
		SD.status = HAL_ERROR;
 8001812:	f884 3280 	strb.w	r3, [r4, #640]	; 0x280
		show_alarm(RED);
 8001816:	f7ff ff1b 	bl	8001650 <_Z10show_alarm6COLORS>
		HAL_Delay(500);
 800181a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800181e:	f001 ffd5 	bl	80037cc <HAL_Delay>
		printf("SD_read_settings: ERROR \r\n");;
 8001822:	4887      	ldr	r0, [pc, #540]	; (8001a40 <main+0x2a8>)
 8001824:	f008 f978 	bl	8009b18 <puts>
	if (NRF_Init(SD.radio_channel_num, 0xE8E8F0F0E2LL) != HAL_OK){
 8001828:	a37d      	add	r3, pc, #500	; (adr r3, 8001a20 <main+0x288>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f894 027f 	ldrb.w	r0, [r4, #639]	; 0x27f
 8001832:	f000 fc87 	bl	8002144 <NRF_Init>
 8001836:	4d83      	ldr	r5, [pc, #524]	; (8001a44 <main+0x2ac>)
 8001838:	2800      	cmp	r0, #0
 800183a:	f000 80ca 	beq.w	80019d2 <main+0x23a>
		NRF_status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
		show_alarm(YELLOW);
 8001840:	4881      	ldr	r0, [pc, #516]	; (8001a48 <main+0x2b0>)
		NRF_status = HAL_ERROR;
 8001842:	702b      	strb	r3, [r5, #0]
		show_alarm(YELLOW);
 8001844:	f7ff ff04 	bl	8001650 <_Z10show_alarm6COLORS>
		printf("NRF_Init: ERROR \r\n");
 8001848:	4880      	ldr	r0, [pc, #512]	; (8001a4c <main+0x2b4>)
 800184a:	f008 f965 	bl	8009b18 <puts>
	if(SD.status == HAL_OK && NRF_status == HAL_OK){
 800184e:	f894 3280 	ldrb.w	r3, [r4, #640]	; 0x280
 8001852:	b963      	cbnz	r3, 800186e <main+0xd6>
 8001854:	782b      	ldrb	r3, [r5, #0]
 8001856:	b953      	cbnz	r3, 800186e <main+0xd6>
		show_bat_level();						// 2000 мс
 8001858:	f7ff fe84 	bl	8001564 <_Z14show_bat_levelv>
		show_file_number(); HAL_Delay(2000);	// 2000 мс
 800185c:	f7ff fed6 	bl	800160c <_Z16show_file_numberv>
 8001860:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001864:	f001 ffb2 	bl	80037cc <HAL_Delay>
		WS2812_clear(&SD);
 8001868:	4873      	ldr	r0, [pc, #460]	; (8001a38 <main+0x2a0>)
 800186a:	f001 ff35 	bl	80036d8 <WS2812_clear>
	if (butt_OK.isClick() && SD.status == HAL_OK && NRF_status == HAL_OK && SD.play_flag == 0) {
 800186e:	4f70      	ldr	r7, [pc, #448]	; (8001a30 <main+0x298>)
	if (butt_LEFT.isClick() && !SD.play_flag) {
 8001870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001a34 <main+0x29c>
	if (butt_RIGHT.isClick() && !SD.play_flag) {
 8001874:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001a3c <main+0x2a4>
	if (SD.play_flag==1 && SD.update_flag==1) {
 8001878:	f894 36af 	ldrb.w	r3, [r4, #1711]	; 0x6af
 800187c:	2b01      	cmp	r3, #1
 800187e:	d124      	bne.n	80018ca <main+0x132>
 8001880:	f894 66ae 	ldrb.w	r6, [r4, #1710]	; 0x6ae
 8001884:	b2f6      	uxtb	r6, r6
 8001886:	2e01      	cmp	r6, #1
 8001888:	d11f      	bne.n	80018ca <main+0x132>
		SD.result.update = (FRESULT) SD_update_bufer(&SD);
 800188a:	486b      	ldr	r0, [pc, #428]	; (8001a38 <main+0x2a0>)
 800188c:	f001 fd8e 	bl	80033ac <SD_update_bufer>
 8001890:	f884 0292 	strb.w	r0, [r4, #658]	; 0x292
		if (SD.result.update != FR_OK) {
 8001894:	b1b0      	cbz	r0, 80018c4 <main+0x12c>
			WS2812_clear(&SD);//отключение дисплея
 8001896:	4868      	ldr	r0, [pc, #416]	; (8001a38 <main+0x2a0>)
 8001898:	f001 ff1e 	bl	80036d8 <WS2812_clear>
			if (SD.repeate_mode==repeate_off) {
 800189c:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 8098 	bne.w	80019d6 <main+0x23e>
				HAL_Delay(100);
 80018a6:	2064      	movs	r0, #100	; 0x64
				SD.play_flag=0;
 80018a8:	f884 36af 	strb.w	r3, [r4, #1711]	; 0x6af
				HAL_Delay(100);
 80018ac:	f001 ff8e 	bl	80037cc <HAL_Delay>
				WS2812_start(&WS2812_ch5, &SD, &htim4, TIM_CHANNEL_2, to_show_massage);
 80018b0:	9600      	str	r6, [sp, #0]
 80018b2:	2304      	movs	r3, #4
 80018b4:	4a66      	ldr	r2, [pc, #408]	; (8001a50 <main+0x2b8>)
 80018b6:	4960      	ldr	r1, [pc, #384]	; (8001a38 <main+0x2a0>)
 80018b8:	4866      	ldr	r0, [pc, #408]	; (8001a54 <main+0x2bc>)
 80018ba:	f001 fdbf 	bl	800343c <WS2812_start>
				printf("play is stop\r\n");
 80018be:	4866      	ldr	r0, [pc, #408]	; (8001a58 <main+0x2c0>)
 80018c0:	f008 f92a 	bl	8009b18 <puts>
		SD.update_flag=0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f884 36ae 	strb.w	r3, [r4, #1710]	; 0x6ae
	if (butt_OK.isClick() && SD.status == HAL_OK && NRF_status == HAL_OK && SD.play_flag == 0) {
 80018ca:	4638      	mov	r0, r7
 80018cc:	f7ff fc5a 	bl	8001184 <_ZN7GButton7isClickEv>
 80018d0:	b180      	cbz	r0, 80018f4 <main+0x15c>
 80018d2:	f894 3280 	ldrb.w	r3, [r4, #640]	; 0x280
 80018d6:	b96b      	cbnz	r3, 80018f4 <main+0x15c>
 80018d8:	782b      	ldrb	r3, [r5, #0]
 80018da:	b95b      	cbnz	r3, 80018f4 <main+0x15c>
 80018dc:	f894 36af 	ldrb.w	r3, [r4, #1711]	; 0x6af
 80018e0:	b943      	cbnz	r3, 80018f4 <main+0x15c>
		radio_tx_sync ();//duration 50 ms
 80018e2:	f000 fc03 	bl	80020ec <radio_tx_sync>
		play();
 80018e6:	f7ff fec9 	bl	800167c <_Z4playv>
		HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 80018ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ee:	485b      	ldr	r0, [pc, #364]	; (8001a5c <main+0x2c4>)
 80018f0:	f002 ff44 	bl	800477c <HAL_GPIO_TogglePin>
	if (butt_OK.isHolded()) {
 80018f4:	4638      	mov	r0, r7
 80018f6:	f7ff fc54 	bl	80011a2 <_ZN7GButton8isHoldedEv>
 80018fa:	b1c0      	cbz	r0, 800192e <main+0x196>
		SD.play_flag=0;
 80018fc:	2300      	movs	r3, #0
		WS2812_clear(&SD);
 80018fe:	484e      	ldr	r0, [pc, #312]	; (8001a38 <main+0x2a0>)
		SD.play_flag=0;
 8001900:	f884 36af 	strb.w	r3, [r4, #1711]	; 0x6af
		WS2812_clear(&SD);
 8001904:	f001 fee8 	bl	80036d8 <WS2812_clear>
		HAL_Delay(100);
 8001908:	2064      	movs	r0, #100	; 0x64
 800190a:	f001 ff5f 	bl	80037cc <HAL_Delay>
		WS2812_start(&WS2812_ch5, &SD, &htim4, TIM_CHANNEL_2, to_show_massage);
 800190e:	2301      	movs	r3, #1
 8001910:	4949      	ldr	r1, [pc, #292]	; (8001a38 <main+0x2a0>)
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4a4e      	ldr	r2, [pc, #312]	; (8001a50 <main+0x2b8>)
 8001916:	2304      	movs	r3, #4
 8001918:	484e      	ldr	r0, [pc, #312]	; (8001a54 <main+0x2bc>)
 800191a:	f001 fd8f 	bl	800343c <WS2812_start>
		printf("play is stop\r\n");
 800191e:	484e      	ldr	r0, [pc, #312]	; (8001a58 <main+0x2c0>)
 8001920:	f008 f8fa 	bl	8009b18 <puts>
		HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 8001924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001928:	484c      	ldr	r0, [pc, #304]	; (8001a5c <main+0x2c4>)
 800192a:	f002 ff27 	bl	800477c <HAL_GPIO_TogglePin>
	if (butt_LEFT.isClick() && !SD.play_flag) {
 800192e:	4640      	mov	r0, r8
 8001930:	f7ff fc28 	bl	8001184 <_ZN7GButton7isClickEv>
 8001934:	b188      	cbz	r0, 800195a <main+0x1c2>
 8001936:	f894 36af 	ldrb.w	r3, [r4, #1711]	; 0x6af
 800193a:	b973      	cbnz	r3, 800195a <main+0x1c2>
		if (SD_change_file(&SD, -1, 255) == HAL_OK){
 800193c:	22ff      	movs	r2, #255	; 0xff
 800193e:	f04f 31ff 	mov.w	r1, #4294967295
 8001942:	483d      	ldr	r0, [pc, #244]	; (8001a38 <main+0x2a0>)
 8001944:	f001 fc2a 	bl	800319c <SD_change_file>
 8001948:	2800      	cmp	r0, #0
 800194a:	d15e      	bne.n	8001a0a <main+0x272>
			show_file_number();
 800194c:	f7ff fe5e 	bl	800160c <_Z16show_file_numberv>
		HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 8001950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001954:	4841      	ldr	r0, [pc, #260]	; (8001a5c <main+0x2c4>)
 8001956:	f002 ff11 	bl	800477c <HAL_GPIO_TogglePin>
	if (butt_RIGHT.isClick() && !SD.play_flag) {
 800195a:	4648      	mov	r0, r9
 800195c:	f7ff fc12 	bl	8001184 <_ZN7GButton7isClickEv>
 8001960:	b180      	cbz	r0, 8001984 <main+0x1ec>
 8001962:	f894 36af 	ldrb.w	r3, [r4, #1711]	; 0x6af
 8001966:	b96b      	cbnz	r3, 8001984 <main+0x1ec>
		if (SD_change_file(&SD, +1, 255) == HAL_OK){
 8001968:	22ff      	movs	r2, #255	; 0xff
 800196a:	2101      	movs	r1, #1
 800196c:	4832      	ldr	r0, [pc, #200]	; (8001a38 <main+0x2a0>)
 800196e:	f001 fc15 	bl	800319c <SD_change_file>
 8001972:	2800      	cmp	r0, #0
 8001974:	d14e      	bne.n	8001a14 <main+0x27c>
			show_file_number();
 8001976:	f7ff fe49 	bl	800160c <_Z16show_file_numberv>
		HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 800197a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197e:	4837      	ldr	r0, [pc, #220]	; (8001a5c <main+0x2c4>)
 8001980:	f002 fefc 	bl	800477c <HAL_GPIO_TogglePin>
	if (butt_RIGHT.isHolded() | butt_LEFT.isHolded() && SD.play_flag==0) {
 8001984:	4648      	mov	r0, r9
 8001986:	f7ff fc0c 	bl	80011a2 <_ZN7GButton8isHoldedEv>
 800198a:	4606      	mov	r6, r0
 800198c:	4640      	mov	r0, r8
 800198e:	f7ff fc08 	bl	80011a2 <_ZN7GButton8isHoldedEv>
 8001992:	b906      	cbnz	r6, 8001996 <main+0x1fe>
 8001994:	b120      	cbz	r0, 80019a0 <main+0x208>
 8001996:	f894 36af 	ldrb.w	r3, [r4, #1711]	; 0x6af
 800199a:	b90b      	cbnz	r3, 80019a0 <main+0x208>
		show_bat_level();
 800199c:	f7ff fde2 	bl	8001564 <_Z14show_bat_levelv>
	if(NRF_status == HAL_OK && SD.status == HAL_OK && radio_rx_sync () == 1) {//duration 50 ms
 80019a0:	782b      	ldrb	r3, [r5, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f47f af68 	bne.w	8001878 <main+0xe0>
 80019a8:	f894 3280 	ldrb.w	r3, [r4, #640]	; 0x280
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f af63 	bne.w	8001878 <main+0xe0>
 80019b2:	f000 fbb3 	bl	800211c <radio_rx_sync>
 80019b6:	2800      	cmp	r0, #0
 80019b8:	f43f af5e 	beq.w	8001878 <main+0xe0>
		play();
 80019bc:	f7ff fe5e 	bl	800167c <_Z4playv>
		HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 80019c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c4:	4825      	ldr	r0, [pc, #148]	; (8001a5c <main+0x2c4>)
 80019c6:	f002 fed9 	bl	800477c <HAL_GPIO_TogglePin>
 80019ca:	e755      	b.n	8001878 <main+0xe0>
	else SD.status = HAL_OK;
 80019cc:	f884 0280 	strb.w	r0, [r4, #640]	; 0x280
 80019d0:	e72a      	b.n	8001828 <main+0x90>
	else NRF_status = HAL_OK;
 80019d2:	7028      	strb	r0, [r5, #0]
 80019d4:	e73b      	b.n	800184e <main+0xb6>
			else if (SD.repeate_mode==repeate_one) {
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d108      	bne.n	80019ec <main+0x254>
				play();//play old file again
 80019da:	f7ff fe4f 	bl	800167c <_Z4playv>
				printf("repeat old file %d\r\n", (int) HAL_GetTick());
 80019de:	f001 feef 	bl	80037c0 <HAL_GetTick>
 80019e2:	4601      	mov	r1, r0
 80019e4:	481e      	ldr	r0, [pc, #120]	; (8001a60 <main+0x2c8>)
				printf("repeat new file %d\r\n", (int) HAL_GetTick());
 80019e6:	f008 f823 	bl	8009a30 <iprintf>
 80019ea:	e76b      	b.n	80018c4 <main+0x12c>
			else if (SD.repeate_mode==repeate_all) {
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f47f af69 	bne.w	80018c4 <main+0x12c>
				SD_change_file(&SD, +1, 255);
 80019f2:	4631      	mov	r1, r6
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	4810      	ldr	r0, [pc, #64]	; (8001a38 <main+0x2a0>)
 80019f8:	f001 fbd0 	bl	800319c <SD_change_file>
				play();//play new file again
 80019fc:	f7ff fe3e 	bl	800167c <_Z4playv>
				printf("repeat new file %d\r\n", (int) HAL_GetTick());
 8001a00:	f001 fede 	bl	80037c0 <HAL_GetTick>
 8001a04:	4601      	mov	r1, r0
 8001a06:	4817      	ldr	r0, [pc, #92]	; (8001a64 <main+0x2cc>)
 8001a08:	e7ed      	b.n	80019e6 <main+0x24e>
			show_alarm(RED);
 8001a0a:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8001a0e:	f7ff fe1f 	bl	8001650 <_Z10show_alarm6COLORS>
 8001a12:	e79d      	b.n	8001950 <main+0x1b8>
			show_alarm(RED);
 8001a14:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8001a18:	f7ff fe1a 	bl	8001650 <_Z10show_alarm6COLORS>
 8001a1c:	e7ad      	b.n	800197a <main+0x1e2>
 8001a1e:	bf00      	nop
 8001a20:	e8f0f0e2 	.word	0xe8f0f0e2
 8001a24:	000000e8 	.word	0x000000e8
 8001a28:	080014e9 	.word	0x080014e9
 8001a2c:	20000930 	.word	0x20000930
 8001a30:	20000960 	.word	0x20000960
 8001a34:	20000944 	.word	0x20000944
 8001a38:	2000023c 	.word	0x2000023c
 8001a3c:	2000097c 	.word	0x2000097c
 8001a40:	0800ab7b 	.word	0x0800ab7b
 8001a44:	20000238 	.word	0x20000238
 8001a48:	00ff8000 	.word	0x00ff8000
 8001a4c:	0800ab95 	.word	0x0800ab95
 8001a50:	20000bec 	.word	0x20000bec
 8001a54:	200008f4 	.word	0x200008f4
 8001a58:	0800aba7 	.word	0x0800aba7
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	0800abb5 	.word	0x0800abb5
 8001a64:	0800abca 	.word	0x0800abca

08001a68 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001a68:	4770      	bx	lr
	...

08001a6c <_GLOBAL__sub_I_debug_message>:
 8001a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
GButton butt_OK(BUTTON_OK_GPIO_Port, BUTTON_OK_Pin);
 8001a6e:	2400      	movs	r4, #0
 8001a70:	4d10      	ldr	r5, [pc, #64]	; (8001ab4 <_GLOBAL__sub_I_debug_message+0x48>)
Battery bat(2800, 4200);
 8001a72:	f241 0268 	movw	r2, #4200	; 0x1068
 8001a76:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8001a7a:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <_GLOBAL__sub_I_debug_message+0x4c>)
 8001a7c:	f7ff fa82 	bl	8000f84 <_ZN7BatteryC1Ett>
GButton butt_OK(BUTTON_OK_GPIO_Port, BUTTON_OK_Pin);
 8001a80:	4623      	mov	r3, r4
 8001a82:	4629      	mov	r1, r5
 8001a84:	9400      	str	r4, [sp, #0]
 8001a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <_GLOBAL__sub_I_debug_message+0x50>)
 8001a8c:	f7ff facc 	bl	8001028 <_ZN7GButtonC1EP12GPIO_TypeDeflbb>
GButton butt_RIGHT(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin);
 8001a90:	4623      	mov	r3, r4
 8001a92:	4629      	mov	r1, r5
 8001a94:	9400      	str	r4, [sp, #0]
 8001a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a9a:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <_GLOBAL__sub_I_debug_message+0x54>)
 8001a9c:	f7ff fac4 	bl	8001028 <_ZN7GButtonC1EP12GPIO_TypeDeflbb>
GButton butt_LEFT(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin);
 8001aa0:	9400      	str	r4, [sp, #0]
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <_GLOBAL__sub_I_debug_message+0x58>)
 8001aaa:	f7ff fabd 	bl	8001028 <_ZN7GButtonC1EP12GPIO_TypeDeflbb>
}
 8001aae:	b003      	add	sp, #12
 8001ab0:	bd30      	pop	{r4, r5, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40010c00 	.word	0x40010c00
 8001ab8:	20000930 	.word	0x20000930
 8001abc:	20000960 	.word	0x20000960
 8001ac0:	2000097c 	.word	0x2000097c
 8001ac4:	20000944 	.word	0x20000944

08001ac8 <DWT_Init>:
uint8_t txDelay = 0;


void DWT_Init(void)
{
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001ac8:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <DWT_Init+0x18>)
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad0:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001ad2:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <DWT_Init+0x1c>)
 8001ad4:	6813      	ldr	r3, [r2, #0]
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000edfc 	.word	0xe000edfc
 8001ae4:	e0001000 	.word	0xe0001000

08001ae8 <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <delay_us+0x20>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <delay_us+0x24>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9b      	lsrs	r3, r3, #18
 8001af4:	fb00 f003 	mul.w	r0, r0, r3
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <delay_us+0x28>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8001afe:	461a      	mov	r2, r3
 8001b00:	6853      	ldr	r3, [r2, #4]
 8001b02:	4283      	cmp	r3, r0
 8001b04:	d3fc      	bcc.n	8001b00 <delay_us+0x18>
}
 8001b06:	4770      	bx	lr
 8001b08:	20000028 	.word	0x20000028
 8001b0c:	431bde83 	.word	0x431bde83
 8001b10:	e0001000 	.word	0xe0001000

08001b14 <csn>:

void csn(uint8_t level)
{
 8001b14:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 8001b16:	4602      	mov	r2, r0
 8001b18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <csn+0x18>)
 8001b1e:	f002 fe11 	bl	8004744 <HAL_GPIO_WritePin>
	delay_us(5);
 8001b22:	2005      	movs	r0, #5
 8001b24:	f7ff ffe0 	bl	8001ae8 <delay_us>
}
 8001b28:	bd08      	pop	{r3, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40010c00 	.word	0x40010c00

08001b30 <ce>:

void ce(uint8_t level)
{
 8001b30:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 8001b32:	4602      	mov	r2, r0
 8001b34:	2120      	movs	r1, #32
 8001b36:	4802      	ldr	r0, [pc, #8]	; (8001b40 <ce+0x10>)
 8001b38:	f002 fe04 	bl	8004744 <HAL_GPIO_WritePin>
}
 8001b3c:	bd08      	pop	{r3, pc}
 8001b3e:	bf00      	nop
 8001b40:	40010c00 	.word	0x40010c00

08001b44 <read_register>:

uint8_t read_register(uint8_t reg)
{
 8001b44:	b570      	push	{r4, r5, r6, lr}
 8001b46:	b084      	sub	sp, #16
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8001b48:	f000 001f 	and.w	r0, r0, #31
 8001b4c:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t dt = 0;
 8001b50:	2000      	movs	r0, #0
 8001b52:	ac04      	add	r4, sp, #16
 8001b54:	f804 0d02 	strb.w	r0, [r4, #-2]!

	csn(LOW);
 8001b58:	f7ff ffdc 	bl	8001b14 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 8001b5c:	4d0c      	ldr	r5, [pc, #48]	; (8001b90 <read_register+0x4c>)
 8001b5e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001b62:	9600      	str	r6, [sp, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	4622      	mov	r2, r4
 8001b68:	f10d 010f 	add.w	r1, sp, #15
 8001b6c:	4628      	mov	r0, r5
 8001b6e:	f003 febb 	bl	80058e8 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)0xff, &dt, 1, 1000);
 8001b72:	9600      	str	r6, [sp, #0]
 8001b74:	2301      	movs	r3, #1
 8001b76:	4622      	mov	r2, r4
 8001b78:	21ff      	movs	r1, #255	; 0xff
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f003 feb4 	bl	80058e8 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff ffc7 	bl	8001b14 <csn>
	return dt;
}
 8001b86:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bd70      	pop	{r4, r5, r6, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000a70 	.word	0x20000a70

08001b94 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	b085      	sub	sp, #20
 8001b98:	460e      	mov	r6, r1
 8001b9a:	4617      	mov	r7, r2
	uint8_t status = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8001ba2:	f000 001f 	and.w	r0, r0, #31
 8001ba6:	f040 0020 	orr.w	r0, r0, #32
 8001baa:	f88d 000e 	strb.w	r0, [sp, #14]

	csn(LOW);
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ffb0 	bl	8001b14 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &addr, &status, 1, 100);
 8001bb4:	4c0b      	ldr	r4, [pc, #44]	; (8001be4 <write_registerMy+0x50>)
 8001bb6:	2564      	movs	r5, #100	; 0x64
 8001bb8:	9500      	str	r5, [sp, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f10d 020f 	add.w	r2, sp, #15
 8001bc0:	f10d 010e 	add.w	r1, sp, #14
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f003 fe8f 	bl	80058e8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)buf, len, 100);
 8001bca:	462b      	mov	r3, r5
 8001bcc:	463a      	mov	r2, r7
 8001bce:	4631      	mov	r1, r6
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f003 fdb1 	bl	8005738 <HAL_SPI_Transmit>
	csn(HIGH);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7ff ff9c 	bl	8001b14 <csn>
	return status;
}
 8001bdc:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001be0:	b005      	add	sp, #20
 8001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be4:	20000a70 	.word	0x20000a70

08001be8 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 8001be8:	b510      	push	{r4, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	f88d 100f 	strb.w	r1, [sp, #15]
	uint8_t status = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8001bf6:	f000 001f 	and.w	r0, r0, #31
 8001bfa:	f040 0020 	orr.w	r0, r0, #32
 8001bfe:	f88d 0016 	strb.w	r0, [sp, #22]
	csn(LOW);
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff86 	bl	8001b14 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &addr, &status, 1, 100);
 8001c08:	4c0c      	ldr	r4, [pc, #48]	; (8001c3c <write_register+0x54>)
 8001c0a:	2364      	movs	r3, #100	; 0x64
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f10d 0217 	add.w	r2, sp, #23
 8001c14:	f10d 0116 	add.w	r1, sp, #22
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f003 fe65 	bl	80058e8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	2201      	movs	r2, #1
 8001c24:	f10d 010f 	add.w	r1, sp, #15
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f003 fd85 	bl	8005738 <HAL_SPI_Transmit>
	csn(HIGH);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7ff ff70 	bl	8001b14 <csn>
	return status;
}
 8001c34:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001c38:	b006      	add	sp, #24
 8001c3a:	bd10      	pop	{r4, pc}
 8001c3c:	20000a70 	.word	0x20000a70

08001c40 <write_payload>:

uint8_t write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
 8001c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	4606      	mov	r6, r0
	uint8_t status = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f88d 300f 	strb.w	r3, [sp, #15]
	const uint8_t* current = (const uint8_t*)buf;
	uint8_t addr = writeType;
 8001c4e:	f88d 200e 	strb.w	r2, [sp, #14]

	data_len = rf24_min(data_len, payload_size);
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <write_payload+0xb4>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461c      	mov	r4, r3
 8001c58:	428b      	cmp	r3, r1
 8001c5a:	bf28      	it	cs
 8001c5c:	460c      	movcs	r4, r1
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8001c5e:	4a26      	ldr	r2, [pc, #152]	; (8001cf8 <write_payload+0xb8>)
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	bb8a      	cbnz	r2, 8001cc8 <write_payload+0x88>
 8001c64:	1b1b      	subs	r3, r3, r4
 8001c66:	b2dd      	uxtb	r5, r3

	csn(LOW);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff ff53 	bl	8001b14 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &addr, &status, 1, 100);
 8001c6e:	4f23      	ldr	r7, [pc, #140]	; (8001cfc <write_payload+0xbc>)
 8001c70:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001c74:	f8cd 8000 	str.w	r8, [sp]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f10d 020f 	add.w	r2, sp, #15
 8001c7e:	f10d 010e 	add.w	r1, sp, #14
 8001c82:	4638      	mov	r0, r7
 8001c84:	f003 fe30 	bl	80058e8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)current, data_len, 100);
 8001c88:	4643      	mov	r3, r8
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	4631      	mov	r1, r6
 8001c8e:	4638      	mov	r0, r7
 8001c90:	f003 fd52 	bl	8005738 <HAL_SPI_Transmit>

	while(blank_len--)
 8001c94:	1e6c      	subs	r4, r5, #1
 8001c96:	b2e4      	uxtb	r4, r4
 8001c98:	b175      	cbz	r5, 8001cb8 <write_payload+0x78>
	{
		uint8_t empt = 0;
 8001c9a:	2600      	movs	r6, #0
		HAL_SPI_Transmit(&hspi2, &empt, 1, 100);
 8001c9c:	463d      	mov	r5, r7
		uint8_t empt = 0;
 8001c9e:	f88d 600d 	strb.w	r6, [sp, #13]
		HAL_SPI_Transmit(&hspi2, &empt, 1, 100);
 8001ca2:	2364      	movs	r3, #100	; 0x64
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f10d 010d 	add.w	r1, sp, #13
 8001caa:	4628      	mov	r0, r5
 8001cac:	f003 fd44 	bl	8005738 <HAL_SPI_Transmit>
	while(blank_len--)
 8001cb0:	3c01      	subs	r4, #1
 8001cb2:	b2e4      	uxtb	r4, r4
 8001cb4:	2cff      	cmp	r4, #255	; 0xff
 8001cb6:	d1f2      	bne.n	8001c9e <write_payload+0x5e>
	}

	csn(HIGH);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff ff2b 	bl	8001b14 <csn>
	return status;
 8001cbe:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 8001cc2:	b004      	add	sp, #16
 8001cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	csn(LOW);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff ff23 	bl	8001b14 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &addr, &status, 1, 100);
 8001cce:	4d0b      	ldr	r5, [pc, #44]	; (8001cfc <write_payload+0xbc>)
 8001cd0:	2764      	movs	r7, #100	; 0x64
 8001cd2:	9700      	str	r7, [sp, #0]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f10d 020f 	add.w	r2, sp, #15
 8001cda:	f10d 010e 	add.w	r1, sp, #14
 8001cde:	4628      	mov	r0, r5
 8001ce0:	f003 fe02 	bl	80058e8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)current, data_len, 100);
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	4631      	mov	r1, r6
 8001cea:	4628      	mov	r0, r5
 8001cec:	f003 fd24 	bl	8005738 <HAL_SPI_Transmit>
 8001cf0:	e7e2      	b.n	8001cb8 <write_payload+0x78>
 8001cf2:	bf00      	nop
 8001cf4:	2000099d 	.word	0x2000099d
 8001cf8:	20000a6c 	.word	0x20000a6c
 8001cfc:	20000a70 	.word	0x20000a70

08001d00 <spiTrans>:
{
	return spiTrans(FLUSH_TX);
}

uint8_t spiTrans(uint8_t cmd)
{
 8001d00:	b510      	push	{r4, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t status = 0;
 8001d08:	2000      	movs	r0, #0
 8001d0a:	ac06      	add	r4, sp, #24
 8001d0c:	f804 0d01 	strb.w	r0, [r4, #-1]!
	csn(LOW);
 8001d10:	f7ff ff00 	bl	8001b14 <csn>
	HAL_SPI_TransmitReceive(&hspi2, &cmd, &status, 1, 1000);
 8001d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	f10d 010f 	add.w	r1, sp, #15
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <spiTrans+0x38>)
 8001d24:	f003 fde0 	bl	80058e8 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff fef3 	bl	8001b14 <csn>
	return status;
}
 8001d2e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001d32:	b006      	add	sp, #24
 8001d34:	bd10      	pop	{r4, pc}
 8001d36:	bf00      	nop
 8001d38:	20000a70 	.word	0x20000a70

08001d3c <flush_rx>:
{
 8001d3c:	b508      	push	{r3, lr}
	return spiTrans(FLUSH_RX);
 8001d3e:	20e2      	movs	r0, #226	; 0xe2
 8001d40:	f7ff ffde 	bl	8001d00 <spiTrans>
}
 8001d44:	bd08      	pop	{r3, pc}

08001d46 <flush_tx>:
{
 8001d46:	b508      	push	{r3, lr}
	return spiTrans(FLUSH_TX);
 8001d48:	20e1      	movs	r0, #225	; 0xe1
 8001d4a:	f7ff ffd9 	bl	8001d00 <spiTrans>
}
 8001d4e:	bd08      	pop	{r3, pc}

08001d50 <get_status>:

uint8_t get_status(void)
{
 8001d50:	b508      	push	{r3, lr}
	return spiTrans(NOP);
 8001d52:	20ff      	movs	r0, #255	; 0xff
 8001d54:	f7ff ffd4 	bl	8001d00 <spiTrans>
}
 8001d58:	bd08      	pop	{r3, pc}

08001d5a <setChannel>:

void setChannel(uint8_t channel)
{
 8001d5a:	b508      	push	{r3, lr}
	write_register(RF_CH, channel);
 8001d5c:	4601      	mov	r1, r0
 8001d5e:	2005      	movs	r0, #5
 8001d60:	f7ff ff42 	bl	8001be8 <write_register>
}
 8001d64:	bd08      	pop	{r3, pc}

08001d66 <getChannel>:

uint8_t getChannel()
{
 8001d66:	b508      	push	{r3, lr}
	return read_register(RF_CH);
 8001d68:	2005      	movs	r0, #5
 8001d6a:	f7ff feeb 	bl	8001b44 <read_register>
}
 8001d6e:	bd08      	pop	{r3, pc}

08001d70 <stopListening>:


static const uint8_t child_pipe_enable[] = {ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5};

void stopListening(void)
{
 8001d70:	b508      	push	{r3, lr}
	ce(LOW);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fedc 	bl	8001b30 <ce>
	delay_us(txDelay);
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <stopListening+0x50>)
 8001d7a:	7818      	ldrb	r0, [r3, #0]
 8001d7c:	f7ff feb4 	bl	8001ae8 <delay_us>

	if(read_register(FEATURE) & (1 << EN_ACK_PAY))
 8001d80:	201d      	movs	r0, #29
 8001d82:	f7ff fedf 	bl	8001b44 <read_register>
 8001d86:	f010 0f02 	tst.w	r0, #2
 8001d8a:	d111      	bne.n	8001db0 <stopListening+0x40>
	{
		delay_us(txDelay); //200
		flush_tx();
	}

	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fed9 	bl	8001b44 <read_register>
 8001d92:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff ff26 	bl	8001be8 <write_register>
	write_register(EN_RXADDR, read_register(EN_RXADDR) | (1 << child_pipe_enable[0])); // Enable RX on pipe0
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f7ff fed1 	bl	8001b44 <read_register>
 8001da2:	f040 0101 	orr.w	r1, r0, #1
 8001da6:	b2c9      	uxtb	r1, r1
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff ff1d 	bl	8001be8 <write_register>
}
 8001dae:	bd08      	pop	{r3, pc}
		delay_us(txDelay); //200
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <stopListening+0x50>)
 8001db2:	7818      	ldrb	r0, [r3, #0]
 8001db4:	f7ff fe98 	bl	8001ae8 <delay_us>
		flush_tx();
 8001db8:	f7ff ffc5 	bl	8001d46 <flush_tx>
 8001dbc:	e7e6      	b.n	8001d8c <stopListening+0x1c>
 8001dbe:	bf00      	nop
 8001dc0:	200009a5 	.word	0x200009a5

08001dc4 <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 8001dc4:	b508      	push	{r3, lr}
	uint8_t cfg = read_register(NRF_CONFIG);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff febc 	bl	8001b44 <read_register>
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 8001dcc:	f010 0f02 	tst.w	r0, #2
 8001dd0:	d000      	beq.n	8001dd4 <powerUp+0x10>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
		HAL_Delay(5);
	}
}
 8001dd2:	bd08      	pop	{r3, pc}
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 8001dd4:	f040 0102 	orr.w	r1, r0, #2
 8001dd8:	b2c9      	uxtb	r1, r1
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff ff04 	bl	8001be8 <write_register>
		HAL_Delay(5);
 8001de0:	2005      	movs	r0, #5
 8001de2:	f001 fcf3 	bl	80037cc <HAL_Delay>
}
 8001de6:	e7f4      	b.n	8001dd2 <powerUp+0xe>

08001de8 <startFastWrite>:
	//TX OK 1 or 0
	return 1;
}

void startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{
 8001de8:	b510      	push	{r4, lr}
 8001dea:	461c      	mov	r4, r3
	write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
 8001dec:	2a00      	cmp	r2, #0
 8001dee:	bf14      	ite	ne
 8001df0:	22b0      	movne	r2, #176	; 0xb0
 8001df2:	22a0      	moveq	r2, #160	; 0xa0
 8001df4:	f7ff ff24 	bl	8001c40 <write_payload>

	if(startTx)
 8001df8:	b904      	cbnz	r4, 8001dfc <startFastWrite+0x14>
	{
		ce(HIGH);
	}
}
 8001dfa:	bd10      	pop	{r4, pc}
		ce(HIGH);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff fe97 	bl	8001b30 <ce>
}
 8001e02:	e7fa      	b.n	8001dfa <startFastWrite+0x12>

08001e04 <write>:
{
 8001e04:	b508      	push	{r3, lr}
	startFastWrite(buf, len, 1, 1);
 8001e06:	2301      	movs	r3, #1
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f7ff ffed 	bl	8001de8 <startFastWrite>
	while(!(get_status() & ((1 << TX_DS) | (1 << MAX_RT))))
 8001e0e:	f7ff ff9f 	bl	8001d50 <get_status>
 8001e12:	f010 0f30 	tst.w	r0, #48	; 0x30
 8001e16:	d0fa      	beq.n	8001e0e <write+0xa>
	ce(LOW);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff fe89 	bl	8001b30 <ce>
	uint8_t status = write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001e1e:	2170      	movs	r1, #112	; 0x70
 8001e20:	2007      	movs	r0, #7
 8001e22:	f7ff fee1 	bl	8001be8 <write_register>
	if(status & (1 << MAX_RT))
 8001e26:	f010 0f10 	tst.w	r0, #16
 8001e2a:	d101      	bne.n	8001e30 <write+0x2c>
	return 1;
 8001e2c:	2001      	movs	r0, #1
}
 8001e2e:	bd08      	pop	{r3, pc}
		flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
 8001e30:	f7ff ff89 	bl	8001d46 <flush_tx>
		return 0;
 8001e34:	2000      	movs	r0, #0
 8001e36:	e7fa      	b.n	8001e2e <write+0x2a>

08001e38 <maskIRQ>:

void maskIRQ(bool tx, bool fail, bool rx)
{
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	4606      	mov	r6, r0
 8001e3c:	460d      	mov	r5, r1
 8001e3e:	4614      	mov	r4, r2
	uint8_t config = read_register(NRF_CONFIG);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7ff fe7f 	bl	8001b44 <read_register>
	config &= ~(1 << MASK_MAX_RT | 1 << MASK_TX_DS | 1 << MASK_RX_DR); //clear the interrupt flags
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
 8001e46:	01a1      	lsls	r1, r4, #6
 8001e48:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
 8001e4c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
	config &= ~(1 << MASK_MAX_RT | 1 << MASK_TX_DS | 1 << MASK_RX_DR); //clear the interrupt flags
 8001e50:	f020 0070 	bic.w	r0, r0, #112	; 0x70
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
 8001e54:	4301      	orrs	r1, r0
	write_register(NRF_CONFIG, config);
 8001e56:	b2c9      	uxtb	r1, r1
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fec5 	bl	8001be8 <write_register>
}
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}

08001e60 <openWritingPipe>:
	uint8_t rx_ready = status & (1 << RX_DR);*/
	return status;
}

void openWritingPipe(uint64_t value)
{
 8001e60:	b530      	push	{r4, r5, lr}
 8001e62:	b083      	sub	sp, #12
 8001e64:	ac02      	add	r4, sp, #8
 8001e66:	e964 0102 	strd	r0, r1, [r4, #-8]!
	write_registerMy(RX_ADDR_P0, (uint8_t*)&value, addr_width);
 8001e6a:	4d09      	ldr	r5, [pc, #36]	; (8001e90 <openWritingPipe+0x30>)
 8001e6c:	782a      	ldrb	r2, [r5, #0]
 8001e6e:	4621      	mov	r1, r4
 8001e70:	200a      	movs	r0, #10
 8001e72:	f7ff fe8f 	bl	8001b94 <write_registerMy>
	write_registerMy(TX_ADDR, (uint8_t*)&value, addr_width);
 8001e76:	782a      	ldrb	r2, [r5, #0]
 8001e78:	4621      	mov	r1, r4
 8001e7a:	2010      	movs	r0, #16
 8001e7c:	f7ff fe8a 	bl	8001b94 <write_registerMy>
	write_register(RX_PW_P0, payload_size);
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <openWritingPipe+0x34>)
 8001e82:	7819      	ldrb	r1, [r3, #0]
 8001e84:	2011      	movs	r0, #17
 8001e86:	f7ff feaf 	bl	8001be8 <write_register>
}
 8001e8a:	b003      	add	sp, #12
 8001e8c:	bd30      	pop	{r4, r5, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000099c 	.word	0x2000099c
 8001e94:	2000099d 	.word	0x2000099d

08001e98 <openReadingPipe>:

static const uint8_t child_payload_size[] = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};


void openReadingPipe(uint8_t child, uint64_t address)
{
 8001e98:	b510      	push	{r4, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	e9cd 2300 	strd	r2, r3, [sp]
	if(child == 0)
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	b1e8      	cbz	r0, 8001ee0 <openReadingPipe+0x48>
	{
		memcpy(pipe0_reading_address, &address, addr_width);
	}

	if(child <= 6)
 8001ea4:	2806      	cmp	r0, #6
 8001ea6:	d819      	bhi.n	8001edc <openReadingPipe+0x44>
	{
		// For pipes 2-5, only write the LSB
		if(child < 2)
 8001ea8:	2801      	cmp	r0, #1
 8001eaa:	d91f      	bls.n	8001eec <openReadingPipe+0x54>
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, addr_width);
		else
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, 1);
 8001eac:	2201      	movs	r2, #1
 8001eae:	4669      	mov	r1, sp
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <openReadingPipe+0x64>)
 8001eb2:	5c18      	ldrb	r0, [r3, r0]
 8001eb4:	f7ff fe6e 	bl	8001b94 <write_registerMy>

		write_register(child_payload_size[child], payload_size);
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <openReadingPipe+0x68>)
 8001eba:	7819      	ldrb	r1, [r3, #0]
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <openReadingPipe+0x6c>)
 8001ebe:	5d18      	ldrb	r0, [r3, r4]
 8001ec0:	f7ff fe92 	bl	8001be8 <write_register>
		write_register(EN_RXADDR, read_register(EN_RXADDR) | (1 << child_pipe_enable[child]));
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7ff fe3d 	bl	8001b44 <read_register>
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <openReadingPipe+0x70>)
 8001ecc:	5d1b      	ldrb	r3, [r3, r4]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4099      	lsls	r1, r3
 8001ed2:	4301      	orrs	r1, r0
 8001ed4:	b2c9      	uxtb	r1, r1
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	f7ff fe86 	bl	8001be8 <write_register>
	}
}
 8001edc:	b002      	add	sp, #8
 8001ede:	bd10      	pop	{r4, pc}
		memcpy(pipe0_reading_address, &address, addr_width);
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <openReadingPipe+0x74>)
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	4669      	mov	r1, sp
 8001ee6:	480a      	ldr	r0, [pc, #40]	; (8001f10 <openReadingPipe+0x78>)
 8001ee8:	f007 fd8e 	bl	8009a08 <memcpy>
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, addr_width);
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <openReadingPipe+0x74>)
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	4669      	mov	r1, sp
 8001ef2:	4b02      	ldr	r3, [pc, #8]	; (8001efc <openReadingPipe+0x64>)
 8001ef4:	5d18      	ldrb	r0, [r3, r4]
 8001ef6:	f7ff fe4d 	bl	8001b94 <write_registerMy>
 8001efa:	e7dd      	b.n	8001eb8 <openReadingPipe+0x20>
 8001efc:	0800acc4 	.word	0x0800acc4
 8001f00:	2000099d 	.word	0x2000099d
 8001f04:	0800acbc 	.word	0x0800acbc
 8001f08:	0800accc 	.word	0x0800accc
 8001f0c:	2000099c 	.word	0x2000099c
 8001f10:	200009a0 	.word	0x200009a0

08001f14 <closeReadingPipe>:
        addr_width = 2;
    }
}

void closeReadingPipe(uint8_t pipe)
{
 8001f14:	b510      	push	{r4, lr}
 8001f16:	4604      	mov	r4, r0
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7ff fe13 	bl	8001b44 <read_register>
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <closeReadingPipe+0x20>)
 8001f20:	5d1b      	ldrb	r3, [r3, r4]
 8001f22:	2101      	movs	r1, #1
 8001f24:	4099      	lsls	r1, r3
 8001f26:	ea20 0101 	bic.w	r1, r0, r1
 8001f2a:	b2c9      	uxtb	r1, r1
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	f7ff fe5b 	bl	8001be8 <write_register>
}
 8001f32:	bd10      	pop	{r4, pc}
 8001f34:	0800accc 	.word	0x0800accc

08001f38 <startListening>:
{
 8001f38:	b508      	push	{r3, lr}
	powerUp();
 8001f3a:	f7ff ff43 	bl	8001dc4 <powerUp>
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | (1 << PRIM_RX));
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff fe00 	bl	8001b44 <read_register>
 8001f44:	f040 0101 	orr.w	r1, r0, #1
 8001f48:	b2c9      	uxtb	r1, r1
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff fe4c 	bl	8001be8 <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001f50:	2170      	movs	r1, #112	; 0x70
 8001f52:	2007      	movs	r0, #7
 8001f54:	f7ff fe48 	bl	8001be8 <write_register>
	ce(HIGH);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f7ff fde9 	bl	8001b30 <ce>
	if(pipe0_reading_address[0] > 0)
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <startListening+0x54>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b163      	cbz	r3, 8001f7e <startListening+0x46>
		write_registerMy(RX_ADDR_P0, pipe0_reading_address, addr_width);
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <startListening+0x58>)
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	4908      	ldr	r1, [pc, #32]	; (8001f8c <startListening+0x54>)
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	f7ff fe12 	bl	8001b94 <write_registerMy>
	if(read_register(FEATURE) & (1 << EN_ACK_PAY))
 8001f70:	201d      	movs	r0, #29
 8001f72:	f7ff fde7 	bl	8001b44 <read_register>
 8001f76:	f010 0f02 	tst.w	r0, #2
 8001f7a:	d104      	bne.n	8001f86 <startListening+0x4e>
}
 8001f7c:	bd08      	pop	{r3, pc}
		closeReadingPipe(0);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff ffc8 	bl	8001f14 <closeReadingPipe>
 8001f84:	e7f4      	b.n	8001f70 <startListening+0x38>
		flush_tx();
 8001f86:	f7ff fede 	bl	8001d46 <flush_tx>
}
 8001f8a:	e7f7      	b.n	8001f7c <startListening+0x44>
 8001f8c:	200009a0 	.word	0x200009a0
 8001f90:	2000099c 	.word	0x2000099c

08001f94 <toggle_features>:

void toggle_features(void)
{
 8001f94:	b530      	push	{r4, r5, lr}
 8001f96:	b083      	sub	sp, #12
	uint8_t addr = ACTIVATE;
 8001f98:	ac02      	add	r4, sp, #8
 8001f9a:	2350      	movs	r3, #80	; 0x50
 8001f9c:	f804 3d01 	strb.w	r3, [r4, #-1]!
	csn(LOW);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff fdb7 	bl	8001b14 <csn>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 1000);
 8001fa6:	4d0a      	ldr	r5, [pc, #40]	; (8001fd0 <toggle_features+0x3c>)
 8001fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fac:	2201      	movs	r2, #1
 8001fae:	4621      	mov	r1, r4
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f003 fbc1 	bl	8005738 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)0x73, 1, 1000);
 8001fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2173      	movs	r1, #115	; 0x73
 8001fbe:	4628      	mov	r0, r5
 8001fc0:	f003 fbba 	bl	8005738 <HAL_SPI_Transmit>
	csn(HIGH);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7ff fda5 	bl	8001b14 <csn>
}
 8001fca:	b003      	add	sp, #12
 8001fcc:	bd30      	pop	{r4, r5, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000a70 	.word	0x20000a70

08001fd4 <disableDynamicPayloads>:
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P5) | (1 << DPL_P4) | (1 << DPL_P3) | (1 << DPL_P2) | (1 << DPL_P1) | (1 << DPL_P0));
	dynamic_payloads_enabled = true;
}

void disableDynamicPayloads(void)
{
 8001fd4:	b508      	push	{r3, lr}
	write_register(FEATURE, 0);
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	201d      	movs	r0, #29
 8001fda:	f7ff fe05 	bl	8001be8 <write_register>
	write_register(DYNPD, 0);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	201c      	movs	r0, #28
 8001fe2:	f7ff fe01 	bl	8001be8 <write_register>
	dynamic_payloads_enabled = false;
 8001fe6:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <disableDynamicPayloads+0x1c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
}
 8001fec:	bd08      	pop	{r3, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000a6c 	.word	0x20000a6c

08001ff4 <setAutoAck>:
{
	return p_variant;
}

void setAutoAck(bool enable)
{
 8001ff4:	b508      	push	{r3, lr}
	if(enable)
 8001ff6:	b920      	cbnz	r0, 8002002 <setAutoAck+0xe>
		write_register(EN_AA, 0x3F);
	else
		write_register(EN_AA, 0);
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7ff fdf4 	bl	8001be8 <write_register>
}
 8002000:	bd08      	pop	{r3, pc}
		write_register(EN_AA, 0x3F);
 8002002:	213f      	movs	r1, #63	; 0x3f
 8002004:	2001      	movs	r0, #1
 8002006:	f7ff fdef 	bl	8001be8 <write_register>
 800200a:	e7f9      	b.n	8002000 <setAutoAck+0xc>

0800200c <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 800200c:	b510      	push	{r4, lr}
 800200e:	4604      	mov	r4, r0
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8002010:	2006      	movs	r0, #6
 8002012:	f7ff fd97 	bl	8001b44 <read_register>
 8002016:	f000 01f8 	and.w	r1, r0, #248	; 0xf8

  if(level > 3) // If invalid level, go to max PA
 800201a:	2c03      	cmp	r4, #3
  {
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
  }
  else
  {
	  level = (level << 1) + 1;	 		// Else set level as requested
 800201c:	bf9d      	ittte	ls
 800201e:	0064      	lslls	r4, r4, #1
 8002020:	3401      	addls	r4, #1
 8002022:	f004 04ff 	andls.w	r4, r4, #255	; 0xff
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 8002026:	2407      	movhi	r4, #7
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8002028:	4321      	orrs	r1, r4
 800202a:	2006      	movs	r0, #6
 800202c:	f7ff fddc 	bl	8001be8 <write_register>
}
 8002030:	bd10      	pop	{r4, pc}

08002032 <getPALevel>:

uint8_t getPALevel(void)
{
 8002032:	b508      	push	{r3, lr}
	return (read_register(RF_SETUP) & ((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH))) >> 1;
 8002034:	2006      	movs	r0, #6
 8002036:	f7ff fd85 	bl	8001b44 <read_register>
}
 800203a:	f3c0 0041 	ubfx	r0, r0, #1, #2
 800203e:	bd08      	pop	{r3, pc}

08002040 <setDataRate>:

bool setDataRate(rf24_datarate_e speed)
{
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = read_register(RF_SETUP);
 8002044:	2006      	movs	r0, #6
 8002046:	f7ff fd7d 	bl	8001b44 <read_register>
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 800204a:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	txDelay = 85;

	if(speed == RF24_250KBPS)
 800204e:	2d02      	cmp	r5, #2
 8002050:	d010      	beq.n	8002074 <setDataRate+0x34>
		setup |= (1 << RF_DR_LOW);
		txDelay = 155;
	}
	else
	{
		if(speed == RF24_2MBPS)
 8002052:	2d01      	cmp	r5, #1
 8002054:	d014      	beq.n	8002080 <setDataRate+0x40>
	txDelay = 85;
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <setDataRate+0x4c>)
 8002058:	2255      	movs	r2, #85	; 0x55
 800205a:	701a      	strb	r2, [r3, #0]
			setup |= (1 << RF_DR_HIGH);
			txDelay = 65;
		}
	}

	write_register(RF_SETUP, setup);
 800205c:	4621      	mov	r1, r4
 800205e:	2006      	movs	r0, #6
 8002060:	f7ff fdc2 	bl	8001be8 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 8002064:	2006      	movs	r0, #6
 8002066:	f7ff fd6d 	bl	8001b44 <read_register>
	{
		result = true;
	}

	return result;
}
 800206a:	4284      	cmp	r4, r0
 800206c:	bf14      	ite	ne
 800206e:	2000      	movne	r0, #0
 8002070:	2001      	moveq	r0, #1
 8002072:	bd38      	pop	{r3, r4, r5, pc}
		setup |= (1 << RF_DR_LOW);
 8002074:	f044 0420 	orr.w	r4, r4, #32
		txDelay = 155;
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <setDataRate+0x4c>)
 800207a:	229b      	movs	r2, #155	; 0x9b
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e7ed      	b.n	800205c <setDataRate+0x1c>
			setup |= (1 << RF_DR_HIGH);
 8002080:	f044 0408 	orr.w	r4, r4, #8
			txDelay = 65;
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <setDataRate+0x4c>)
 8002086:	2241      	movs	r2, #65	; 0x41
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e7e7      	b.n	800205c <setDataRate+0x1c>
 800208c:	200009a5 	.word	0x200009a5

08002090 <getDataRate>:

rf24_datarate_e getDataRate(void)
{
 8002090:	b508      	push	{r3, lr}
	rf24_datarate_e result ;
	uint8_t dr = read_register(RF_SETUP) & ((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8002092:	2006      	movs	r0, #6
 8002094:	f7ff fd56 	bl	8001b44 <read_register>
 8002098:	f000 0028 	and.w	r0, r0, #40	; 0x28

	// switch uses RAM (evil!)
	// Order matters in our case below
	if(dr == (1 << RF_DR_LOW))
 800209c:	2820      	cmp	r0, #32
 800209e:	d004      	beq.n	80020aa <getDataRate+0x1a>
	{
		result = RF24_250KBPS;
 80020a0:	2808      	cmp	r0, #8
 80020a2:	bf14      	ite	ne
 80020a4:	2000      	movne	r0, #0
 80020a6:	2001      	moveq	r0, #1
	{
		result = RF24_1MBPS;
	}

	return result;
}
 80020a8:	bd08      	pop	{r3, pc}
		result = RF24_250KBPS;
 80020aa:	2002      	movs	r0, #2
 80020ac:	e7fc      	b.n	80020a8 <getDataRate+0x18>

080020ae <getCRCLength>:

	write_register(NRF_CONFIG, config);
}

rf24_crclength_e getCRCLength(void)
{
 80020ae:	b510      	push	{r4, lr}
	rf24_crclength_e result = RF24_CRC_DISABLED;

	uint8_t config = read_register(NRF_CONFIG) & ((1 << CRCO) | (1 << EN_CRC));
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff fd47 	bl	8001b44 <read_register>
 80020b6:	4604      	mov	r4, r0
	uint8_t AA = read_register(EN_AA);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff fd43 	bl	8001b44 <read_register>

	if(config & (1 << EN_CRC) || AA)
 80020be:	f014 0f08 	tst.w	r4, #8
 80020c2:	d100      	bne.n	80020c6 <getCRCLength+0x18>
 80020c4:	b130      	cbz	r0, 80020d4 <getCRCLength+0x26>
	{
		if(config & (1 << CRCO))
 80020c6:	f004 0404 	and.w	r4, r4, #4
		  result = RF24_CRC_16;
		else
		  result = RF24_CRC_8;
 80020ca:	2c00      	cmp	r4, #0
 80020cc:	bf14      	ite	ne
 80020ce:	2002      	movne	r0, #2
 80020d0:	2001      	moveq	r0, #1
	}

	return result;
}
 80020d2:	bd10      	pop	{r4, pc}
	rf24_crclength_e result = RF24_CRC_DISABLED;
 80020d4:	2000      	movs	r0, #0
 80020d6:	e7fc      	b.n	80020d2 <getCRCLength+0x24>

080020d8 <disableCRC>:

void disableCRC(void)
{
 80020d8:	b508      	push	{r3, lr}
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
 80020da:	2000      	movs	r0, #0
 80020dc:	f7ff fd32 	bl	8001b44 <read_register>
	write_register(NRF_CONFIG, disable);
 80020e0:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fd7f 	bl	8001be8 <write_register>
}
 80020ea:	bd08      	pop	{r3, pc}

080020ec <radio_tx_sync>:
void setRetries(uint8_t delay, uint8_t count)
{
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
}

void radio_tx_sync (void){
 80020ec:	b530      	push	{r4, r5, lr}
 80020ee:	b083      	sub	sp, #12
	stopListening();
 80020f0:	f7ff fe3e 	bl	8001d70 <stopListening>
	uint8_t nrf_data[1] = {1,};
 80020f4:	ad02      	add	r5, sp, #8
 80020f6:	2301      	movs	r3, #1
 80020f8:	f805 3d04 	strb.w	r3, [r5, #-4]!
 80020fc:	2464      	movs	r4, #100	; 0x64
	for (uint8_t i = 100; i > 0; i--) {
		write(&nrf_data, strlen((const char*)nrf_data));
 80020fe:	4628      	mov	r0, r5
 8002100:	f7fe f826 	bl	8000150 <strlen>
 8002104:	b2c1      	uxtb	r1, r0
 8002106:	4628      	mov	r0, r5
 8002108:	f7ff fe7c 	bl	8001e04 <write>
 800210c:	1e63      	subs	r3, r4, #1
	for (uint8_t i = 100; i > 0; i--) {
 800210e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8002112:	d1f4      	bne.n	80020fe <radio_tx_sync+0x12>
	}
	startListening();
 8002114:	f7ff ff10 	bl	8001f38 <startListening>
}
 8002118:	b003      	add	sp, #12
 800211a:	bd30      	pop	{r4, r5, pc}

0800211c <radio_rx_sync>:

bool radio_rx_sync (void){
 800211c:	b508      	push	{r3, lr}
	if (!(read_register(FIFO_STATUS) & (1 << RX_EMPTY))){
 800211e:	2017      	movs	r0, #23
 8002120:	f7ff fd10 	bl	8001b44 <read_register>
 8002124:	f010 0f01 	tst.w	r0, #1
 8002128:	d001      	beq.n	800212e <radio_rx_sync+0x12>
		HAL_Delay(50);
		flush_rx();
		write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
		return 1;
	}
	return 0;
 800212a:	2000      	movs	r0, #0
}
 800212c:	bd08      	pop	{r3, pc}
		HAL_Delay(50);
 800212e:	2032      	movs	r0, #50	; 0x32
 8002130:	f001 fb4c 	bl	80037cc <HAL_Delay>
		flush_rx();
 8002134:	f7ff fe02 	bl	8001d3c <flush_rx>
		write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 8002138:	2170      	movs	r1, #112	; 0x70
 800213a:	2007      	movs	r0, #7
 800213c:	f7ff fd54 	bl	8001be8 <write_register>
		return 1;
 8002140:	2001      	movs	r0, #1
 8002142:	e7f3      	b.n	800212c <radio_rx_sync+0x10>

08002144 <NRF_Init>:

uint8_t NRF_Init(uint8_t ch_num, uint64_t pipe_num)
{
 8002144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002148:	4680      	mov	r8, r0
 800214a:	4616      	mov	r6, r2
 800214c:	461f      	mov	r7, r3
	DWT_Init(); // счётчик для микросекундных пауз
 800214e:	f7ff fcbb 	bl	8001ac8 <DWT_Init>
	flush_rx();
 8002152:	f7ff fdf3 	bl	8001d3c <flush_rx>
	flush_tx();
 8002156:	f7ff fdf6 	bl	8001d46 <flush_tx>

	uint8_t setup = 0;
	p_variant = false;
 800215a:	2400      	movs	r4, #0
 800215c:	4b74      	ldr	r3, [pc, #464]	; (8002330 <NRF_Init+0x1ec>)
 800215e:	701c      	strb	r4, [r3, #0]
	payload_size = 1;
 8002160:	f04f 0901 	mov.w	r9, #1
 8002164:	4b73      	ldr	r3, [pc, #460]	; (8002334 <NRF_Init+0x1f0>)
 8002166:	f883 9000 	strb.w	r9, [r3]
	dynamic_payloads_enabled = false;
 800216a:	4b73      	ldr	r3, [pc, #460]	; (8002338 <NRF_Init+0x1f4>)
 800216c:	701c      	strb	r4, [r3, #0]
	addr_width = 5;
 800216e:	2505      	movs	r5, #5
 8002170:	4b72      	ldr	r3, [pc, #456]	; (800233c <NRF_Init+0x1f8>)
 8002172:	701d      	strb	r5, [r3, #0]
	pipe0_reading_address[0] = 0;
 8002174:	4b72      	ldr	r3, [pc, #456]	; (8002340 <NRF_Init+0x1fc>)
 8002176:	701c      	strb	r4, [r3, #0]

	ce(LOW);
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff fcd9 	bl	8001b30 <ce>
	csn(HIGH);
 800217e:	4648      	mov	r0, r9
 8002180:	f7ff fcc8 	bl	8001b14 <csn>
	HAL_Delay(5);
 8002184:	4628      	mov	r0, r5
 8002186:	f001 fb21 	bl	80037cc <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 800218a:	210c      	movs	r1, #12
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff fd2b 	bl	8001be8 <write_register>
	flush_rx();
 8002192:	f7ff fdd3 	bl	8001d3c <flush_rx>
	flush_tx();
 8002196:	f7ff fdd6 	bl	8001d46 <flush_tx>
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 800219a:	2111      	movs	r1, #17
 800219c:	2004      	movs	r0, #4
 800219e:	f7ff fd23 	bl	8001be8 <write_register>
	setRetries(1, 1);
	flush_rx();
 80021a2:	f7ff fdcb 	bl	8001d3c <flush_rx>
	flush_tx();
 80021a6:	f7ff fdce 	bl	8001d46 <flush_tx>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 80021aa:	2003      	movs	r0, #3
 80021ac:	f7ff ff2e 	bl	800200c <setPALevel>
	flush_rx();
 80021b0:	f7ff fdc4 	bl	8001d3c <flush_rx>
	flush_tx();
 80021b4:	f7ff fdc7 	bl	8001d46 <flush_tx>
	setChannel(ch_num);
 80021b8:	4640      	mov	r0, r8
 80021ba:	f7ff fdce 	bl	8001d5a <setChannel>
	flush_rx();
 80021be:	f7ff fdbd 	bl	8001d3c <flush_rx>
	flush_tx();
 80021c2:	f7ff fdc0 	bl	8001d46 <flush_tx>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 80021c6:	2002      	movs	r0, #2
 80021c8:	f7ff ff3a 	bl	8002040 <setDataRate>
 80021cc:	b110      	cbz	r0, 80021d4 <NRF_Init+0x90>
	{
		p_variant = true;
 80021ce:	4b58      	ldr	r3, [pc, #352]	; (8002330 <NRF_Init+0x1ec>)
 80021d0:	f883 9000 	strb.w	r9, [r3]
	}

	flush_rx();
 80021d4:	f7ff fdb2 	bl	8001d3c <flush_rx>
	flush_tx();
 80021d8:	f7ff fdb5 	bl	8001d46 <flush_tx>

	setup = read_register(RF_SETUP);
 80021dc:	2006      	movs	r0, #6
 80021de:	f7ff fcb1 	bl	8001b44 <read_register>
 80021e2:	4604      	mov	r4, r0

	flush_rx();
 80021e4:	f7ff fdaa 	bl	8001d3c <flush_rx>
	flush_tx();
 80021e8:	f7ff fdad 	bl	8001d46 <flush_tx>

	if (setup != 0 && setup != 0xff && getDataRate()==RF24_250KBPS && getChannel() == ch_num) {
 80021ec:	3c01      	subs	r4, #1
 80021ee:	b2e4      	uxtb	r4, r4
 80021f0:	2cfd      	cmp	r4, #253	; 0xfd
 80021f2:	d903      	bls.n	80021fc <NRF_Init+0xb8>
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		#endif

		return HAL_OK;
	}
	else return HAL_ERROR;
 80021f4:	2401      	movs	r4, #1
}
 80021f6:	4620      	mov	r0, r4
 80021f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (setup != 0 && setup != 0xff && getDataRate()==RF24_250KBPS && getChannel() == ch_num) {
 80021fc:	f7ff ff48 	bl	8002090 <getDataRate>
 8002200:	2802      	cmp	r0, #2
 8002202:	d001      	beq.n	8002208 <NRF_Init+0xc4>
	else return HAL_ERROR;
 8002204:	2401      	movs	r4, #1
 8002206:	e7f6      	b.n	80021f6 <NRF_Init+0xb2>
	if (setup != 0 && setup != 0xff && getDataRate()==RF24_250KBPS && getChannel() == ch_num) {
 8002208:	f7ff fdad 	bl	8001d66 <getChannel>
 800220c:	4540      	cmp	r0, r8
 800220e:	d001      	beq.n	8002214 <NRF_Init+0xd0>
	else return HAL_ERROR;
 8002210:	2401      	movs	r4, #1
 8002212:	e7f0      	b.n	80021f6 <NRF_Init+0xb2>
		toggle_features();
 8002214:	f7ff febe 	bl	8001f94 <toggle_features>
		write_register(FEATURE, 0);
 8002218:	2100      	movs	r1, #0
 800221a:	201d      	movs	r0, #29
 800221c:	f7ff fce4 	bl	8001be8 <write_register>
		write_register(DYNPD, 0);
 8002220:	2100      	movs	r1, #0
 8002222:	201c      	movs	r0, #28
 8002224:	f7ff fce0 	bl	8001be8 <write_register>
		dynamic_payloads_enabled = false;
 8002228:	2400      	movs	r4, #0
 800222a:	4b43      	ldr	r3, [pc, #268]	; (8002338 <NRF_Init+0x1f4>)
 800222c:	701c      	strb	r4, [r3, #0]
		write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 800222e:	2170      	movs	r1, #112	; 0x70
 8002230:	2007      	movs	r0, #7
 8002232:	f7ff fcd9 	bl	8001be8 <write_register>
		flush_rx();
 8002236:	f7ff fd81 	bl	8001d3c <flush_rx>
		flush_tx();
 800223a:	f7ff fd84 	bl	8001d46 <flush_tx>
		powerUp(); //Power up by default when begin() is called
 800223e:	f7ff fdc1 	bl	8001dc4 <powerUp>
		write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff fc7e 	bl	8001b44 <read_register>
 8002248:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff fccb 	bl	8001be8 <write_register>
		setAutoAck(false);
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff fece 	bl	8001ff4 <setAutoAck>
		disableDynamicPayloads();
 8002258:	f7ff febc 	bl	8001fd4 <disableDynamicPayloads>
		disableCRC();
 800225c:	f7ff ff3c 	bl	80020d8 <disableCRC>
		setDataRate (RF24_250KBPS);
 8002260:	2002      	movs	r0, #2
 8002262:	f7ff feed 	bl	8002040 <setDataRate>
		openReadingPipe(1, pipe1);
 8002266:	4632      	mov	r2, r6
 8002268:	463b      	mov	r3, r7
 800226a:	2001      	movs	r0, #1
 800226c:	f7ff fe14 	bl	8001e98 <openReadingPipe>
		openWritingPipe(pipe1);
 8002270:	4630      	mov	r0, r6
 8002272:	4639      	mov	r1, r7
 8002274:	f7ff fdf4 	bl	8001e60 <openWritingPipe>
		startListening();
 8002278:	f7ff fe5e 	bl	8001f38 <startListening>
		maskIRQ(1, 1, 1); // маскируем прерывания
 800227c:	2201      	movs	r2, #1
 800227e:	4611      	mov	r1, r2
 8002280:	4610      	mov	r0, r2
 8002282:	f7ff fdd9 	bl	8001e38 <maskIRQ>
		if(getChannel() != ch_num) return HAL_ERROR;
 8002286:	f7ff fd6e 	bl	8001d66 <getChannel>
 800228a:	4540      	cmp	r0, r8
 800228c:	d001      	beq.n	8002292 <NRF_Init+0x14e>
 800228e:	2401      	movs	r4, #1
 8002290:	e7b1      	b.n	80021f6 <NRF_Init+0xb2>
		uint8_t status = get_status();
 8002292:	f7ff fd5d 	bl	8001d50 <get_status>
		printf("get_status: 0x%02x\r\n", status);
 8002296:	4601      	mov	r1, r0
 8002298:	482a      	ldr	r0, [pc, #168]	; (8002344 <NRF_Init+0x200>)
 800229a:	f007 fbc9 	bl	8009a30 <iprintf>
		printf("RF24_CHANNEL: %d\r\n", getChannel());
 800229e:	f7ff fd62 	bl	8001d66 <getChannel>
 80022a2:	4601      	mov	r1, r0
 80022a4:	4828      	ldr	r0, [pc, #160]	; (8002348 <NRF_Init+0x204>)
 80022a6:	f007 fbc3 	bl	8009a30 <iprintf>
		status = getPALevel();
 80022aa:	f7ff fec2 	bl	8002032 <getPALevel>
		if(status == 0x00)
 80022ae:	b148      	cbz	r0, 80022c4 <NRF_Init+0x180>
		else if(status == 0x01)
 80022b0:	2801      	cmp	r0, #1
 80022b2:	d023      	beq.n	80022fc <NRF_Init+0x1b8>
		else if(status == 0x02)
 80022b4:	2802      	cmp	r0, #2
 80022b6:	d025      	beq.n	8002304 <NRF_Init+0x1c0>
		else if(status == 0x03)
 80022b8:	2803      	cmp	r0, #3
 80022ba:	d106      	bne.n	80022ca <NRF_Init+0x186>
		  printf("RF24_PA_MAX\r\n");
 80022bc:	4823      	ldr	r0, [pc, #140]	; (800234c <NRF_Init+0x208>)
 80022be:	f007 fc2b 	bl	8009b18 <puts>
 80022c2:	e002      	b.n	80022ca <NRF_Init+0x186>
		  printf("RF24_PA_MIN\r\n");
 80022c4:	4822      	ldr	r0, [pc, #136]	; (8002350 <NRF_Init+0x20c>)
 80022c6:	f007 fc27 	bl	8009b18 <puts>
		status = getDataRate();
 80022ca:	f7ff fee1 	bl	8002090 <getDataRate>
		if(status == 0x02)
 80022ce:	2802      	cmp	r0, #2
 80022d0:	d01c      	beq.n	800230c <NRF_Init+0x1c8>
		else if(status == 0x01)
 80022d2:	2801      	cmp	r0, #1
		  printf("RF24_2MBPS\r\n");
 80022d4:	bf0c      	ite	eq
 80022d6:	481f      	ldreq	r0, [pc, #124]	; (8002354 <NRF_Init+0x210>)
		  printf("RF24_1MBPS\r\n");
 80022d8:	481f      	ldrne	r0, [pc, #124]	; (8002358 <NRF_Init+0x214>)
 80022da:	f007 fc1d 	bl	8009b18 <puts>
		printf("getPayloadSize: %d\r\n", getPayloadSize());
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <NRF_Init+0x1f0>)
 80022e0:	7819      	ldrb	r1, [r3, #0]
 80022e2:	481e      	ldr	r0, [pc, #120]	; (800235c <NRF_Init+0x218>)
 80022e4:	f007 fba4 	bl	8009a30 <iprintf>
		status = getCRCLength();
 80022e8:	f7ff fee1 	bl	80020ae <getCRCLength>
		if(status == 0x00)
 80022ec:	4604      	mov	r4, r0
 80022ee:	b188      	cbz	r0, 8002314 <NRF_Init+0x1d0>
		else if(status == 0x01)
 80022f0:	2801      	cmp	r0, #1
 80022f2:	d013      	beq.n	800231c <NRF_Init+0x1d8>
		else if(status == 0x02)
 80022f4:	2802      	cmp	r0, #2
 80022f6:	d016      	beq.n	8002326 <NRF_Init+0x1e2>
		return HAL_OK;
 80022f8:	2400      	movs	r4, #0
 80022fa:	e77c      	b.n	80021f6 <NRF_Init+0xb2>
		  printf("RF24_PA_LOW\r\n");
 80022fc:	4818      	ldr	r0, [pc, #96]	; (8002360 <NRF_Init+0x21c>)
 80022fe:	f007 fc0b 	bl	8009b18 <puts>
 8002302:	e7e2      	b.n	80022ca <NRF_Init+0x186>
		  printf("RF24_PA_HIGH\r\n");
 8002304:	4817      	ldr	r0, [pc, #92]	; (8002364 <NRF_Init+0x220>)
 8002306:	f007 fc07 	bl	8009b18 <puts>
 800230a:	e7de      	b.n	80022ca <NRF_Init+0x186>
		  printf("RF24_250KBPS\r\n");
 800230c:	4816      	ldr	r0, [pc, #88]	; (8002368 <NRF_Init+0x224>)
 800230e:	f007 fc03 	bl	8009b18 <puts>
 8002312:	e7e4      	b.n	80022de <NRF_Init+0x19a>
		  printf("RF24_CRC_DISABLED\r\n");
 8002314:	4815      	ldr	r0, [pc, #84]	; (800236c <NRF_Init+0x228>)
 8002316:	f007 fbff 	bl	8009b18 <puts>
 800231a:	e76c      	b.n	80021f6 <NRF_Init+0xb2>
		  printf("RF24_CRC_8\r\n");
 800231c:	4814      	ldr	r0, [pc, #80]	; (8002370 <NRF_Init+0x22c>)
 800231e:	f007 fbfb 	bl	8009b18 <puts>
		return HAL_OK;
 8002322:	2400      	movs	r4, #0
 8002324:	e767      	b.n	80021f6 <NRF_Init+0xb2>
		  printf("RF24_CRC_16\r\n");
 8002326:	4813      	ldr	r0, [pc, #76]	; (8002374 <NRF_Init+0x230>)
 8002328:	f007 fbf6 	bl	8009b18 <puts>
		return HAL_OK;
 800232c:	2400      	movs	r4, #0
 800232e:	e762      	b.n	80021f6 <NRF_Init+0xb2>
 8002330:	20000a6d 	.word	0x20000a6d
 8002334:	2000099d 	.word	0x2000099d
 8002338:	20000a6c 	.word	0x20000a6c
 800233c:	2000099c 	.word	0x2000099c
 8002340:	200009a0 	.word	0x200009a0
 8002344:	0800abe0 	.word	0x0800abe0
 8002348:	0800abf8 	.word	0x0800abf8
 800234c:	0800ac3c 	.word	0x0800ac3c
 8002350:	0800ac0c 	.word	0x0800ac0c
 8002354:	0800ac5c 	.word	0x0800ac5c
 8002358:	0800ac68 	.word	0x0800ac68
 800235c:	0800ac74 	.word	0x0800ac74
 8002360:	0800ac1c 	.word	0x0800ac1c
 8002364:	0800ac2c 	.word	0x0800ac2c
 8002368:	0800ac4c 	.word	0x0800ac4c
 800236c:	0800ac8c 	.word	0x0800ac8c
 8002370:	0800aca0 	.word	0x0800aca0
 8002374:	0800acac 	.word	0x0800acac

08002378 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002378:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 800237a:	480e      	ldr	r0, [pc, #56]	; (80023b4 <MX_SPI1_Init+0x3c>)
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_SPI1_Init+0x40>)
 800237e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002380:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002384:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002386:	2300      	movs	r3, #0
 8002388:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800238a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800238c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800238e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002394:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002396:	2208      	movs	r2, #8
 8002398:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800239a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800239c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023a0:	230a      	movs	r3, #10
 80023a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023a4:	f003 f914 	bl	80055d0 <HAL_SPI_Init>
 80023a8:	b900      	cbnz	r0, 80023ac <MX_SPI1_Init+0x34>
  {
    Error_Handler();
  }

}
 80023aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80023ac:	f7ff f99e 	bl	80016ec <Error_Handler>
}
 80023b0:	e7fb      	b.n	80023aa <MX_SPI1_Init+0x32>
 80023b2:	bf00      	nop
 80023b4:	20000ac8 	.word	0x20000ac8
 80023b8:	40013000 	.word	0x40013000

080023bc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80023bc:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 80023be:	480e      	ldr	r0, [pc, #56]	; (80023f8 <MX_SPI2_Init+0x3c>)
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_SPI2_Init+0x40>)
 80023c2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80023c8:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023ca:	2300      	movs	r3, #0
 80023cc:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023ce:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d0:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023d2:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023da:	2210      	movs	r2, #16
 80023dc:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023de:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80023e4:	230a      	movs	r3, #10
 80023e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023e8:	f003 f8f2 	bl	80055d0 <HAL_SPI_Init>
 80023ec:	b900      	cbnz	r0, 80023f0 <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 80023ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80023f0:	f7ff f97c 	bl	80016ec <Error_Handler>
}
 80023f4:	e7fb      	b.n	80023ee <MX_SPI2_Init+0x32>
 80023f6:	bf00      	nop
 80023f8:	20000a70 	.word	0x20000a70
 80023fc:	40003800 	.word	0x40003800

08002400 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002400:	b570      	push	{r4, r5, r6, lr}
 8002402:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	2300      	movs	r3, #0
 8002406:	9304      	str	r3, [sp, #16]
 8002408:	9305      	str	r3, [sp, #20]
 800240a:	9306      	str	r3, [sp, #24]
 800240c:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 800240e:	6803      	ldr	r3, [r0, #0]
 8002410:	4a41      	ldr	r2, [pc, #260]	; (8002518 <HAL_SPI_MspInit+0x118>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d004      	beq.n	8002420 <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8002416:	4a41      	ldr	r2, [pc, #260]	; (800251c <HAL_SPI_MspInit+0x11c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d053      	beq.n	80024c4 <HAL_SPI_MspInit+0xc4>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800241c:	b008      	add	sp, #32
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_SPI_MspInit+0x120>)
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800242a:	619a      	str	r2, [r3, #24]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002432:	9200      	str	r2, [sp, #0]
 8002434:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	f042 0204 	orr.w	r2, r2, #4
 800243c:	619a      	str	r2, [r3, #24]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MOSI_Pin;
 8002448:	23a0      	movs	r3, #160	; 0xa0
 800244a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002454:	4e33      	ldr	r6, [pc, #204]	; (8002524 <HAL_SPI_MspInit+0x124>)
 8002456:	a904      	add	r1, sp, #16
 8002458:	4630      	mov	r0, r6
 800245a:	f001 ffef 	bl	800443c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_MISO_Pin;
 800245e:	2340      	movs	r3, #64	; 0x40
 8002460:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002462:	2500      	movs	r5, #0
 8002464:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 8002468:	a904      	add	r1, sp, #16
 800246a:	4630      	mov	r0, r6
 800246c:	f001 ffe6 	bl	800443c <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002470:	482d      	ldr	r0, [pc, #180]	; (8002528 <HAL_SPI_MspInit+0x128>)
 8002472:	4b2e      	ldr	r3, [pc, #184]	; (800252c <HAL_SPI_MspInit+0x12c>)
 8002474:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002476:	6045      	str	r5, [r0, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002478:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800247e:	6105      	str	r5, [r0, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002480:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002482:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002484:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002486:	f001 fdf7 	bl	8004078 <HAL_DMA_Init>
 800248a:	b9a8      	cbnz	r0, 80024b8 <HAL_SPI_MspInit+0xb8>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800248c:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_SPI_MspInit+0x128>)
 800248e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002490:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002492:	4827      	ldr	r0, [pc, #156]	; (8002530 <HAL_SPI_MspInit+0x130>)
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_SPI_MspInit+0x134>)
 8002496:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002498:	2310      	movs	r3, #16
 800249a:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_DISABLE;
 80024a0:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a2:	6103      	str	r3, [r0, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a4:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80024a6:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024a8:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024aa:	f001 fde5 	bl	8004078 <HAL_DMA_Init>
 80024ae:	b930      	cbnz	r0, 80024be <HAL_SPI_MspInit+0xbe>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_SPI_MspInit+0x130>)
 80024b2:	64a3      	str	r3, [r4, #72]	; 0x48
 80024b4:	625c      	str	r4, [r3, #36]	; 0x24
 80024b6:	e7b1      	b.n	800241c <HAL_SPI_MspInit+0x1c>
      Error_Handler();
 80024b8:	f7ff f918 	bl	80016ec <Error_Handler>
 80024bc:	e7e6      	b.n	800248c <HAL_SPI_MspInit+0x8c>
      Error_Handler();
 80024be:	f7ff f915 	bl	80016ec <Error_Handler>
 80024c2:	e7f5      	b.n	80024b0 <HAL_SPI_MspInit+0xb0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_SPI_MspInit+0x120>)
 80024c6:	69da      	ldr	r2, [r3, #28]
 80024c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024cc:	61da      	str	r2, [r3, #28]
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80024d4:	9202      	str	r2, [sp, #8]
 80024d6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	f042 0208 	orr.w	r2, r2, #8
 80024de:	619a      	str	r2, [r3, #24]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	9303      	str	r3, [sp, #12]
 80024e8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = RADIO_SCK_Pin|RADIO_MOSI_Pin;
 80024ea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80024ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f4:	2303      	movs	r3, #3
 80024f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f8:	4c0f      	ldr	r4, [pc, #60]	; (8002538 <HAL_SPI_MspInit+0x138>)
 80024fa:	a904      	add	r1, sp, #16
 80024fc:	4620      	mov	r0, r4
 80024fe:	f001 ff9d 	bl	800443c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_MISO_Pin;
 8002502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002506:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002508:	2300      	movs	r3, #0
 800250a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RADIO_MISO_GPIO_Port, &GPIO_InitStruct);
 800250e:	a904      	add	r1, sp, #16
 8002510:	4620      	mov	r0, r4
 8002512:	f001 ff93 	bl	800443c <HAL_GPIO_Init>
}
 8002516:	e781      	b.n	800241c <HAL_SPI_MspInit+0x1c>
 8002518:	40013000 	.word	0x40013000
 800251c:	40003800 	.word	0x40003800
 8002520:	40021000 	.word	0x40021000
 8002524:	40010800 	.word	0x40010800
 8002528:	20000b20 	.word	0x20000b20
 800252c:	4002001c 	.word	0x4002001c
 8002530:	20000b64 	.word	0x20000b64
 8002534:	40020030 	.word	0x40020030
 8002538:	40010c00 	.word	0x40010c00

0800253c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800253c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_MspInit+0x3c>)
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	619a      	str	r2, [r3, #24]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	f002 0201 	and.w	r2, r2, #1
 800254e:	9200      	str	r2, [sp, #0]
 8002550:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002558:	61da      	str	r2, [r3, #28]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002564:	4a05      	ldr	r2, [pc, #20]	; (800257c <HAL_MspInit+0x40>)
 8002566:	6853      	ldr	r3, [r2, #4]
 8002568:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800256c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002572:	b002      	add	sp, #8
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40010000 	.word	0x40010000

08002580 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002580:	4770      	bx	lr

08002582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002582:	e7fe      	b.n	8002582 <HardFault_Handler>

08002584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002584:	e7fe      	b.n	8002584 <MemManage_Handler>

08002586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002586:	e7fe      	b.n	8002586 <BusFault_Handler>

08002588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002588:	e7fe      	b.n	8002588 <UsageFault_Handler>

0800258a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800258a:	4770      	bx	lr

0800258c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258c:	4770      	bx	lr

0800258e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800258e:	4770      	bx	lr

08002590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002590:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002592:	f001 f909 	bl	80037a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  user_ms_counter++;
 8002596:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <SysTick_Handler+0x14>)
 8002598:	6813      	ldr	r3, [r2, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	6013      	str	r3, [r2, #0]
  SD_1msTick();
 800259e:	f000 fad5 	bl	8002b4c <SD_1msTick>

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a2:	bd08      	pop	{r3, pc}
 80025a4:	20000998 	.word	0x20000998

080025a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80025aa:	4802      	ldr	r0, [pc, #8]	; (80025b4 <DMA1_Channel2_IRQHandler+0xc>)
 80025ac:	f001 fea6 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025b0:	bd08      	pop	{r3, pc}
 80025b2:	bf00      	nop
 80025b4:	20000b20 	.word	0x20000b20

080025b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025ba:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA1_Channel3_IRQHandler+0xc>)
 80025bc:	f001 fe9e 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025c0:	bd08      	pop	{r3, pc}
 80025c2:	bf00      	nop
 80025c4:	20000b64 	.word	0x20000b64

080025c8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	//HAL_GPIO_TogglePin(RADIO_CS_GPIO_Port, RADIO_CS_Pin);

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80025ca:	4804      	ldr	r0, [pc, #16]	; (80025dc <DMA1_Channel4_IRQHandler+0x14>)
 80025cc:	f001 fe96 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
  WS2812_prepare_data (&WS2812_ch5, &SD);
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <DMA1_Channel4_IRQHandler+0x18>)
 80025d2:	4804      	ldr	r0, [pc, #16]	; (80025e4 <DMA1_Channel4_IRQHandler+0x1c>)
 80025d4:	f000 ff94 	bl	8003500 <WS2812_prepare_data>


	//HAL_GPIO_TogglePin(RADIO_CS_GPIO_Port, RADIO_CS_Pin);
  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025d8:	bd08      	pop	{r3, pc}
 80025da:	bf00      	nop
 80025dc:	20000ba8 	.word	0x20000ba8
 80025e0:	2000023c 	.word	0x2000023c
 80025e4:	200008f4 	.word	0x200008f4

080025e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80025ea:	2040      	movs	r0, #64	; 0x40
 80025ec:	f002 f8de 	bl	80047ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025f0:	bd08      	pop	{r3, pc}

080025f2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f2:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	1e16      	subs	r6, r2, #0
 80025f6:	dd07      	ble.n	8002608 <_read+0x16>
 80025f8:	460c      	mov	r4, r1
 80025fa:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80025fc:	f3af 8000 	nop.w
 8002600:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002604:	42a5      	cmp	r5, r4
 8002606:	d1f9      	bne.n	80025fc <_read+0xa>
	}

return len;
}
 8002608:	4630      	mov	r0, r6
 800260a:	bd70      	pop	{r4, r5, r6, pc}

0800260c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800260c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	1e16      	subs	r6, r2, #0
 8002610:	dd07      	ble.n	8002622 <_write+0x16>
 8002612:	460c      	mov	r4, r1
 8002614:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002616:	f814 0b01 	ldrb.w	r0, [r4], #1
 800261a:	f000 fefd 	bl	8003418 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261e:	42a5      	cmp	r5, r4
 8002620:	d1f9      	bne.n	8002616 <_write+0xa>
	}
	return len;
}
 8002622:	4630      	mov	r0, r6
 8002624:	bd70      	pop	{r4, r5, r6, pc}

08002626 <_close>:

int _close(int file)
{
	return -1;
}
 8002626:	f04f 30ff 	mov.w	r0, #4294967295
 800262a:	4770      	bx	lr

0800262c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800262c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002630:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002632:	2000      	movs	r0, #0
 8002634:	4770      	bx	lr

08002636 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002636:	2001      	movs	r0, #1
 8002638:	4770      	bx	lr

0800263a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800263a:	2000      	movs	r0, #0
 800263c:	4770      	bx	lr
	...

08002640 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002640:	b508      	push	{r3, lr}
 8002642:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002644:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <_sbrk+0x34>)
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	b142      	cbz	r2, 800265c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <_sbrk+0x34>)
 800264c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800264e:	4403      	add	r3, r0
 8002650:	466a      	mov	r2, sp
 8002652:	4293      	cmp	r3, r2
 8002654:	d806      	bhi.n	8002664 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002656:	4a07      	ldr	r2, [pc, #28]	; (8002674 <_sbrk+0x34>)
 8002658:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800265a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800265c:	4a05      	ldr	r2, [pc, #20]	; (8002674 <_sbrk+0x34>)
 800265e:	4906      	ldr	r1, [pc, #24]	; (8002678 <_sbrk+0x38>)
 8002660:	6011      	str	r1, [r2, #0]
 8002662:	e7f2      	b.n	800264a <_sbrk+0xa>
		errno = ENOMEM;
 8002664:	f007 f98c 	bl	8009980 <__errno>
 8002668:	230c      	movs	r3, #12
 800266a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	e7f3      	b.n	800265a <_sbrk+0x1a>
 8002672:	bf00      	nop
 8002674:	200009a8 	.word	0x200009a8
 8002678:	20000ed8 	.word	0x20000ed8

0800267c <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* Reset the RCC clock configuration to the default reset state(for debug purpose) */
	/* Set HSION bit */
	RCC->CR |= 0x00000001U;
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <SystemInit+0x40>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
	RCC->CFGR &= 0xF8FF0000U;
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <SystemInit+0x44>)
 800268a:	400a      	ands	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
#else
	RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= 0xFEF6FFFFU;
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002694:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002698:	601a      	str	r2, [r3, #0]

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026a0:	601a      	str	r2, [r3, #0]

	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
	RCC->CFGR &= 0xFF80FFFFU;
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80026a8:	605a      	str	r2, [r3, #4]

	/* Reset CFGR2 register */
	RCC->CFGR2 = 0x00000000U;
#else
	/* Disable all interrupts and clear pending bits  */
	RCC->CIR = 0x009F0000U;
 80026aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80026ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SystemInit+0x48>)
 80026b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	f8ff0000 	.word	0xf8ff0000
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 80026c8:	6802      	ldr	r2, [r0, #0]
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <HAL_TIM_Base_MspInit+0x60>)
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d000      	beq.n	80026d2 <HAL_TIM_Base_MspInit+0xa>
 80026d0:	4770      	bx	lr
{
 80026d2:	b510      	push	{r4, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026d8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	f042 0204 	orr.w	r2, r2, #4
 80026e2:	61da      	str	r2, [r3, #28]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	9b01      	ldr	r3, [sp, #4]

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 80026ee:	480f      	ldr	r0, [pc, #60]	; (800272c <HAL_TIM_Base_MspInit+0x64>)
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_TIM_Base_MspInit+0x68>)
 80026f2:	6003      	str	r3, [r0, #0]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026f4:	2310      	movs	r3, #16
 80026f6:	6043      	str	r3, [r0, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	6083      	str	r3, [r0, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	60c2      	str	r2, [r0, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002704:	6102      	str	r2, [r0, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002706:	6143      	str	r3, [r0, #20]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8002708:	2320      	movs	r3, #32
 800270a:	6183      	str	r3, [r0, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800270c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002710:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8002712:	f001 fcb1 	bl	8004078 <HAL_DMA_Init>
 8002716:	b920      	cbnz	r0, 8002722 <HAL_TIM_Base_MspInit+0x5a>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <HAL_TIM_Base_MspInit+0x64>)
 800271a:	62a3      	str	r3, [r4, #40]	; 0x28
 800271c:	625c      	str	r4, [r3, #36]	; 0x24

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800271e:	b002      	add	sp, #8
 8002720:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002722:	f7fe ffe3 	bl	80016ec <Error_Handler>
 8002726:	e7f7      	b.n	8002718 <HAL_TIM_Base_MspInit+0x50>
 8002728:	40000800 	.word	0x40000800
 800272c:	20000ba8 	.word	0x20000ba8
 8002730:	40020044 	.word	0x40020044

08002734 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002734:	b500      	push	{lr}
 8002736:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	2300      	movs	r3, #0
 800273a:	9302      	str	r3, [sp, #8]
 800273c:	9303      	str	r3, [sp, #12]
 800273e:	9304      	str	r3, [sp, #16]
 8002740:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 8002742:	6802      	ldr	r2, [r0, #0]
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_TIM_MspPostInit+0x48>)
 8002746:	429a      	cmp	r2, r3
 8002748:	d002      	beq.n	8002750 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800274a:	b007      	add	sp, #28
 800274c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002750:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	f042 0208 	orr.w	r2, r2, #8
 800275a:	619a      	str	r2, [r3, #24]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CH5_Pin;
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
 8002770:	a902      	add	r1, sp, #8
 8002772:	4803      	ldr	r0, [pc, #12]	; (8002780 <HAL_TIM_MspPostInit+0x4c>)
 8002774:	f001 fe62 	bl	800443c <HAL_GPIO_Init>
}
 8002778:	e7e7      	b.n	800274a <HAL_TIM_MspPostInit+0x16>
 800277a:	bf00      	nop
 800277c:	40000800 	.word	0x40000800
 8002780:	40010c00 	.word	0x40010c00

08002784 <MX_TIM4_Init>:
{
 8002784:	b500      	push	{lr}
 8002786:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002788:	2300      	movs	r3, #0
 800278a:	930a      	str	r3, [sp, #40]	; 0x28
 800278c:	930b      	str	r3, [sp, #44]	; 0x2c
 800278e:	930c      	str	r3, [sp, #48]	; 0x30
 8002790:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002792:	9308      	str	r3, [sp, #32]
 8002794:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	9303      	str	r3, [sp, #12]
 800279c:	9304      	str	r3, [sp, #16]
 800279e:	9305      	str	r3, [sp, #20]
 80027a0:	9306      	str	r3, [sp, #24]
 80027a2:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80027a4:	4821      	ldr	r0, [pc, #132]	; (800282c <MX_TIM4_Init+0xa8>)
 80027a6:	4a22      	ldr	r2, [pc, #136]	; (8002830 <MX_TIM4_Init+0xac>)
 80027a8:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 80027aa:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ac:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 89;
 80027ae:	2259      	movs	r2, #89	; 0x59
 80027b0:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b2:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027b6:	f003 fc67 	bl	8006088 <HAL_TIM_Base_Init>
 80027ba:	bb38      	cbnz	r0, 800280c <MX_TIM4_Init+0x88>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027bc:	a90e      	add	r1, sp, #56	; 0x38
 80027be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c2:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027c6:	4819      	ldr	r0, [pc, #100]	; (800282c <MX_TIM4_Init+0xa8>)
 80027c8:	f003 fe5e 	bl	8006488 <HAL_TIM_ConfigClockSource>
 80027cc:	bb08      	cbnz	r0, 8002812 <MX_TIM4_Init+0x8e>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027ce:	4817      	ldr	r0, [pc, #92]	; (800282c <MX_TIM4_Init+0xa8>)
 80027d0:	f003 fcb2 	bl	8006138 <HAL_TIM_PWM_Init>
 80027d4:	bb00      	cbnz	r0, 8002818 <MX_TIM4_Init+0x94>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027da:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027dc:	a908      	add	r1, sp, #32
 80027de:	4813      	ldr	r0, [pc, #76]	; (800282c <MX_TIM4_Init+0xa8>)
 80027e0:	f004 f9be 	bl	8006b60 <HAL_TIMEx_MasterConfigSynchronization>
 80027e4:	b9d8      	cbnz	r0, 800281e <MX_TIM4_Init+0x9a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e6:	2360      	movs	r3, #96	; 0x60
 80027e8:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ee:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80027f0:	2204      	movs	r2, #4
 80027f2:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027f4:	eb0d 0102 	add.w	r1, sp, r2
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <MX_TIM4_Init+0xa8>)
 80027fa:	f003 fd47 	bl	800628c <HAL_TIM_PWM_ConfigChannel>
 80027fe:	b988      	cbnz	r0, 8002824 <MX_TIM4_Init+0xa0>
  HAL_TIM_MspPostInit(&htim4);
 8002800:	480a      	ldr	r0, [pc, #40]	; (800282c <MX_TIM4_Init+0xa8>)
 8002802:	f7ff ff97 	bl	8002734 <HAL_TIM_MspPostInit>
}
 8002806:	b00f      	add	sp, #60	; 0x3c
 8002808:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800280c:	f7fe ff6e 	bl	80016ec <Error_Handler>
 8002810:	e7d4      	b.n	80027bc <MX_TIM4_Init+0x38>
    Error_Handler();
 8002812:	f7fe ff6b 	bl	80016ec <Error_Handler>
 8002816:	e7da      	b.n	80027ce <MX_TIM4_Init+0x4a>
    Error_Handler();
 8002818:	f7fe ff68 	bl	80016ec <Error_Handler>
 800281c:	e7db      	b.n	80027d6 <MX_TIM4_Init+0x52>
    Error_Handler();
 800281e:	f7fe ff65 	bl	80016ec <Error_Handler>
 8002822:	e7e0      	b.n	80027e6 <MX_TIM4_Init+0x62>
    Error_Handler();
 8002824:	f7fe ff62 	bl	80016ec <Error_Handler>
 8002828:	e7ea      	b.n	8002800 <MX_TIM4_Init+0x7c>
 800282a:	bf00      	nop
 800282c:	20000bec 	.word	0x20000bec
 8002830:	40000800 	.word	0x40000800

08002834 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002834:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8002836:	480a      	ldr	r0, [pc, #40]	; (8002860 <MX_USART1_UART_Init+0x2c>)
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <MX_USART1_UART_Init+0x30>)
 800283a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800283c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002840:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002842:	2300      	movs	r3, #0
 8002844:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002846:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002848:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800284a:	220c      	movs	r2, #12
 800284c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002850:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002852:	f004 fa97 	bl	8006d84 <HAL_UART_Init>
 8002856:	b900      	cbnz	r0, 800285a <MX_USART1_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8002858:	bd08      	pop	{r3, pc}
    Error_Handler();
 800285a:	f7fe ff47 	bl	80016ec <Error_Handler>
}
 800285e:	e7fb      	b.n	8002858 <MX_USART1_UART_Init+0x24>
 8002860:	20000c2c 	.word	0x20000c2c
 8002864:	40013800 	.word	0x40013800

08002868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002868:	b510      	push	{r4, lr}
 800286a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	2300      	movs	r3, #0
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	9303      	str	r3, [sp, #12]
 8002872:	9304      	str	r3, [sp, #16]
 8002874:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 8002876:	6802      	ldr	r2, [r0, #0]
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_UART_MspInit+0x70>)
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_UART_MspInit+0x1a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800287e:	b006      	add	sp, #24
 8002880:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002882:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800288c:	619a      	str	r2, [r3, #24]
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002894:	9200      	str	r2, [sp, #0]
 8002896:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	f042 0204 	orr.w	r2, r2, #4
 800289e:	619a      	str	r2, [r3, #24]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	4c08      	ldr	r4, [pc, #32]	; (80028dc <HAL_UART_MspInit+0x74>)
 80028ba:	a902      	add	r1, sp, #8
 80028bc:	4620      	mov	r0, r4
 80028be:	f001 fdbd 	bl	800443c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c8:	2300      	movs	r3, #0
 80028ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ce:	a902      	add	r1, sp, #8
 80028d0:	4620      	mov	r0, r4
 80028d2:	f001 fdb3 	bl	800443c <HAL_GPIO_Init>
}
 80028d6:	e7d2      	b.n	800287e <HAL_UART_MspInit+0x16>
 80028d8:	40013800 	.word	0x40013800
 80028dc:	40010800 	.word	0x40010800

080028e0 <SPI_TxByte>:
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
}

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80028e0:	b510      	push	{r4, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	f88d 0007 	strb.w	r0, [sp, #7]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80028e8:	4c07      	ldr	r4, [pc, #28]	; (8002908 <SPI_TxByte+0x28>)
 80028ea:	4620      	mov	r0, r4
 80028ec:	f003 fa61 	bl	8005db2 <HAL_SPI_GetState>
 80028f0:	2801      	cmp	r0, #1
 80028f2:	d1fa      	bne.n	80028ea <SPI_TxByte+0xa>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80028f4:	2364      	movs	r3, #100	; 0x64
 80028f6:	2201      	movs	r2, #1
 80028f8:	f10d 0107 	add.w	r1, sp, #7
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <SPI_TxByte+0x28>)
 80028fe:	f002 ff1b 	bl	8005738 <HAL_SPI_Transmit>
}
 8002902:	b002      	add	sp, #8
 8002904:	bd10      	pop	{r4, pc}
 8002906:	bf00      	nop
 8002908:	20000ac8 	.word	0x20000ac8

0800290c <SELECT>:
{
 800290c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	2110      	movs	r1, #16
 8002912:	4802      	ldr	r0, [pc, #8]	; (800291c <SELECT+0x10>)
 8002914:	f001 ff16 	bl	8004744 <HAL_GPIO_WritePin>
}
 8002918:	bd08      	pop	{r3, pc}
 800291a:	bf00      	nop
 800291c:	40010800 	.word	0x40010800

08002920 <DESELECT>:
{
 8002920:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002922:	2201      	movs	r2, #1
 8002924:	2110      	movs	r1, #16
 8002926:	4802      	ldr	r0, [pc, #8]	; (8002930 <DESELECT+0x10>)
 8002928:	f001 ff0c 	bl	8004744 <HAL_GPIO_WritePin>
}
 800292c:	bd08      	pop	{r3, pc}
 800292e:	bf00      	nop
 8002930:	40010800 	.word	0x40010800

08002934 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8002934:	b510      	push	{r4, lr}
 8002936:	b084      	sub	sp, #16
  uint8_t dummy, data;
  dummy = 0xFF;
 8002938:	23ff      	movs	r3, #255	; 0xff
 800293a:	f88d 300f 	strb.w	r3, [sp, #15]
  data = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	f88d 300e 	strb.w	r3, [sp, #14]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002944:	4c09      	ldr	r4, [pc, #36]	; (800296c <SPI_RxByte+0x38>)
 8002946:	4620      	mov	r0, r4
 8002948:	f003 fa33 	bl	8005db2 <HAL_SPI_GetState>
 800294c:	2801      	cmp	r0, #1
 800294e:	d1fa      	bne.n	8002946 <SPI_RxByte+0x12>
 HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002950:	2364      	movs	r3, #100	; 0x64
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2301      	movs	r3, #1
 8002956:	f10d 020e 	add.w	r2, sp, #14
 800295a:	f10d 010f 	add.w	r1, sp, #15
 800295e:	4803      	ldr	r0, [pc, #12]	; (800296c <SPI_RxByte+0x38>)
 8002960:	f002 ffc2 	bl	80058e8 <HAL_SPI_TransmitReceive>

  return data;
}
 8002964:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8002968:	b004      	add	sp, #16
 800296a:	bd10      	pop	{r4, pc}
 800296c:	20000ac8 	.word	0x20000ac8

08002970 <SD_PowerOn>:
  return res;
}

/*Power on*/
static void SD_PowerOn(void)
{
 8002970:	b530      	push	{r4, r5, lr}
 8002972:	b083      	sub	sp, #12
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;


  DESELECT();
 8002974:	f7ff ffd4 	bl	8002920 <DESELECT>
 8002978:	240a      	movs	r4, #10

  for(int i = 0; i < 10; i++)
  {
    SPI_TxByte(0xFF);
 800297a:	25ff      	movs	r5, #255	; 0xff
 800297c:	4628      	mov	r0, r5
 800297e:	f7ff ffaf 	bl	80028e0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002982:	3c01      	subs	r4, #1
 8002984:	d1fa      	bne.n	800297c <SD_PowerOn+0xc>
  }

  /* SPI Chips Select */
  SELECT();
 8002986:	f7ff ffc1 	bl	800290c <SELECT>

  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800298a:	2340      	movs	r3, #64	; 0x40
 800298c:	f88d 3000 	strb.w	r3, [sp]
  cmd_arg[1] = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	f88d 3001 	strb.w	r3, [sp, #1]
  cmd_arg[2] = 0;
 8002996:	f88d 3002 	strb.w	r3, [sp, #2]
  cmd_arg[3] = 0;
 800299a:	f88d 3003 	strb.w	r3, [sp, #3]
  cmd_arg[4] = 0;
 800299e:	f88d 3004 	strb.w	r3, [sp, #4]
  cmd_arg[5] = 0x95;
 80029a2:	2395      	movs	r3, #149	; 0x95
 80029a4:	f88d 3005 	strb.w	r3, [sp, #5]
 80029a8:	466c      	mov	r4, sp
 80029aa:	f10d 0506 	add.w	r5, sp, #6

  /* Command transmission*/
  for (int i = 0; i < 6; i++)
  {
    SPI_TxByte(cmd_arg[i]);
 80029ae:	f814 0b01 	ldrb.w	r0, [r4], #1
 80029b2:	f7ff ff95 	bl	80028e0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80029b6:	42ac      	cmp	r4, r5
 80029b8:	d1f9      	bne.n	80029ae <SD_PowerOn+0x3e>
 80029ba:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  }

  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80029be:	f7ff ffb9 	bl	8002934 <SPI_RxByte>
 80029c2:	2801      	cmp	r0, #1
 80029c4:	d001      	beq.n	80029ca <SD_PowerOn+0x5a>
 80029c6:	3c01      	subs	r4, #1
 80029c8:	d1f9      	bne.n	80029be <SD_PowerOn+0x4e>
  {
    Count--;
  }

  DESELECT();
 80029ca:	f7ff ffa9 	bl	8002920 <DESELECT>
  SPI_TxByte(0XFF);
 80029ce:	20ff      	movs	r0, #255	; 0xff
 80029d0:	f7ff ff86 	bl	80028e0 <SPI_TxByte>

  PowerFlag = 1;
 80029d4:	4b02      	ldr	r3, [pc, #8]	; (80029e0 <SD_PowerOn+0x70>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
}
 80029da:	b003      	add	sp, #12
 80029dc:	bd30      	pop	{r4, r5, pc}
 80029de:	bf00      	nop
 80029e0:	200009ae 	.word	0x200009ae

080029e4 <SD_ReadyWait>:
{
 80029e4:	b510      	push	{r4, lr}
  Timer2 = 50;
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <SD_ReadyWait+0x20>)
 80029e8:	2232      	movs	r2, #50	; 0x32
 80029ea:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80029ec:	f7ff ffa2 	bl	8002934 <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 80029f0:	4c04      	ldr	r4, [pc, #16]	; (8002a04 <SD_ReadyWait+0x20>)
    res = SPI_RxByte();
 80029f2:	f7ff ff9f 	bl	8002934 <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 80029f6:	28ff      	cmp	r0, #255	; 0xff
 80029f8:	d002      	beq.n	8002a00 <SD_ReadyWait+0x1c>
 80029fa:	7823      	ldrb	r3, [r4, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f8      	bne.n	80029f2 <SD_ReadyWait+0xe>
}
 8002a00:	bd10      	pop	{r4, pc}
 8002a02:	bf00      	nop
 8002a04:	200009b0 	.word	0x200009b0

08002a08 <SD_SendCmd>:
}
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8002a08:	b538      	push	{r3, r4, r5, lr}
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	460c      	mov	r4, r1
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002a0e:	f7ff ffe9 	bl	80029e4 <SD_ReadyWait>
 8002a12:	28ff      	cmp	r0, #255	; 0xff
 8002a14:	d001      	beq.n	8002a1a <SD_SendCmd+0x12>
    return 0xFF;
 8002a16:	20ff      	movs	r0, #255	; 0xff
  {
    res = SPI_RxByte();
  } while ((res & 0x80) && --n);

  return res;
}
 8002a18:	bd38      	pop	{r3, r4, r5, pc}
  SPI_TxByte(cmd); 			/* Command */
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f7ff ff60 	bl	80028e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002a20:	0e20      	lsrs	r0, r4, #24
 8002a22:	f7ff ff5d 	bl	80028e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002a26:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8002a2a:	f7ff ff59 	bl	80028e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002a2e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8002a32:	f7ff ff55 	bl	80028e0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002a36:	b2e0      	uxtb	r0, r4
 8002a38:	f7ff ff52 	bl	80028e0 <SPI_TxByte>
  if (cmd == CMD0)
 8002a3c:	2d40      	cmp	r5, #64	; 0x40
 8002a3e:	d00d      	beq.n	8002a5c <SD_SendCmd+0x54>
  if (cmd == CMD8)
 8002a40:	2d48      	cmp	r5, #72	; 0x48
 8002a42:	d103      	bne.n	8002a4c <SD_SendCmd+0x44>
  SPI_TxByte(crc);
 8002a44:	2087      	movs	r0, #135	; 0x87
 8002a46:	f7ff ff4b 	bl	80028e0 <SPI_TxByte>
 8002a4a:	e00a      	b.n	8002a62 <SD_SendCmd+0x5a>
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7ff ff47 	bl	80028e0 <SPI_TxByte>
  if (cmd == CMD12)
 8002a52:	2d4c      	cmp	r5, #76	; 0x4c
 8002a54:	d105      	bne.n	8002a62 <SD_SendCmd+0x5a>
    SPI_RxByte();
 8002a56:	f7ff ff6d 	bl	8002934 <SPI_RxByte>
 8002a5a:	e002      	b.n	8002a62 <SD_SendCmd+0x5a>
  SPI_TxByte(crc);
 8002a5c:	2095      	movs	r0, #149	; 0x95
 8002a5e:	f7ff ff3f 	bl	80028e0 <SPI_TxByte>
{
 8002a62:	240a      	movs	r4, #10
    res = SPI_RxByte();
 8002a64:	f7ff ff66 	bl	8002934 <SPI_RxByte>
  } while ((res & 0x80) && --n);
 8002a68:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a6c:	d0d4      	beq.n	8002a18 <SD_SendCmd+0x10>
 8002a6e:	1e63      	subs	r3, r4, #1
 8002a70:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8002a74:	d1f6      	bne.n	8002a64 <SD_SendCmd+0x5c>
 8002a76:	e7cf      	b.n	8002a18 <SD_SendCmd+0x10>

08002a78 <SD_TxDataBlock>:
{
 8002a78:	b538      	push	{r3, r4, r5, lr}
 8002a7a:	4605      	mov	r5, r0
 8002a7c:	460c      	mov	r4, r1
  if (SD_ReadyWait() != 0xFF)
 8002a7e:	f7ff ffb1 	bl	80029e4 <SD_ReadyWait>
 8002a82:	28ff      	cmp	r0, #255	; 0xff
 8002a84:	d001      	beq.n	8002a8a <SD_TxDataBlock+0x12>
    return FALSE;
 8002a86:	2000      	movs	r0, #0
}
 8002a88:	bd38      	pop	{r3, r4, r5, pc}
  SPI_TxByte(token);
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7ff ff28 	bl	80028e0 <SPI_TxByte>
  if (token != 0xFD)
 8002a90:	2cfd      	cmp	r4, #253	; 0xfd
 8002a92:	d028      	beq.n	8002ae6 <SD_TxDataBlock+0x6e>
 8002a94:	1cac      	adds	r4, r5, #2
 8002a96:	f205 2502 	addw	r5, r5, #514	; 0x202
      SPI_TxByte(*buff++);
 8002a9a:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8002a9e:	f7ff ff1f 	bl	80028e0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8002aa2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 8002aa6:	f7ff ff1b 	bl	80028e0 <SPI_TxByte>
 8002aaa:	3402      	adds	r4, #2
    } while (--wc);
 8002aac:	42ac      	cmp	r4, r5
 8002aae:	d1f4      	bne.n	8002a9a <SD_TxDataBlock+0x22>
    SPI_RxByte();       /* CRC 무시 */
 8002ab0:	f7ff ff40 	bl	8002934 <SPI_RxByte>
    SPI_RxByte();
 8002ab4:	f7ff ff3e 	bl	8002934 <SPI_RxByte>
 8002ab8:	2441      	movs	r4, #65	; 0x41
      respon = SPI_RxByte();
 8002aba:	f7ff ff3b 	bl	8002934 <SPI_RxByte>
 8002abe:	4605      	mov	r5, r0
      if ((respon & 0x1F) == 0x05)
 8002ac0:	f000 031f 	and.w	r3, r0, #31
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d003      	beq.n	8002ad0 <SD_TxDataBlock+0x58>
 8002ac8:	1e63      	subs	r3, r4, #1
    while (i <= 64)
 8002aca:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8002ace:	d1f4      	bne.n	8002aba <SD_TxDataBlock+0x42>
    while (SPI_RxByte() == 0);
 8002ad0:	f7ff ff30 	bl	8002934 <SPI_RxByte>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d0fb      	beq.n	8002ad0 <SD_TxDataBlock+0x58>
  if ((respon & 0x1F) == 0x05)
 8002ad8:	f005 001f 	and.w	r0, r5, #31
    return FALSE;
 8002adc:	2805      	cmp	r0, #5
 8002ade:	bf14      	ite	ne
 8002ae0:	2000      	movne	r0, #0
 8002ae2:	2001      	moveq	r0, #1
 8002ae4:	e7d0      	b.n	8002a88 <SD_TxDataBlock+0x10>
  uint8_t respon = 0, wc = 0;
 8002ae6:	2500      	movs	r5, #0
 8002ae8:	e7f6      	b.n	8002ad8 <SD_TxDataBlock+0x60>
	...

08002aec <SD_RxDataBlock>:
{
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	4605      	mov	r5, r0
 8002af2:	460e      	mov	r6, r1
  Timer1 = 10;
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <SD_RxDataBlock+0x58>)
 8002af6:	220a      	movs	r2, #10
 8002af8:	701a      	strb	r2, [r3, #0]
  } while((token == 0xFF) && Timer1);
 8002afa:	461c      	mov	r4, r3
    token = SPI_RxByte();
 8002afc:	f7ff ff1a 	bl	8002934 <SPI_RxByte>
  } while((token == 0xFF) && Timer1);
 8002b00:	28ff      	cmp	r0, #255	; 0xff
 8002b02:	d105      	bne.n	8002b10 <SD_RxDataBlock+0x24>
 8002b04:	7823      	ldrb	r3, [r4, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f8      	bne.n	8002afc <SD_RxDataBlock+0x10>
    return FALSE;
 8002b0a:	2000      	movs	r0, #0
}
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
  if(token != 0xFE)
 8002b10:	28fe      	cmp	r0, #254	; 0xfe
 8002b12:	d115      	bne.n	8002b40 <SD_RxDataBlock+0x54>
	uint8_t dummy=0xFF;
 8002b14:	23ff      	movs	r3, #255	; 0xff
 8002b16:	f88d 3007 	strb.w	r3, [sp, #7]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002b1a:	4c0b      	ldr	r4, [pc, #44]	; (8002b48 <SD_RxDataBlock+0x5c>)
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f003 f948 	bl	8005db2 <HAL_SPI_GetState>
 8002b22:	2801      	cmp	r0, #1
 8002b24:	d1fa      	bne.n	8002b1c <SD_RxDataBlock+0x30>
	HAL_SPI_TransmitReceive_DMA(&hspi1, &dummy, buff, btr);
 8002b26:	b2b3      	uxth	r3, r6
 8002b28:	462a      	mov	r2, r5
 8002b2a:	f10d 0107 	add.w	r1, sp, #7
 8002b2e:	4806      	ldr	r0, [pc, #24]	; (8002b48 <SD_RxDataBlock+0x5c>)
 8002b30:	f003 f802 	bl	8005b38 <HAL_SPI_TransmitReceive_DMA>
  SPI_RxByte(); /* CRC 무시 */
 8002b34:	f7ff fefe 	bl	8002934 <SPI_RxByte>
  SPI_RxByte();
 8002b38:	f7ff fefc 	bl	8002934 <SPI_RxByte>
  return TRUE;
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	e7e5      	b.n	8002b0c <SD_RxDataBlock+0x20>
    return FALSE;
 8002b40:	2000      	movs	r0, #0
 8002b42:	e7e3      	b.n	8002b0c <SD_RxDataBlock+0x20>
 8002b44:	200009af 	.word	0x200009af
 8002b48:	20000ac8 	.word	0x20000ac8

08002b4c <SD_1msTick>:
	FatFsCnt++;
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <SD_1msTick+0x3c>)
 8002b4e:	7813      	ldrb	r3, [r2, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	7013      	strb	r3, [r2, #0]
	if(FatFsCnt >= 10)
 8002b56:	7813      	ldrb	r3, [r2, #0]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b09      	cmp	r3, #9
 8002b5c:	d912      	bls.n	8002b84 <SD_1msTick+0x38>
		FatFsCnt = 0;
 8002b5e:	4613      	mov	r3, r2
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
		if(Timer1 > 0) Timer1--;
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <SD_1msTick+0x40>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b123      	cbz	r3, 8002b74 <SD_1msTick+0x28>
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <SD_1msTick+0x40>)
 8002b6c:	7813      	ldrb	r3, [r2, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	7013      	strb	r3, [r2, #0]
		if(Timer2 > 0) Timer2--;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <SD_1msTick+0x44>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b123      	cbz	r3, 8002b84 <SD_1msTick+0x38>
 8002b7a:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <SD_1msTick+0x44>)
 8002b7c:	7813      	ldrb	r3, [r2, #0]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	7013      	strb	r3, [r2, #0]
}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	200009ad 	.word	0x200009ad
 8002b8c:	200009af 	.word	0x200009af
 8002b90:	200009b0 	.word	0x200009b0

08002b94 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002b94:	2800      	cmp	r0, #0
 8002b96:	f040 80bc 	bne.w	8002d12 <SD_disk_initialize+0x17e>
    return STA_NOINIT;

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002b9a:	4b5f      	ldr	r3, [pc, #380]	; (8002d18 <SD_disk_initialize+0x184>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	f013 0f02 	tst.w	r3, #2
 8002ba2:	d003      	beq.n	8002bac <SD_disk_initialize+0x18>
    return Stat;
 8002ba4:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <SD_disk_initialize+0x184>)
 8002ba6:	7818      	ldrb	r0, [r3, #0]
 8002ba8:	b2c0      	uxtb	r0, r0
 8002baa:	4770      	bx	lr
{
 8002bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb0:	b082      	sub	sp, #8

  /* SD카드 Power On */
  SD_PowerOn();
 8002bb2:	f7ff fedd 	bl	8002970 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8002bb6:	f7ff fea9 	bl	800290c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2040      	movs	r0, #64	; 0x40
 8002bbe:	f7ff ff23 	bl	8002a08 <SD_SendCmd>
 8002bc2:	2801      	cmp	r0, #1
 8002bc4:	d00a      	beq.n	8002bdc <SD_disk_initialize+0x48>
        type = 0;
      }
    }
  }

  CardType = type;
 8002bc6:	4b55      	ldr	r3, [pc, #340]	; (8002d1c <SD_disk_initialize+0x188>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]

  DESELECT();
 8002bcc:	f7ff fea8 	bl	8002920 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002bd0:	f7ff feb0 	bl	8002934 <SPI_RxByte>
  PowerFlag = 0;
 8002bd4:	4b52      	ldr	r3, [pc, #328]	; (8002d20 <SD_disk_initialize+0x18c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e08d      	b.n	8002cf8 <SD_disk_initialize+0x164>
    Timer1 = 100;
 8002bdc:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <SD_disk_initialize+0x190>)
 8002bde:	2264      	movs	r2, #100	; 0x64
 8002be0:	701a      	strb	r2, [r3, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002be2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002be6:	2048      	movs	r0, #72	; 0x48
 8002be8:	f7ff ff0e 	bl	8002a08 <SD_SendCmd>
 8002bec:	2801      	cmp	r0, #1
 8002bee:	d144      	bne.n	8002c7a <SD_disk_initialize+0xe6>
 8002bf0:	ae01      	add	r6, sp, #4
 8002bf2:	ad02      	add	r5, sp, #8
 8002bf4:	4634      	mov	r4, r6
        ocr[n] = SPI_RxByte();
 8002bf6:	f7ff fe9d 	bl	8002934 <SPI_RxByte>
 8002bfa:	f804 0b01 	strb.w	r0, [r4], #1
      for (n = 0; n < 4; n++)
 8002bfe:	42ac      	cmp	r4, r5
 8002c00:	d1f9      	bne.n	8002bf6 <SD_disk_initialize+0x62>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002c02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d1dd      	bne.n	8002bc6 <SD_disk_initialize+0x32>
 8002c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c0e:	2baa      	cmp	r3, #170	; 0xaa
 8002c10:	d1d9      	bne.n	8002bc6 <SD_disk_initialize+0x32>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002c12:	2700      	movs	r7, #0
 8002c14:	2577      	movs	r5, #119	; 0x77
        } while (Timer1);
 8002c16:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002d24 <SD_disk_initialize+0x190>
 8002c1a:	e002      	b.n	8002c22 <SD_disk_initialize+0x8e>
 8002c1c:	f898 3000 	ldrb.w	r3, [r8]
 8002c20:	b163      	cbz	r3, 8002c3c <SD_disk_initialize+0xa8>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002c22:	4639      	mov	r1, r7
 8002c24:	4628      	mov	r0, r5
 8002c26:	f7ff feef 	bl	8002a08 <SD_SendCmd>
 8002c2a:	2801      	cmp	r0, #1
 8002c2c:	d8f6      	bhi.n	8002c1c <SD_disk_initialize+0x88>
 8002c2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c32:	2069      	movs	r0, #105	; 0x69
 8002c34:	f7ff fee8 	bl	8002a08 <SD_SendCmd>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d1ef      	bne.n	8002c1c <SD_disk_initialize+0x88>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002c3c:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <SD_disk_initialize+0x190>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0c0      	beq.n	8002bc6 <SD_disk_initialize+0x32>
 8002c44:	2100      	movs	r1, #0
 8002c46:	207a      	movs	r0, #122	; 0x7a
 8002c48:	f7ff fede 	bl	8002a08 <SD_SendCmd>
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d1ba      	bne.n	8002bc6 <SD_disk_initialize+0x32>
            ocr[n] = SPI_RxByte();
 8002c50:	f7ff fe70 	bl	8002934 <SPI_RxByte>
 8002c54:	f806 0b01 	strb.w	r0, [r6], #1
          for (n = 0; n < 4; n++)
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d1f9      	bne.n	8002c50 <SD_disk_initialize+0xbc>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002c5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2206      	movne	r2, #6
 8002c6a:	2202      	moveq	r2, #2
  CardType = type;
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <SD_disk_initialize+0x188>)
 8002c6e:	701a      	strb	r2, [r3, #0]
  DESELECT();
 8002c70:	f7ff fe56 	bl	8002920 <DESELECT>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002c74:	f7ff fe5e 	bl	8002934 <SPI_RxByte>
 8002c78:	e039      	b.n	8002cee <SD_disk_initialize+0x15a>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	2077      	movs	r0, #119	; 0x77
 8002c7e:	f7ff fec3 	bl	8002a08 <SD_SendCmd>
 8002c82:	2801      	cmp	r0, #1
 8002c84:	d904      	bls.n	8002c90 <SD_disk_initialize+0xfc>
 8002c86:	2501      	movs	r5, #1
          if (SD_SendCmd(CMD1, 0) == 0)
 8002c88:	2400      	movs	r4, #0
 8002c8a:	2741      	movs	r7, #65	; 0x41
      } while (Timer1);
 8002c8c:	4e25      	ldr	r6, [pc, #148]	; (8002d24 <SD_disk_initialize+0x190>)
 8002c8e:	e010      	b.n	8002cb2 <SD_disk_initialize+0x11e>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002c90:	2100      	movs	r1, #0
 8002c92:	2069      	movs	r0, #105	; 0x69
 8002c94:	f7ff feb8 	bl	8002a08 <SD_SendCmd>
 8002c98:	2802      	cmp	r0, #2
 8002c9a:	bf34      	ite	cc
 8002c9c:	2502      	movcc	r5, #2
 8002c9e:	2501      	movcs	r5, #1
 8002ca0:	e7f2      	b.n	8002c88 <SD_disk_initialize+0xf4>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	2077      	movs	r0, #119	; 0x77
 8002ca6:	f7ff feaf 	bl	8002a08 <SD_SendCmd>
 8002caa:	2801      	cmp	r0, #1
 8002cac:	d92a      	bls.n	8002d04 <SD_disk_initialize+0x170>
      } while (Timer1);
 8002cae:	7833      	ldrb	r3, [r6, #0]
 8002cb0:	b13b      	cbz	r3, 8002cc2 <SD_disk_initialize+0x12e>
        if (type == 2)
 8002cb2:	2d02      	cmp	r5, #2
 8002cb4:	d0f5      	beq.n	8002ca2 <SD_disk_initialize+0x10e>
          if (SD_SendCmd(CMD1, 0) == 0)
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	4638      	mov	r0, r7
 8002cba:	f7ff fea5 	bl	8002a08 <SD_SendCmd>
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	d1f5      	bne.n	8002cae <SD_disk_initialize+0x11a>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <SD_disk_initialize+0x190>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f43f af7d 	beq.w	8002bc6 <SD_disk_initialize+0x32>
 8002ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cd0:	2050      	movs	r0, #80	; 0x50
 8002cd2:	f7ff fe99 	bl	8002a08 <SD_SendCmd>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	f47f af75 	bne.w	8002bc6 <SD_disk_initialize+0x32>
  CardType = type;
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <SD_disk_initialize+0x188>)
 8002cde:	701d      	strb	r5, [r3, #0]
  DESELECT();
 8002ce0:	f7ff fe1e 	bl	8002920 <DESELECT>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002ce4:	f7ff fe26 	bl	8002934 <SPI_RxByte>

  if (type)
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	f43f af73 	beq.w	8002bd4 <SD_disk_initialize+0x40>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <SD_disk_initialize+0x184>)
 8002cf0:	7813      	ldrb	r3, [r2, #0]
 8002cf2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002cf6:	7013      	strb	r3, [r2, #0]
  {
    /* Initialization failed */
    SD_PowerOff();
  }

  return Stat;
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <SD_disk_initialize+0x184>)
 8002cfa:	7818      	ldrb	r0, [r3, #0]
 8002cfc:	b2c0      	uxtb	r0, r0
}
 8002cfe:	b002      	add	sp, #8
 8002d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002d04:	4621      	mov	r1, r4
 8002d06:	2069      	movs	r0, #105	; 0x69
 8002d08:	f7ff fe7e 	bl	8002a08 <SD_SendCmd>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d1ce      	bne.n	8002cae <SD_disk_initialize+0x11a>
 8002d10:	e7d7      	b.n	8002cc2 <SD_disk_initialize+0x12e>
    return STA_NOINIT;
 8002d12:	2001      	movs	r0, #1
}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	2000002c 	.word	0x2000002c
 8002d1c:	200009ac 	.word	0x200009ac
 8002d20:	200009ae 	.word	0x200009ae
 8002d24:	200009af 	.word	0x200009af

08002d28 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
  if (drv)
 8002d28:	b918      	cbnz	r0, 8002d32 <SD_disk_status+0xa>
    return STA_NOINIT;

  return Stat;
 8002d2a:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <SD_disk_status+0x10>)
 8002d2c:	7818      	ldrb	r0, [r3, #0]
 8002d2e:	b2c0      	uxtb	r0, r0
 8002d30:	4770      	bx	lr
    return STA_NOINIT;
 8002d32:	2001      	movs	r0, #1
}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	2000002c 	.word	0x2000002c

08002d3c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
  if (pdrv || !count)
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d13f      	bne.n	8002dc0 <SD_disk_read+0x84>
{
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	460d      	mov	r5, r1
 8002d44:	4616      	mov	r6, r2
 8002d46:	461c      	mov	r4, r3
  if (pdrv || !count)
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03b      	beq.n	8002dc4 <SD_disk_read+0x88>
    return RES_PARERR;

  if (Stat & STA_NOINIT)
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <SD_disk_read+0x90>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	f013 0f01 	tst.w	r3, #1
 8002d54:	d138      	bne.n	8002dc8 <SD_disk_read+0x8c>
    return RES_NOTRDY;

  if (!(CardType & 4))
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <SD_disk_read+0x94>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	f013 0f04 	tst.w	r3, #4
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002d5e:	bf08      	it	eq
 8002d60:	0256      	lsleq	r6, r2, #9

  SELECT();
 8002d62:	f7ff fdd3 	bl	800290c <SELECT>

  if (count == 1)
 8002d66:	2c01      	cmp	r4, #1
 8002d68:	d01b      	beq.n	8002da2 <SD_disk_read+0x66>
      count = 0;
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002d6a:	4631      	mov	r1, r6
 8002d6c:	2052      	movs	r0, #82	; 0x52
 8002d6e:	f7ff fe4b 	bl	8002a08 <SD_SendCmd>
 8002d72:	b970      	cbnz	r0, 8002d92 <SD_disk_read+0x56>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002d74:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002d78:	4631      	mov	r1, r6
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f7ff feb6 	bl	8002aec <SD_RxDataBlock>
 8002d80:	b118      	cbz	r0, 8002d8a <SD_disk_read+0x4e>
          break;

        buff += 512;
 8002d82:	f505 7500 	add.w	r5, r5, #512	; 0x200
      } while (--count);
 8002d86:	3c01      	subs	r4, #1
 8002d88:	d1f6      	bne.n	8002d78 <SD_disk_read+0x3c>

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	204c      	movs	r0, #76	; 0x4c
 8002d8e:	f7ff fe3b 	bl	8002a08 <SD_SendCmd>
    }
  }

  DESELECT();
 8002d92:	f7ff fdc5 	bl	8002920 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002d96:	f7ff fdcd 	bl	8002934 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002d9a:	1c20      	adds	r0, r4, #0
 8002d9c:	bf18      	it	ne
 8002d9e:	2001      	movne	r0, #1
}
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002da2:	4631      	mov	r1, r6
 8002da4:	2051      	movs	r0, #81	; 0x51
 8002da6:	f7ff fe2f 	bl	8002a08 <SD_SendCmd>
 8002daa:	2800      	cmp	r0, #0
 8002dac:	d1f1      	bne.n	8002d92 <SD_disk_read+0x56>
 8002dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002db2:	4628      	mov	r0, r5
 8002db4:	f7ff fe9a 	bl	8002aec <SD_RxDataBlock>
 8002db8:	fab0 f480 	clz	r4, r0
 8002dbc:	0964      	lsrs	r4, r4, #5
 8002dbe:	e7e8      	b.n	8002d92 <SD_disk_read+0x56>
    return RES_PARERR;
 8002dc0:	2004      	movs	r0, #4
}
 8002dc2:	4770      	bx	lr
    return RES_PARERR;
 8002dc4:	2004      	movs	r0, #4
 8002dc6:	e7eb      	b.n	8002da0 <SD_disk_read+0x64>
    return RES_NOTRDY;
 8002dc8:	2003      	movs	r0, #3
 8002dca:	e7e9      	b.n	8002da0 <SD_disk_read+0x64>
 8002dcc:	2000002c 	.word	0x2000002c
 8002dd0:	200009ac 	.word	0x200009ac

08002dd4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
  if (pdrv || !count)
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d153      	bne.n	8002e80 <SD_disk_write+0xac>
{
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	460d      	mov	r5, r1
 8002ddc:	4616      	mov	r6, r2
 8002dde:	461c      	mov	r4, r3
  if (pdrv || !count)
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d04f      	beq.n	8002e84 <SD_disk_write+0xb0>
    return RES_PARERR;

  if (Stat & STA_NOINIT)
 8002de4:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <SD_disk_write+0xbc>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	f013 0f01 	tst.w	r3, #1
 8002dec:	d14c      	bne.n	8002e88 <SD_disk_write+0xb4>
    return RES_NOTRDY;

  if (Stat & STA_PROTECT)
 8002dee:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <SD_disk_write+0xbc>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	f013 0f04 	tst.w	r3, #4
 8002df6:	d149      	bne.n	8002e8c <SD_disk_write+0xb8>
    return RES_WRPRT;

  if (!(CardType & 4))
 8002df8:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <SD_disk_write+0xc0>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	f013 0f04 	tst.w	r3, #4
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002e00:	bf08      	it	eq
 8002e02:	0256      	lsleq	r6, r2, #9

  SELECT();
 8002e04:	f7ff fd82 	bl	800290c <SELECT>

  if (count == 1)
 8002e08:	2c01      	cmp	r4, #1
 8002e0a:	d022      	beq.n	8002e52 <SD_disk_write+0x7e>
      count = 0;
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <SD_disk_write+0xc0>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	f013 0f02 	tst.w	r3, #2
 8002e14:	d12b      	bne.n	8002e6e <SD_disk_write+0x9a>
    {
      SD_SendCmd(CMD55, 0);
      SD_SendCmd(CMD23, count); /* ACMD23 */
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002e16:	4631      	mov	r1, r6
 8002e18:	2059      	movs	r0, #89	; 0x59
 8002e1a:	f7ff fdf5 	bl	8002a08 <SD_SendCmd>
 8002e1e:	b980      	cbnz	r0, 8002e42 <SD_disk_write+0x6e>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002e20:	26fc      	movs	r6, #252	; 0xfc
 8002e22:	4631      	mov	r1, r6
 8002e24:	4628      	mov	r0, r5
 8002e26:	f7ff fe27 	bl	8002a78 <SD_TxDataBlock>
 8002e2a:	b118      	cbz	r0, 8002e34 <SD_disk_write+0x60>
          break;

        buff += 512;
 8002e2c:	f505 7500 	add.w	r5, r5, #512	; 0x200
      } while (--count);
 8002e30:	3c01      	subs	r4, #1
 8002e32:	d1f6      	bne.n	8002e22 <SD_disk_write+0x4e>

      if(!SD_TxDataBlock(0, 0xFD))
 8002e34:	21fd      	movs	r1, #253	; 0xfd
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7ff fe1e 	bl	8002a78 <SD_TxDataBlock>
 8002e3c:	2800      	cmp	r0, #0
      {
        count = 1;
 8002e3e:	bf08      	it	eq
 8002e40:	2401      	moveq	r4, #1
      }
    }
  }

  DESELECT();
 8002e42:	f7ff fd6d 	bl	8002920 <DESELECT>
  SPI_RxByte();
 8002e46:	f7ff fd75 	bl	8002934 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002e4a:	1c20      	adds	r0, r4, #0
 8002e4c:	bf18      	it	ne
 8002e4e:	2001      	movne	r0, #1
}
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002e52:	4631      	mov	r1, r6
 8002e54:	2058      	movs	r0, #88	; 0x58
 8002e56:	f7ff fdd7 	bl	8002a08 <SD_SendCmd>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	d1f1      	bne.n	8002e42 <SD_disk_write+0x6e>
 8002e5e:	21fe      	movs	r1, #254	; 0xfe
 8002e60:	4628      	mov	r0, r5
 8002e62:	f7ff fe09 	bl	8002a78 <SD_TxDataBlock>
 8002e66:	fab0 f480 	clz	r4, r0
 8002e6a:	0964      	lsrs	r4, r4, #5
 8002e6c:	e7e9      	b.n	8002e42 <SD_disk_write+0x6e>
      SD_SendCmd(CMD55, 0);
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2077      	movs	r0, #119	; 0x77
 8002e72:	f7ff fdc9 	bl	8002a08 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002e76:	4621      	mov	r1, r4
 8002e78:	2057      	movs	r0, #87	; 0x57
 8002e7a:	f7ff fdc5 	bl	8002a08 <SD_SendCmd>
 8002e7e:	e7ca      	b.n	8002e16 <SD_disk_write+0x42>
    return RES_PARERR;
 8002e80:	2004      	movs	r0, #4
}
 8002e82:	4770      	bx	lr
    return RES_PARERR;
 8002e84:	2004      	movs	r0, #4
 8002e86:	e7e3      	b.n	8002e50 <SD_disk_write+0x7c>
    return RES_NOTRDY;
 8002e88:	2003      	movs	r0, #3
 8002e8a:	e7e1      	b.n	8002e50 <SD_disk_write+0x7c>
    return RES_WRPRT;
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	e7df      	b.n	8002e50 <SD_disk_write+0x7c>
 8002e90:	2000002c 	.word	0x2000002c
 8002e94:	200009ac 	.word	0x200009ac

08002e98 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002e98:	b530      	push	{r4, r5, lr}
 8002e9a:	b085      	sub	sp, #20
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;

  if (drv)
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	f040 80b3 	bne.w	8003008 <SD_disk_ioctl+0x170>
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	4615      	mov	r5, r2
    return RES_PARERR;

  res = RES_ERROR;

  if (ctrl == CTRL_POWER)
 8002ea6:	2905      	cmp	r1, #5
 8002ea8:	d013      	beq.n	8002ed2 <SD_disk_ioctl+0x3a>
      res = RES_PARERR;
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8002eaa:	4b5a      	ldr	r3, [pc, #360]	; (8003014 <SD_disk_ioctl+0x17c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	f013 0f01 	tst.w	r3, #1
 8002eb2:	f040 80ad 	bne.w	8003010 <SD_disk_ioctl+0x178>
      return RES_NOTRDY;

    SELECT();
 8002eb6:	f7ff fd29 	bl	800290c <SELECT>

    switch (ctrl)
 8002eba:	2c0d      	cmp	r4, #13
 8002ebc:	f200 809e 	bhi.w	8002ffc <SD_disk_ioctl+0x164>
 8002ec0:	e8df f004 	tbb	[pc, r4]
 8002ec4:	9c602169 	.word	0x9c602169
 8002ec8:	9c9c9c9c 	.word	0x9c9c9c9c
 8002ecc:	709c9c9c 	.word	0x709c9c9c
 8002ed0:	8e7f      	.short	0x8e7f
    switch (*ptr)
 8002ed2:	7813      	ldrb	r3, [r2, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d00d      	beq.n	8002ef4 <SD_disk_ioctl+0x5c>
 8002ed8:	b11b      	cbz	r3, 8002ee2 <SD_disk_ioctl+0x4a>
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d00e      	beq.n	8002efc <SD_disk_ioctl+0x64>
      res = RES_PARERR;
 8002ede:	2404      	movs	r4, #4
 8002ee0:	e093      	b.n	800300a <SD_disk_ioctl+0x172>
  return PowerFlag;
 8002ee2:	4b4d      	ldr	r3, [pc, #308]	; (8003018 <SD_disk_ioctl+0x180>)
      if (SD_CheckPower())
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b90b      	cbnz	r3, 8002eec <SD_disk_ioctl+0x54>
      res = RES_OK;
 8002ee8:	2400      	movs	r4, #0
 8002eea:	e08e      	b.n	800300a <SD_disk_ioctl+0x172>
  PowerFlag = 0;
 8002eec:	2400      	movs	r4, #0
 8002eee:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <SD_disk_ioctl+0x180>)
 8002ef0:	701c      	strb	r4, [r3, #0]
 8002ef2:	e08a      	b.n	800300a <SD_disk_ioctl+0x172>
      SD_PowerOn();             /* Power On */
 8002ef4:	f7ff fd3c 	bl	8002970 <SD_PowerOn>
      res = RES_OK;
 8002ef8:	2400      	movs	r4, #0
      break;
 8002efa:	e086      	b.n	800300a <SD_disk_ioctl+0x172>
  return PowerFlag;
 8002efc:	4b46      	ldr	r3, [pc, #280]	; (8003018 <SD_disk_ioctl+0x180>)
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	7053      	strb	r3, [r2, #1]
      res = RES_OK;             /* Power Check */
 8002f02:	2400      	movs	r4, #0
      break;
 8002f04:	e081      	b.n	800300a <SD_disk_ioctl+0x172>
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002f06:	2100      	movs	r1, #0
 8002f08:	2049      	movs	r0, #73	; 0x49
 8002f0a:	f7ff fd7d 	bl	8002a08 <SD_SendCmd>
 8002f0e:	b108      	cbz	r0, 8002f14 <SD_disk_ioctl+0x7c>
  res = RES_ERROR;
 8002f10:	2401      	movs	r4, #1
 8002f12:	e03b      	b.n	8002f8c <SD_disk_ioctl+0xf4>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002f14:	2110      	movs	r1, #16
 8002f16:	4668      	mov	r0, sp
 8002f18:	f7ff fde8 	bl	8002aec <SD_RxDataBlock>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d06f      	beq.n	8003000 <SD_disk_ioctl+0x168>
      {
        if ((csd[0] >> 6) == 1)
 8002f20:	f89d 3000 	ldrb.w	r3, [sp]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d020      	beq.n	8002f6c <SD_disk_ioctl+0xd4>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002f2a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	eb03 1392 	add.w	r3, r3, r2, lsr #6
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002f3e:	0292      	lsls	r2, r2, #10
 8002f40:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002f44:	4413      	add	r3, r2
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002f46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002f4a:	f002 020f 	and.w	r2, r2, #15
 8002f4e:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8002f52:	eb02 12d1 	add.w	r2, r2, r1, lsr #7
 8002f56:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002f5a:	0049      	lsls	r1, r1, #1
 8002f5c:	f001 0106 	and.w	r1, r1, #6
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002f60:	440a      	add	r2, r1
 8002f62:	3a07      	subs	r2, #7
 8002f64:	4093      	lsls	r3, r2
 8002f66:	602b      	str	r3, [r5, #0]
        }

        res = RES_OK;
 8002f68:	2400      	movs	r4, #0
 8002f6a:	e00f      	b.n	8002f8c <SD_disk_ioctl+0xf4>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002f6c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002f70:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002f74:	3301      	adds	r3, #1
 8002f76:	eb03 2302 	add.w	r3, r3, r2, lsl #8
          *(DWORD*) buff = (DWORD) csize << 10;
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	029b      	lsls	r3, r3, #10
 8002f7e:	602b      	str	r3, [r5, #0]
        res = RES_OK;
 8002f80:	2400      	movs	r4, #0
 8002f82:	e003      	b.n	8002f8c <SD_disk_ioctl+0xf4>
      }
      break;

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f88:	802b      	strh	r3, [r5, #0]
      res = RES_OK;
 8002f8a:	2400      	movs	r4, #0

    default:
      res = RES_PARERR;
    }

    DESELECT();
 8002f8c:	f7ff fcc8 	bl	8002920 <DESELECT>
    SPI_RxByte();
 8002f90:	f7ff fcd0 	bl	8002934 <SPI_RxByte>
 8002f94:	e039      	b.n	800300a <SD_disk_ioctl+0x172>
      if (SD_ReadyWait() == 0xFF)
 8002f96:	f7ff fd25 	bl	80029e4 <SD_ReadyWait>
  res = RES_ERROR;
 8002f9a:	f1b0 04ff 	subs.w	r4, r0, #255	; 0xff
 8002f9e:	bf18      	it	ne
 8002fa0:	2401      	movne	r4, #1
 8002fa2:	e7f3      	b.n	8002f8c <SD_disk_ioctl+0xf4>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2049      	movs	r0, #73	; 0x49
 8002fa8:	f7ff fd2e 	bl	8002a08 <SD_SendCmd>
 8002fac:	b108      	cbz	r0, 8002fb2 <SD_disk_ioctl+0x11a>
  res = RES_ERROR;
 8002fae:	2401      	movs	r4, #1
 8002fb0:	e7ec      	b.n	8002f8c <SD_disk_ioctl+0xf4>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002fb2:	2110      	movs	r1, #16
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f7ff fd99 	bl	8002aec <SD_RxDataBlock>
  res = RES_ERROR;
 8002fba:	fab0 f480 	clz	r4, r0
 8002fbe:	0964      	lsrs	r4, r4, #5
 8002fc0:	e7e4      	b.n	8002f8c <SD_disk_ioctl+0xf4>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	204a      	movs	r0, #74	; 0x4a
 8002fc6:	f7ff fd1f 	bl	8002a08 <SD_SendCmd>
 8002fca:	b108      	cbz	r0, 8002fd0 <SD_disk_ioctl+0x138>
  res = RES_ERROR;
 8002fcc:	2401      	movs	r4, #1
 8002fce:	e7dd      	b.n	8002f8c <SD_disk_ioctl+0xf4>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f7ff fd8a 	bl	8002aec <SD_RxDataBlock>
  res = RES_ERROR;
 8002fd8:	fab0 f480 	clz	r4, r0
 8002fdc:	0964      	lsrs	r4, r4, #5
 8002fde:	e7d5      	b.n	8002f8c <SD_disk_ioctl+0xf4>
      if (SD_SendCmd(CMD58, 0) == 0) { // @suppress("No break at end of case")
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	207a      	movs	r0, #122	; 0x7a
 8002fe4:	f7ff fd10 	bl	8002a08 <SD_SendCmd>
 8002fe8:	b960      	cbnz	r0, 8003004 <SD_disk_ioctl+0x16c>
 8002fea:	1d2c      	adds	r4, r5, #4
          *ptr++ = SPI_RxByte();
 8002fec:	f7ff fca2 	bl	8002934 <SPI_RxByte>
 8002ff0:	f805 0b01 	strb.w	r0, [r5], #1
        for (n = 0; n < 4; n++)
 8002ff4:	42ac      	cmp	r4, r5
 8002ff6:	d1f9      	bne.n	8002fec <SD_disk_ioctl+0x154>
        res = RES_OK;
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	e7c7      	b.n	8002f8c <SD_disk_ioctl+0xf4>
      res = RES_PARERR;
 8002ffc:	2404      	movs	r4, #4
 8002ffe:	e7c5      	b.n	8002f8c <SD_disk_ioctl+0xf4>
  res = RES_ERROR;
 8003000:	2401      	movs	r4, #1
 8003002:	e7c3      	b.n	8002f8c <SD_disk_ioctl+0xf4>
 8003004:	2401      	movs	r4, #1
 8003006:	e7c1      	b.n	8002f8c <SD_disk_ioctl+0xf4>
    return RES_PARERR;
 8003008:	2404      	movs	r4, #4
  }

  return res;
}
 800300a:	4620      	mov	r0, r4
 800300c:	b005      	add	sp, #20
 800300e:	bd30      	pop	{r4, r5, pc}
      return RES_NOTRDY;
 8003010:	2403      	movs	r4, #3
 8003012:	e7fa      	b.n	800300a <SD_disk_ioctl+0x172>
 8003014:	2000002c 	.word	0x2000002c
 8003018:	200009ae 	.word	0x200009ae

0800301c <SD_read_settings>:
//	//	printf("read %d\r\n",SD.result.read);
//	//	printf("close %d\r\n",SD.result.close);
//	//	printf("compare %d\r\n",SD.result.compare);
//}

uint8_t SD_read_settings (SD_t* SD_data){
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	4604      	mov	r4, r0
	char str_buf[3];

	//deny update and play until opening file
	SD_data->update_flag=0;
 8003022:	2200      	movs	r2, #0
 8003024:	f880 26ae 	strb.w	r2, [r0, #1710]	; 0x6ae
	SD_data->play_flag=0;
 8003028:	f880 26af 	strb.w	r2, [r0, #1711]	; 0x6af

	//Register the file system object to the FatFs module
	SD_data->result.mount = f_mount(&SD_data->file_system, "", 0);
 800302c:	4951      	ldr	r1, [pc, #324]	; (8003174 <SD_read_settings+0x158>)
 800302e:	f005 f819 	bl	8008064 <f_mount>
 8003032:	f884 028c 	strb.w	r0, [r4, #652]	; 0x28c
	if(SD_data->result.mount!=0) return SD_data->result.mount;
 8003036:	b108      	cbz	r0, 800303c <SD_read_settings+0x20>
	printf("repeate mode: %d\r\n",SD_data->repeate_mode);
	printf("\r\n");
	#endif

	return f_mount(&SD_data->file_system, "", 0) | f_open(&SD_data->file, SD_data->file_name, FA_READ);
}
 8003038:	b002      	add	sp, #8
 800303a:	bd70      	pop	{r4, r5, r6, pc}
	SD_data->result.open = f_open(&SD_data->file, "settings.txt", FA_READ);
 800303c:	f504 750c 	add.w	r5, r4, #560	; 0x230
 8003040:	2201      	movs	r2, #1
 8003042:	494d      	ldr	r1, [pc, #308]	; (8003178 <SD_read_settings+0x15c>)
 8003044:	4628      	mov	r0, r5
 8003046:	f005 f84f 	bl	80080e8 <f_open>
 800304a:	f884 028d 	strb.w	r0, [r4, #653]	; 0x28d
	if(SD_data->result.open!=0) return SD_data->result.open;
 800304e:	2800      	cmp	r0, #0
 8003050:	d1f2      	bne.n	8003038 <SD_read_settings+0x1c>
	SD_data->result.read = f_read(&SD_data->file, &SD_data->ring_bufer[0], 512, &SD_data->read_byte_counter);
 8003052:	f504 7322 	add.w	r3, r4, #648	; 0x288
 8003056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305a:	f204 21a9 	addw	r1, r4, #681	; 0x2a9
 800305e:	4628      	mov	r0, r5
 8003060:	f005 f92a 	bl	80082b8 <f_read>
 8003064:	f884 028f 	strb.w	r0, [r4, #655]	; 0x28f
	if(SD_data->result.read!=0) return SD_data->result.read;
 8003068:	2800      	cmp	r0, #0
 800306a:	d1e5      	bne.n	8003038 <SD_read_settings+0x1c>
	SD_data->result.close = f_close(&SD_data->file);
 800306c:	4628      	mov	r0, r5
 800306e:	f005 fb13 	bl	8008698 <f_close>
 8003072:	f884 028e 	strb.w	r0, [r4, #654]	; 0x28e
	if(SD_data->result.close!=0) return SD_data->result.close;
 8003076:	2800      	cmp	r0, #0
 8003078:	d1de      	bne.n	8003038 <SD_read_settings+0x1c>
	memcpy(str_buf, &SD_data->ring_bufer[brightness_pos], 3);
 800307a:	f8b4 22bf 	ldrh.w	r2, [r4, #703]	; 0x2bf
 800307e:	f894 32c1 	ldrb.w	r3, [r4, #705]	; 0x2c1
 8003082:	f8ad 2004 	strh.w	r2, [sp, #4]
 8003086:	f88d 3006 	strb.w	r3, [sp, #6]
	SD_data->brightness = atoi(str_buf);
 800308a:	a801      	add	r0, sp, #4
 800308c:	f006 fc73 	bl	8009976 <atoi>
 8003090:	f884 027d 	strb.w	r0, [r4, #637]	; 0x27d
	memcpy(str_buf, &SD_data->ring_bufer[contrast_pos], 3);
 8003094:	f8b4 22dc 	ldrh.w	r2, [r4, #732]	; 0x2dc
 8003098:	f894 32de 	ldrb.w	r3, [r4, #734]	; 0x2de
 800309c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80030a0:	f88d 3006 	strb.w	r3, [sp, #6]
	SD_data->contrast = atoi(str_buf);
 80030a4:	a801      	add	r0, sp, #4
 80030a6:	f006 fc66 	bl	8009976 <atoi>
 80030aa:	f884 027e 	strb.w	r0, [r4, #638]	; 0x27e
	memcpy(str_buf, &SD_data->ring_bufer[radio_channel_num_pos], 3);
 80030ae:	f8b4 22f9 	ldrh.w	r2, [r4, #761]	; 0x2f9
 80030b2:	f894 32fb 	ldrb.w	r3, [r4, #763]	; 0x2fb
 80030b6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80030ba:	f88d 3006 	strb.w	r3, [sp, #6]
	SD_data->radio_channel_num = atoi(str_buf);
 80030be:	a801      	add	r0, sp, #4
 80030c0:	f006 fc59 	bl	8009976 <atoi>
 80030c4:	f884 027f 	strb.w	r0, [r4, #639]	; 0x27f
	memcpy(SD_data->file_name, &SD_data->ring_bufer[file_name_pos], 3);
 80030c8:	f504 7617 	add.w	r6, r4, #604	; 0x25c
 80030cc:	f8b4 2316 	ldrh.w	r2, [r4, #790]	; 0x316
 80030d0:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
 80030d4:	f8a4 225c 	strh.w	r2, [r4, #604]	; 0x25c
 80030d8:	f884 325e 	strb.w	r3, [r4, #606]	; 0x25e
	strcpy (&SD_data->file_name[3], ".bin");//name mask
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <SD_read_settings+0x160>)
 80030de:	6810      	ldr	r0, [r2, #0]
 80030e0:	f8c4 025f 	str.w	r0, [r4, #607]	; 0x25f
 80030e4:	7912      	ldrb	r2, [r2, #4]
 80030e6:	f884 2263 	strb.w	r2, [r4, #611]	; 0x263
	memcpy(str_buf, SD_data->file_name, 3);
 80030ea:	f8b4 225c 	ldrh.w	r2, [r4, #604]	; 0x25c
 80030ee:	f8ad 2004 	strh.w	r2, [sp, #4]
 80030f2:	f88d 3006 	strb.w	r3, [sp, #6]
	SD_data->file_num = atoi(str_buf);
 80030f6:	a801      	add	r0, sp, #4
 80030f8:	f006 fc3d 	bl	8009976 <atoi>
 80030fc:	f884 027c 	strb.w	r0, [r4, #636]	; 0x27c
	memcpy(str_buf, &SD_data->ring_bufer[repeate_mode_pos], 3);
 8003100:	f8b4 2333 	ldrh.w	r2, [r4, #819]	; 0x333
 8003104:	f894 3335 	ldrb.w	r3, [r4, #821]	; 0x335
 8003108:	f8ad 2004 	strh.w	r2, [sp, #4]
 800310c:	f88d 3006 	strb.w	r3, [sp, #6]
	SD_data->repeate_mode = atoi(str_buf);
 8003110:	a801      	add	r0, sp, #4
 8003112:	f006 fc30 	bl	8009976 <atoi>
 8003116:	f884 0294 	strb.w	r0, [r4, #660]	; 0x294
	printf("SETTINGS: \r\n");
 800311a:	4819      	ldr	r0, [pc, #100]	; (8003180 <SD_read_settings+0x164>)
 800311c:	f006 fcfc 	bl	8009b18 <puts>
	printf("brightness: %d\r\n",SD_data->brightness);
 8003120:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
 8003124:	4817      	ldr	r0, [pc, #92]	; (8003184 <SD_read_settings+0x168>)
 8003126:	f006 fc83 	bl	8009a30 <iprintf>
	printf("contrast: %d\r\n",SD_data->contrast);
 800312a:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
 800312e:	4816      	ldr	r0, [pc, #88]	; (8003188 <SD_read_settings+0x16c>)
 8003130:	f006 fc7e 	bl	8009a30 <iprintf>
	printf("radio channel: %d\r\n",SD_data->radio_channel_num);
 8003134:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
 8003138:	4814      	ldr	r0, [pc, #80]	; (800318c <SD_read_settings+0x170>)
 800313a:	f006 fc79 	bl	8009a30 <iprintf>
	printf("file name: %s\r\n",SD_data->file_name);
 800313e:	4631      	mov	r1, r6
 8003140:	4813      	ldr	r0, [pc, #76]	; (8003190 <SD_read_settings+0x174>)
 8003142:	f006 fc75 	bl	8009a30 <iprintf>
	printf("repeate mode: %d\r\n",SD_data->repeate_mode);
 8003146:	f894 1294 	ldrb.w	r1, [r4, #660]	; 0x294
 800314a:	4812      	ldr	r0, [pc, #72]	; (8003194 <SD_read_settings+0x178>)
 800314c:	f006 fc70 	bl	8009a30 <iprintf>
	printf("\r\n");
 8003150:	4811      	ldr	r0, [pc, #68]	; (8003198 <SD_read_settings+0x17c>)
 8003152:	f006 fce1 	bl	8009b18 <puts>
	return f_mount(&SD_data->file_system, "", 0) | f_open(&SD_data->file, SD_data->file_name, FA_READ);
 8003156:	2200      	movs	r2, #0
 8003158:	4906      	ldr	r1, [pc, #24]	; (8003174 <SD_read_settings+0x158>)
 800315a:	4620      	mov	r0, r4
 800315c:	f004 ff82 	bl	8008064 <f_mount>
 8003160:	4604      	mov	r4, r0
 8003162:	2201      	movs	r2, #1
 8003164:	4631      	mov	r1, r6
 8003166:	4628      	mov	r0, r5
 8003168:	f004 ffbe 	bl	80080e8 <f_open>
 800316c:	4320      	orrs	r0, r4
 800316e:	b2c0      	uxtb	r0, r0
 8003170:	e762      	b.n	8003038 <SD_read_settings+0x1c>
 8003172:	bf00      	nop
 8003174:	0800adac 	.word	0x0800adac
 8003178:	0800adb0 	.word	0x0800adb0
 800317c:	0800adc0 	.word	0x0800adc0
 8003180:	0800adc8 	.word	0x0800adc8
 8003184:	0800add4 	.word	0x0800add4
 8003188:	0800ade8 	.word	0x0800ade8
 800318c:	0800adf8 	.word	0x0800adf8
 8003190:	0800ae0c 	.word	0x0800ae0c
 8003194:	0800ae1c 	.word	0x0800ae1c
 8003198:	0800ac38 	.word	0x0800ac38

0800319c <SD_change_file>:

uint8_t SD_change_file (SD_t* SD_data, int8_t direction, uint8_t trying_quantity){
 800319c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319e:	b083      	sub	sp, #12
 80031a0:	4604      	mov	r4, r0
 80031a2:	460e      	mov	r6, r1
 80031a4:	4617      	mov	r7, r2

	//имя текущего файла без расширения
	char str_buf[4];
	memcpy(str_buf, SD_data->file_name, 3);
 80031a6:	f500 7517 	add.w	r5, r0, #604	; 0x25c
 80031aa:	882a      	ldrh	r2, [r5, #0]
 80031ac:	78ab      	ldrb	r3, [r5, #2]
 80031ae:	f8ad 2004 	strh.w	r2, [sp, #4]
 80031b2:	f88d 3006 	strb.w	r3, [sp, #6]

	//новый номер файла = номер текущего файла + direction (+1, либо минус 1)
	SD_data->file_num = atoi(str_buf) + direction;
 80031b6:	a801      	add	r0, sp, #4
 80031b8:	f006 fbdd 	bl	8009976 <atoi>
 80031bc:	4430      	add	r0, r6
 80031be:	b2c0      	uxtb	r0, r0
 80031c0:	f884 027c 	strb.w	r0, [r4, #636]	; 0x27c

/*_________________________конструктор нового имени файла____________________________*/
	//в незадействованные разряды имени - символы нулей
	strcpy (str_buf, "000");
 80031c4:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <SD_change_file+0x104>)
 80031c6:	9301      	str	r3, [sp, #4]

	//в задействованные разряды - номер нового файла, преобразованный в символы
	if (SD_data->file_num >= 100) itoa(SD_data->file_num, &str_buf[0], 10);
 80031c8:	2863      	cmp	r0, #99	; 0x63
 80031ca:	d83d      	bhi.n	8003248 <SD_change_file+0xac>
	else if (SD_data->file_num >= 10) itoa(SD_data->file_num, &str_buf[1], 10);
 80031cc:	2809      	cmp	r0, #9
 80031ce:	f04f 020a 	mov.w	r2, #10
 80031d2:	bf8c      	ite	hi
 80031d4:	f10d 0105 	addhi.w	r1, sp, #5
	else  itoa(SD_data->file_num, &str_buf[2], 10);
 80031d8:	f10d 0106 	addls.w	r1, sp, #6
 80031dc:	f006 fc12 	bl	8009a04 <itoa>

	//новое имя файла без расширения
	memcpy(SD_data->file_name, str_buf, 3);
 80031e0:	ab02      	add	r3, sp, #8
 80031e2:	f833 2d04 	ldrh.w	r2, [r3, #-4]!
 80031e6:	789b      	ldrb	r3, [r3, #2]
 80031e8:	f8a4 225c 	strh.w	r2, [r4, #604]	; 0x25c
 80031ec:	70ab      	strb	r3, [r5, #2]

	//новое имя файла с расширением
	strcpy (&SD_data->file_name[3], ".bin");//extension mask
 80031ee:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <SD_change_file+0x108>)
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	f8c4 025f 	str.w	r0, [r4, #607]	; 0x25f
 80031f6:	791b      	ldrb	r3, [r3, #4]
 80031f8:	f884 3263 	strb.w	r3, [r4, #611]	; 0x263
/*__________________________________________________________________________________*/

/*_________________________если файл с новым именем существует:_____________________*/
	if(f_mount(&SD_data->file_system, "", 0) || f_open(&SD_data->file, SD_data->file_name, FA_READ) == FR_OK){
 80031fc:	2200      	movs	r2, #0
 80031fe:	492a      	ldr	r1, [pc, #168]	; (80032a8 <SD_change_file+0x10c>)
 8003200:	4620      	mov	r0, r4
 8003202:	f004 ff2f 	bl	8008064 <f_mount>
 8003206:	b938      	cbnz	r0, 8003218 <SD_change_file+0x7c>
 8003208:	2201      	movs	r2, #1
 800320a:	4629      	mov	r1, r5
 800320c:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8003210:	f004 ff6a 	bl	80080e8 <f_open>
 8003214:	2800      	cmp	r0, #0
 8003216:	d135      	bne.n	8003284 <SD_change_file+0xe8>

		printf("file name: %s", SD_data->file_name); printf(" open OK\r\n");
 8003218:	4629      	mov	r1, r5
 800321a:	4824      	ldr	r0, [pc, #144]	; (80032ac <SD_change_file+0x110>)
 800321c:	f006 fc08 	bl	8009a30 <iprintf>
 8003220:	4823      	ldr	r0, [pc, #140]	; (80032b0 <SD_change_file+0x114>)
 8003222:	f006 fc79 	bl	8009b18 <puts>

		//открыть файл с настройками
		f_mount(&SD_data->file_system, "", 0);
 8003226:	2200      	movs	r2, #0
 8003228:	491f      	ldr	r1, [pc, #124]	; (80032a8 <SD_change_file+0x10c>)
 800322a:	4620      	mov	r0, r4
 800322c:	f004 ff1a 	bl	8008064 <f_mount>
		SD_data->result.open = f_open(&SD_data->file, "settings.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8003230:	f504 750c 	add.w	r5, r4, #560	; 0x230
 8003234:	2212      	movs	r2, #18
 8003236:	491f      	ldr	r1, [pc, #124]	; (80032b4 <SD_change_file+0x118>)
 8003238:	4628      	mov	r0, r5
 800323a:	f004 ff55 	bl	80080e8 <f_open>
 800323e:	f884 028d 	strb.w	r0, [r4, #653]	; 0x28d
		if(SD_data->result.open!=0) return SD_data->result.open;
 8003242:	b130      	cbz	r0, 8003252 <SD_change_file+0xb6>
	}
	else {
		printf("failed to open file!:(\r\n");
		return !FR_OK;
	}
}
 8003244:	b003      	add	sp, #12
 8003246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (SD_data->file_num >= 100) itoa(SD_data->file_num, &str_buf[0], 10);
 8003248:	220a      	movs	r2, #10
 800324a:	a901      	add	r1, sp, #4
 800324c:	f006 fbda 	bl	8009a04 <itoa>
 8003250:	e7c6      	b.n	80031e0 <SD_change_file+0x44>
		SD_data->result.lseek = f_lseek(&SD_data->file, file_name_pos);
 8003252:	216d      	movs	r1, #109	; 0x6d
 8003254:	4628      	mov	r0, r5
 8003256:	f005 fa36 	bl	80086c6 <f_lseek>
 800325a:	f884 0293 	strb.w	r0, [r4, #659]	; 0x293
		if(SD_data->result.lseek!=0) return SD_data->result.lseek;
 800325e:	2800      	cmp	r0, #0
 8003260:	d1f0      	bne.n	8003244 <SD_change_file+0xa8>
		SD_data->result.write = f_write(&SD_data->file, str_buf, 3, &SD_data->write_byte_counter);
 8003262:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8003266:	2203      	movs	r2, #3
 8003268:	a901      	add	r1, sp, #4
 800326a:	4628      	mov	r0, r5
 800326c:	f005 f8e4 	bl	8008438 <f_write>
 8003270:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
		if(SD_data->result.write!=0) return SD_data->result.write;
 8003274:	2800      	cmp	r0, #0
 8003276:	d1e5      	bne.n	8003244 <SD_change_file+0xa8>
		SD_data->result.close = f_close(&SD_data->file);
 8003278:	4628      	mov	r0, r5
 800327a:	f005 fa0d 	bl	8008698 <f_close>
 800327e:	f884 028e 	strb.w	r0, [r4, #654]	; 0x28e
 8003282:	e7df      	b.n	8003244 <SD_change_file+0xa8>
	else if (trying_quantity-- !=0){
 8003284:	b927      	cbnz	r7, 8003290 <SD_change_file+0xf4>
		printf("failed to open file!:(\r\n");
 8003286:	480c      	ldr	r0, [pc, #48]	; (80032b8 <SD_change_file+0x11c>)
 8003288:	f006 fc46 	bl	8009b18 <puts>
		return !FR_OK;
 800328c:	2001      	movs	r0, #1
 800328e:	e7d9      	b.n	8003244 <SD_change_file+0xa8>
	else if (trying_quantity-- !=0){
 8003290:	1e7a      	subs	r2, r7, #1
		return SD_change_file (SD_data, direction, trying_quantity);
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	4631      	mov	r1, r6
 8003296:	4620      	mov	r0, r4
 8003298:	f7ff ff80 	bl	800319c <SD_change_file>
 800329c:	e7d2      	b.n	8003244 <SD_change_file+0xa8>
 800329e:	bf00      	nop
 80032a0:	00303030 	.word	0x00303030
 80032a4:	0800adc0 	.word	0x0800adc0
 80032a8:	0800adac 	.word	0x0800adac
 80032ac:	0800acec 	.word	0x0800acec
 80032b0:	0800acfc 	.word	0x0800acfc
 80032b4:	0800adb0 	.word	0x0800adb0
 80032b8:	0800ad08 	.word	0x0800ad08

080032bc <SD_prepare_file>:

uint8_t SD_prepare_file (SD_t* SD_data){
 80032bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c0:	4604      	mov	r4, r0

	SD_data->ring_bufer_size=sizeof (SD_data->ring_bufer);
 80032c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c6:	f8a0 36aa 	strh.w	r3, [r0, #1706]	; 0x6aa
	SD_data->ring_bufer_half_size=SD_data->ring_bufer_size/2;
 80032ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ce:	f8a0 36ac 	strh.w	r3, [r0, #1708]	; 0x6ac
	SD_data->write_address_pointer=0;
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8a0 26b0 	strh.w	r2, [r0, #1712]	; 0x6b0
	SD_data->read_address_pointer=3;
 80032d8:	2303      	movs	r3, #3
 80032da:	f8a0 36b2 	strh.w	r3, [r0, #1714]	; 0x6b2
	SD_data->update_flag=0;
 80032de:	f880 26ae 	strb.w	r2, [r0, #1710]	; 0x6ae

	//Register the file system object to the FatFs module
	SD_data->result.mount = f_mount(&SD_data->file_system, "", 0);
 80032e2:	492b      	ldr	r1, [pc, #172]	; (8003390 <SD_prepare_file+0xd4>)
 80032e4:	f004 febe 	bl	8008064 <f_mount>
 80032e8:	4605      	mov	r5, r0
 80032ea:	f884 028c 	strb.w	r0, [r4, #652]	; 0x28c
	if(SD_data->result.mount!=0) return SD_data->result.mount;
 80032ee:	b110      	cbz	r0, 80032f6 <SD_prepare_file+0x3a>
	printf("frames_quantity: %lu\r\n",SD_data->file_head.frames_quantity);
	printf("frame_rate: %d\r\n",SD_data->file_head.frame_rate);
	#endif

	return 0;
}
 80032f0:	4628      	mov	r0, r5
 80032f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	SD_data->result.open = f_open(&SD_data->file, SD_data->file_name, FA_READ);
 80032f6:	f504 760c 	add.w	r6, r4, #560	; 0x230
 80032fa:	f504 7717 	add.w	r7, r4, #604	; 0x25c
 80032fe:	2201      	movs	r2, #1
 8003300:	4639      	mov	r1, r7
 8003302:	4630      	mov	r0, r6
 8003304:	f004 fef0 	bl	80080e8 <f_open>
 8003308:	4605      	mov	r5, r0
 800330a:	f884 028d 	strb.w	r0, [r4, #653]	; 0x28d
	if(SD_data->result.open!=0) return SD_data->result.open;
 800330e:	2800      	cmp	r0, #0
 8003310:	d1ee      	bne.n	80032f0 <SD_prepare_file+0x34>
	SD_data->result.read = f_read(&SD_data->file, &SD_data->file_head, 16, &SD_data->read_byte_counter);
 8003312:	f504 7822 	add.w	r8, r4, #648	; 0x288
 8003316:	4643      	mov	r3, r8
 8003318:	2210      	movs	r2, #16
 800331a:	f504 7126 	add.w	r1, r4, #664	; 0x298
 800331e:	4630      	mov	r0, r6
 8003320:	f004 ffca 	bl	80082b8 <f_read>
 8003324:	4605      	mov	r5, r0
 8003326:	f884 028f 	strb.w	r0, [r4, #655]	; 0x28f
	if(SD_data->result.read!=0) return SD_data->result.read;
 800332a:	2800      	cmp	r0, #0
 800332c:	d1e0      	bne.n	80032f0 <SD_prepare_file+0x34>
	SD_data->result.read = f_read(&SD_data->file, &SD_data->ring_bufer[0], SD_data->ring_bufer_size, &SD_data->read_byte_counter);
 800332e:	4643      	mov	r3, r8
 8003330:	f8b4 26aa 	ldrh.w	r2, [r4, #1706]	; 0x6aa
 8003334:	f204 21a9 	addw	r1, r4, #681	; 0x2a9
 8003338:	4630      	mov	r0, r6
 800333a:	f004 ffbd 	bl	80082b8 <f_read>
 800333e:	4605      	mov	r5, r0
 8003340:	f884 028f 	strb.w	r0, [r4, #655]	; 0x28f
	if(SD_data->result.read!=0) return SD_data->result.read;
 8003344:	2800      	cmp	r0, #0
 8003346:	d1d3      	bne.n	80032f0 <SD_prepare_file+0x34>
	SD_data->total_read_byte_counter = SD_data->ring_bufer_half_size + 16;
 8003348:	f8b4 36ac 	ldrh.w	r3, [r4, #1708]	; 0x6ac
 800334c:	3310      	adds	r3, #16
 800334e:	f8c4 36b4 	str.w	r3, [r4, #1716]	; 0x6b4
	printf("file prepare: %s\r\n",SD_data->file_name);
 8003352:	4639      	mov	r1, r7
 8003354:	480f      	ldr	r0, [pc, #60]	; (8003394 <SD_prepare_file+0xd8>)
 8003356:	f006 fb6b 	bl	8009a30 <iprintf>
	printf("protocol_number: %d\r\n",SD_data->file_head.protocol_number);
 800335a:	f894 1298 	ldrb.w	r1, [r4, #664]	; 0x298
 800335e:	480e      	ldr	r0, [pc, #56]	; (8003398 <SD_prepare_file+0xdc>)
 8003360:	f006 fb66 	bl	8009a30 <iprintf>
	printf("bytes_quantity_in_file: %lu\r\n",SD_data->file_head.bytes_quantity_in_file);
 8003364:	f8d4 12a4 	ldr.w	r1, [r4, #676]	; 0x2a4
 8003368:	480c      	ldr	r0, [pc, #48]	; (800339c <SD_prepare_file+0xe0>)
 800336a:	f006 fb61 	bl	8009a30 <iprintf>
	printf("pixels_quantity: %d\r\n",SD_data->file_head.pixels_quantity);
 800336e:	f8b4 129a 	ldrh.w	r1, [r4, #666]	; 0x29a
 8003372:	480b      	ldr	r0, [pc, #44]	; (80033a0 <SD_prepare_file+0xe4>)
 8003374:	f006 fb5c 	bl	8009a30 <iprintf>
	printf("frames_quantity: %lu\r\n",SD_data->file_head.frames_quantity);
 8003378:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
 800337c:	4809      	ldr	r0, [pc, #36]	; (80033a4 <SD_prepare_file+0xe8>)
 800337e:	f006 fb57 	bl	8009a30 <iprintf>
	printf("frame_rate: %d\r\n",SD_data->file_head.frame_rate);
 8003382:	f894 1299 	ldrb.w	r1, [r4, #665]	; 0x299
 8003386:	4808      	ldr	r0, [pc, #32]	; (80033a8 <SD_prepare_file+0xec>)
 8003388:	f006 fb52 	bl	8009a30 <iprintf>
	return 0;
 800338c:	e7b0      	b.n	80032f0 <SD_prepare_file+0x34>
 800338e:	bf00      	nop
 8003390:	0800adac 	.word	0x0800adac
 8003394:	0800ad20 	.word	0x0800ad20
 8003398:	0800ad34 	.word	0x0800ad34
 800339c:	0800ad4c 	.word	0x0800ad4c
 80033a0:	0800ad6c 	.word	0x0800ad6c
 80033a4:	0800ad84 	.word	0x0800ad84
 80033a8:	0800ad9c 	.word	0x0800ad9c

080033ac <SD_update_bufer>:

uint8_t SD_update_bufer (SD_t* SD_data){
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4604      	mov	r4, r0

	uint32_t time1 = HAL_GetTick();
 80033b0:	f000 fa06 	bl	80037c0 <HAL_GetTick>
 80033b4:	4605      	mov	r5, r0

	// Read next GRB dump from the files
	SD_data->read_byte_counter = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
	f_lseek(&SD_data->file, SD_data->total_read_byte_counter);
 80033bc:	f504 760c 	add.w	r6, r4, #560	; 0x230
 80033c0:	f8d4 16b4 	ldr.w	r1, [r4, #1716]	; 0x6b4
 80033c4:	4630      	mov	r0, r6
 80033c6:	f005 f97e 	bl	80086c6 <f_lseek>
	SD_data->result.read = f_read(&SD_data->file, &SD_data->ring_bufer[SD_data->write_address_pointer], SD_data->ring_bufer_half_size, &SD_data->read_byte_counter);
 80033ca:	f8b4 16b0 	ldrh.w	r1, [r4, #1712]	; 0x6b0
 80033ce:	f201 21a9 	addw	r1, r1, #681	; 0x2a9
 80033d2:	f504 7322 	add.w	r3, r4, #648	; 0x288
 80033d6:	f8b4 26ac 	ldrh.w	r2, [r4, #1708]	; 0x6ac
 80033da:	4421      	add	r1, r4
 80033dc:	4630      	mov	r0, r6
 80033de:	f004 ff6b 	bl	80082b8 <f_read>
 80033e2:	f884 028f 	strb.w	r0, [r4, #655]	; 0x28f

	uint32_t time2 = HAL_GetTick();
 80033e6:	f000 f9eb 	bl	80037c0 <HAL_GetTick>
	uint32_t time3 = time2 - time1;
 80033ea:	1b41      	subs	r1, r0, r5
	if (time3>20) {
 80033ec:	2914      	cmp	r1, #20
 80033ee:	d807      	bhi.n	8003400 <SD_update_bufer+0x54>
		printf("%d\r\n", (int) time3);
	}

	return (SD_data->read_byte_counter ^ SD_data->ring_bufer_half_size) || SD_data->result.read;
 80033f0:	f8b4 36ac 	ldrh.w	r3, [r4, #1708]	; 0x6ac
 80033f4:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d005      	beq.n	8003408 <SD_update_bufer+0x5c>
 80033fc:	2001      	movs	r0, #1
}
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
		printf("%d\r\n", (int) time3);
 8003400:	4804      	ldr	r0, [pc, #16]	; (8003414 <SD_update_bufer+0x68>)
 8003402:	f006 fb15 	bl	8009a30 <iprintf>
 8003406:	e7f3      	b.n	80033f0 <SD_update_bufer+0x44>
	return (SD_data->read_byte_counter ^ SD_data->ring_bufer_half_size) || SD_data->result.read;
 8003408:	f894 028f 	ldrb.w	r0, [r4, #655]	; 0x28f
 800340c:	3000      	adds	r0, #0
 800340e:	bf18      	it	ne
 8003410:	2001      	movne	r0, #1
 8003412:	e7f4      	b.n	80033fe <SD_update_bufer+0x52>
 8003414:	0800ada8 	.word	0x0800ada8

08003418 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003418:	b500      	push	{lr}
 800341a:	b083      	sub	sp, #12
 800341c:	a902      	add	r1, sp, #8
 800341e:	f841 0d04 	str.w	r0, [r1, #-4]!
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003426:	2201      	movs	r2, #1
 8003428:	4803      	ldr	r0, [pc, #12]	; (8003438 <__io_putchar+0x20>)
 800342a:	f003 fd21 	bl	8006e70 <HAL_UART_Transmit>
  return ch;
}
 800342e:	9801      	ldr	r0, [sp, #4]
 8003430:	b003      	add	sp, #12
 8003432:	f85d fb04 	ldr.w	pc, [sp], #4
 8003436:	bf00      	nop
 8003438:	20000c2c 	.word	0x20000c2c

0800343c <WS2812_start>:
	(WS2812_t* WS2812,
	SD_t* data,
	TIM_HandleTypeDef *htim,
	uint32_t tim_channel,
	uint8_t initialization_reason)
{
 800343c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003440:	4604      	mov	r4, r0
 8003442:	460d      	mov	r5, r1
 8003444:	4616      	mov	r6, r2
 8003446:	461f      	mov	r7, r3
 8003448:	f89d 8020 	ldrb.w	r8, [sp, #32]
	HAL_TIM_PWM_Stop_DMA(htim, tim_channel);
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f003 fb08 	bl	8006a64 <HAL_TIM_PWM_Stop_DMA>

	WS2812->ring_bufer_size=sizeof (WS2812->ring_bufer);
 8003454:	2330      	movs	r3, #48	; 0x30
 8003456:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	WS2812->ring_bufer_half_size=WS2812->ring_bufer_size/2;
 800345a:	2318      	movs	r3, #24
 800345c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	WS2812->sended_pixels_counter=0;
 8003460:	2300      	movs	r3, #0
 8003462:	8063      	strh	r3, [r4, #2]
	WS2812->write_address_pointer=0;
 8003464:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a

	if (initialization_reason == to_play_file) {
 8003468:	f1b8 0f00 	cmp.w	r8, #0
 800346c:	d014      	beq.n	8003498 <WS2812_start+0x5c>
		WS2812->contrast = data->contrast;
		WS2812->brightness = WS2812->contrast*((float)data->brightness/100);
		WS2812->pixels_quantity=data->file_head.pixels_quantity;
		WS2812->frame_pheriod=(1000000/data->file_head.frame_rate)/30;/*(us/30)*/
	} else if (initialization_reason == to_show_massage){
 800346e:	f1b8 0f01 	cmp.w	r8, #1
 8003472:	d135      	bne.n	80034e0 <WS2812_start+0xa4>
		WS2812->contrast = 65;
 8003474:	2341      	movs	r3, #65	; 0x41
 8003476:	71a3      	strb	r3, [r4, #6]
		WS2812->brightness = WS2812->contrast*((float)15/100);
 8003478:	2309      	movs	r3, #9
 800347a:	71e3      	strb	r3, [r4, #7]
		WS2812->pixels_quantity = 256;
 800347c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003480:	8023      	strh	r3, [r4, #0]
		WS2812->frame_pheriod = WS2812->pixels_quantity*2;/*( us/30)*/
 8003482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003486:	80a3      	strh	r3, [r4, #4]
		data->ring_bufer_size = 256*3;
 8003488:	f44f 7340 	mov.w	r3, #768	; 0x300
 800348c:	f8a5 36aa 	strh.w	r3, [r5, #1706]	; 0x6aa
		data->read_address_pointer = 3;/*for first WS2812_prepare_data*/
 8003490:	2303      	movs	r3, #3
 8003492:	f8a5 36b2 	strh.w	r3, [r5, #1714]	; 0x6b2
 8003496:	e023      	b.n	80034e0 <WS2812_start+0xa4>
		WS2812->contrast = data->contrast;
 8003498:	f895 827e 	ldrb.w	r8, [r5, #638]	; 0x27e
 800349c:	f884 8006 	strb.w	r8, [r4, #6]
		WS2812->brightness = WS2812->contrast*((float)data->brightness/100);
 80034a0:	f895 027d 	ldrb.w	r0, [r5, #637]	; 0x27d
 80034a4:	f7fd fb9e 	bl	8000be4 <__aeabi_ui2f>
 80034a8:	4912      	ldr	r1, [pc, #72]	; (80034f4 <WS2812_start+0xb8>)
 80034aa:	f7fd fca7 	bl	8000dfc <__aeabi_fdiv>
 80034ae:	4681      	mov	r9, r0
 80034b0:	4640      	mov	r0, r8
 80034b2:	f7fd fb9b 	bl	8000bec <__aeabi_i2f>
 80034b6:	4601      	mov	r1, r0
 80034b8:	4648      	mov	r0, r9
 80034ba:	f7fd fbeb 	bl	8000c94 <__aeabi_fmul>
 80034be:	f7fd fd39 	bl	8000f34 <__aeabi_f2uiz>
 80034c2:	71e0      	strb	r0, [r4, #7]
		WS2812->pixels_quantity=data->file_head.pixels_quantity;
 80034c4:	f8b5 329a 	ldrh.w	r3, [r5, #666]	; 0x29a
 80034c8:	8023      	strh	r3, [r4, #0]
		WS2812->frame_pheriod=(1000000/data->file_head.frame_rate)/30;/*(us/30)*/
 80034ca:	f895 2299 	ldrb.w	r2, [r5, #665]	; 0x299
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <WS2812_start+0xbc>)
 80034d0:	fb93 f2f2 	sdiv	r2, r3, r2
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <WS2812_start+0xc0>)
 80034d6:	fb83 1302 	smull	r1, r3, r3, r2
 80034da:	4413      	add	r3, r2
 80034dc:	111b      	asrs	r3, r3, #4
 80034de:	80a3      	strh	r3, [r4, #4]
	}

	return HAL_TIM_PWM_Start_DMA(htim, tim_channel, (uint32_t*)WS2812->ring_bufer, WS2812->ring_bufer_size);
 80034e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80034e4:	f104 0208 	add.w	r2, r4, #8
 80034e8:	4639      	mov	r1, r7
 80034ea:	4630      	mov	r0, r6
 80034ec:	f003 f9ee 	bl	80068cc <HAL_TIM_PWM_Start_DMA>
}
 80034f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034f4:	42c80000 	.word	0x42c80000
 80034f8:	000f4240 	.word	0x000f4240
 80034fc:	88888889 	.word	0x88888889

08003500 <WS2812_prepare_data>:

uint8_t WS2812_prepare_data (WS2812_t* WS2812, SD_t* data){
 8003500:	b4f0      	push	{r4, r5, r6, r7}
 8003502:	b082      	sub	sp, #8

	WS2812->sended_pixels_counter++;
 8003504:	8843      	ldrh	r3, [r0, #2]
 8003506:	3301      	adds	r3, #1
 8003508:	b29b      	uxth	r3, r3
 800350a:	8043      	strh	r3, [r0, #2]

	//1:
	if (WS2812->sended_pixels_counter == WS2812->frame_pheriod) {
 800350c:	8882      	ldrh	r2, [r0, #4]
 800350e:	429a      	cmp	r2, r3
		WS2812->sended_pixels_counter=0;
 8003510:	bf04      	itt	eq
 8003512:	2300      	moveq	r3, #0
 8003514:	8043      	strheq	r3, [r0, #2]
	}

	//2:
	if (WS2812->sended_pixels_counter == WS2812->pixels_quantity || WS2812->sended_pixels_counter == WS2812->pixels_quantity+1){
 8003516:	8842      	ldrh	r2, [r0, #2]
 8003518:	8803      	ldrh	r3, [r0, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d00d      	beq.n	800353a <WS2812_prepare_data+0x3a>
 800351e:	1c5c      	adds	r4, r3, #1
 8003520:	42a2      	cmp	r2, r4
 8003522:	d00a      	beq.n	800353a <WS2812_prepare_data+0x3a>
		}
		return HAL_OK;
	}

	//3:
	if (WS2812->sended_pixels_counter < WS2812->pixels_quantity){
 8003524:	429a      	cmp	r2, r3
 8003526:	f080 80ab 	bcs.w	8003680 <WS2812_prepare_data+0x180>
		for (uint8_t i = 0; i < 3; i++) {
			RGB_buf[i] = data->ring_bufer[data->read_address_pointer];
			RGB_buf[i] /= WS2812->contrast;
			RGB_buf[i] *= WS2812->brightness;
			data->read_address_pointer++;
			if (data->read_address_pointer == data->ring_bufer_size) {
 800352a:	f8b1 56aa 	ldrh.w	r5, [r1, #1706]	; 0x6aa
 800352e:	aa01      	add	r2, sp, #4
 8003530:	f10d 0407 	add.w	r4, sp, #7
				data->write_address_pointer = data->ring_bufer_half_size;
				data->total_read_byte_counter += data->ring_bufer_half_size;
				data->update_flag = 1;
			}
			else if (data->read_address_pointer == data->ring_bufer_half_size) {
				data->write_address_pointer = 0;
 8003534:	2700      	movs	r7, #0
				data->total_read_byte_counter += data->ring_bufer_half_size;
				data->update_flag = 1;
 8003536:	2601      	movs	r6, #1
 8003538:	e029      	b.n	800358e <WS2812_prepare_data+0x8e>
		for (uint8_t i = 0; i < WS2812->ring_bufer_half_size; i++) {
 800353a:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800353e:	b162      	cbz	r2, 800355a <WS2812_prepare_data+0x5a>
 8003540:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003544:	441a      	add	r2, r3
 8003546:	b2d2      	uxtb	r2, r2
			WS2812->ring_bufer[WS2812->write_address_pointer++] = 0;
 8003548:	2400      	movs	r4, #0
 800354a:	18c1      	adds	r1, r0, r3
 800354c:	720c      	strb	r4, [r1, #8]
 800354e:	3301      	adds	r3, #1
 8003550:	b2db      	uxtb	r3, r3
		for (uint8_t i = 0; i < WS2812->ring_bufer_half_size; i++) {
 8003552:	4293      	cmp	r3, r2
 8003554:	d1f9      	bne.n	800354a <WS2812_prepare_data+0x4a>
 8003556:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
		if (WS2812->write_address_pointer == WS2812->ring_bufer_size) {
 800355a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800355e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003562:	429a      	cmp	r2, r3
 8003564:	f040 8088 	bne.w	8003678 <WS2812_prepare_data+0x178>
			WS2812->write_address_pointer = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800356e:	e083      	b.n	8003678 <WS2812_prepare_data+0x178>
				data->read_address_pointer = 0;
 8003570:	f8a1 76b2 	strh.w	r7, [r1, #1714]	; 0x6b2
				data->write_address_pointer = data->ring_bufer_half_size;
 8003574:	f8b1 36ac 	ldrh.w	r3, [r1, #1708]	; 0x6ac
 8003578:	f8a1 36b0 	strh.w	r3, [r1, #1712]	; 0x6b0
				data->total_read_byte_counter += data->ring_bufer_half_size;
 800357c:	f8d1 c6b4 	ldr.w	ip, [r1, #1716]	; 0x6b4
 8003580:	4463      	add	r3, ip
 8003582:	f8c1 36b4 	str.w	r3, [r1, #1716]	; 0x6b4
				data->update_flag = 1;
 8003586:	f881 66ae 	strb.w	r6, [r1, #1710]	; 0x6ae
		for (uint8_t i = 0; i < 3; i++) {
 800358a:	4294      	cmp	r4, r2
 800358c:	d02a      	beq.n	80035e4 <WS2812_prepare_data+0xe4>
			RGB_buf[i] = data->ring_bufer[data->read_address_pointer];
 800358e:	f8b1 36b2 	ldrh.w	r3, [r1, #1714]	; 0x6b2
 8003592:	440b      	add	r3, r1
			RGB_buf[i] /= WS2812->contrast;
 8003594:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003598:	f890 c006 	ldrb.w	ip, [r0, #6]
 800359c:	fbb3 f3fc 	udiv	r3, r3, ip
			RGB_buf[i] *= WS2812->brightness;
 80035a0:	f890 c007 	ldrb.w	ip, [r0, #7]
 80035a4:	fb03 f30c 	mul.w	r3, r3, ip
 80035a8:	f802 3b01 	strb.w	r3, [r2], #1
			data->read_address_pointer++;
 80035ac:	f8b1 36b2 	ldrh.w	r3, [r1, #1714]	; 0x6b2
 80035b0:	3301      	adds	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f8a1 36b2 	strh.w	r3, [r1, #1714]	; 0x6b2
			if (data->read_address_pointer == data->ring_bufer_size) {
 80035b8:	f8b1 36b2 	ldrh.w	r3, [r1, #1714]	; 0x6b2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	42ab      	cmp	r3, r5
 80035c0:	d0d6      	beq.n	8003570 <WS2812_prepare_data+0x70>
			else if (data->read_address_pointer == data->ring_bufer_half_size) {
 80035c2:	f8b1 36b2 	ldrh.w	r3, [r1, #1714]	; 0x6b2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f8b1 c6ac 	ldrh.w	ip, [r1, #1708]	; 0x6ac
 80035cc:	459c      	cmp	ip, r3
 80035ce:	d1dc      	bne.n	800358a <WS2812_prepare_data+0x8a>
				data->write_address_pointer = 0;
 80035d0:	f8a1 76b0 	strh.w	r7, [r1, #1712]	; 0x6b0
				data->total_read_byte_counter += data->ring_bufer_half_size;
 80035d4:	f8d1 c6b4 	ldr.w	ip, [r1, #1716]	; 0x6b4
 80035d8:	4463      	add	r3, ip
 80035da:	f8c1 36b4 	str.w	r3, [r1, #1716]	; 0x6b4
				data->update_flag = 1;
 80035de:	f881 66ae 	strb.w	r6, [r1, #1710]	; 0x6ae
 80035e2:	e7d2      	b.n	800358a <WS2812_prepare_data+0x8a>
		}

		//green
		uint8_t mask = 0b10000000;
		for (uint8_t i = 0; i < 8; i++) {
			WS2812->ring_bufer[WS2812->write_address_pointer++] = RGB_buf[1]&mask ? WS2812_1_code:WS2812_0_code;
 80035e4:	f89d 6005 	ldrb.w	r6, [sp, #5]
 80035e8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80035ec:	f103 0508 	add.w	r5, r3, #8
 80035f0:	b2ed      	uxtb	r5, r5
		uint8_t mask = 0b10000000;
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	e000      	b.n	80035f8 <WS2812_prepare_data+0xf8>
 80035f6:	4613      	mov	r3, r2
			WS2812->ring_bufer[WS2812->write_address_pointer++] = RGB_buf[1]&mask ? WS2812_1_code:WS2812_0_code;
 80035f8:	ea06 0201 	and.w	r2, r6, r1
 80035fc:	2a00      	cmp	r2, #0
 80035fe:	bf14      	ite	ne
 8003600:	2441      	movne	r4, #65	; 0x41
 8003602:	241a      	moveq	r4, #26
 8003604:	18c2      	adds	r2, r0, r3
 8003606:	7214      	strb	r4, [r2, #8]
			mask >>= 1;
 8003608:	0849      	lsrs	r1, r1, #1
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	b2d2      	uxtb	r2, r2
		for (uint8_t i = 0; i < 8; i++) {
 800360e:	42aa      	cmp	r2, r5
 8003610:	d1f1      	bne.n	80035f6 <WS2812_prepare_data+0xf6>
 8003612:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
		}

		//red
		mask = 0b10000000;
		for (uint8_t i = 0; i < 8; i++) {
			WS2812->ring_bufer[WS2812->write_address_pointer++] = RGB_buf[0]&mask ? WS2812_1_code:WS2812_0_code;
 8003616:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800361a:	3309      	adds	r3, #9
 800361c:	b2d9      	uxtb	r1, r3
		mask = 0b10000000;
 800361e:	2480      	movs	r4, #128	; 0x80
 8003620:	e000      	b.n	8003624 <WS2812_prepare_data+0x124>
 8003622:	461a      	mov	r2, r3
			WS2812->ring_bufer[WS2812->write_address_pointer++] = RGB_buf[0]&mask ? WS2812_1_code:WS2812_0_code;
 8003624:	ea06 0304 	and.w	r3, r6, r4
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf14      	ite	ne
 800362c:	2541      	movne	r5, #65	; 0x41
 800362e:	251a      	moveq	r5, #26
 8003630:	1883      	adds	r3, r0, r2
 8003632:	721d      	strb	r5, [r3, #8]
			mask >>= 1;
 8003634:	0864      	lsrs	r4, r4, #1
 8003636:	1c53      	adds	r3, r2, #1
 8003638:	b2db      	uxtb	r3, r3
		for (uint8_t i = 0; i < 8; i++) {
 800363a:	4299      	cmp	r1, r3
 800363c:	d1f1      	bne.n	8003622 <WS2812_prepare_data+0x122>
		}

		//blue
		mask = 0b10000000;
		for (uint8_t i = 0; i < 8; i++) {
			WS2812->ring_bufer[WS2812->write_address_pointer++] = RGB_buf[2]&mask ? WS2812_1_code:WS2812_0_code;
 800363e:	f89d 6006 	ldrb.w	r6, [sp, #6]
 8003642:	3209      	adds	r2, #9
 8003644:	b2d2      	uxtb	r2, r2
		mask = 0b10000000;
 8003646:	2180      	movs	r1, #128	; 0x80
			WS2812->ring_bufer[WS2812->write_address_pointer++] = RGB_buf[2]&mask ? WS2812_1_code:WS2812_0_code;
 8003648:	ea06 0401 	and.w	r4, r6, r1
 800364c:	2c00      	cmp	r4, #0
 800364e:	bf14      	ite	ne
 8003650:	2541      	movne	r5, #65	; 0x41
 8003652:	251a      	moveq	r5, #26
 8003654:	18c4      	adds	r4, r0, r3
 8003656:	7225      	strb	r5, [r4, #8]
			mask >>= 1;
 8003658:	0849      	lsrs	r1, r1, #1
 800365a:	3301      	adds	r3, #1
 800365c:	b2db      	uxtb	r3, r3
		for (uint8_t i = 0; i < 8; i++) {
 800365e:	4293      	cmp	r3, r2
 8003660:	d1f2      	bne.n	8003648 <WS2812_prepare_data+0x148>
 8003662:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a

	}

	else WS2812->write_address_pointer += WS2812->ring_bufer_half_size;

	if (WS2812->write_address_pointer == WS2812->ring_bufer_size) {
 8003666:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800366a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800366e:	429a      	cmp	r2, r3
		WS2812->write_address_pointer = 0;
 8003670:	bf04      	itt	eq
 8003672:	2300      	moveq	r3, #0
 8003674:	f880 303a 	strbeq.w	r3, [r0, #58]	; 0x3a
	}

	return HAL_OK;
}
 8003678:	2000      	movs	r0, #0
 800367a:	b002      	add	sp, #8
 800367c:	bcf0      	pop	{r4, r5, r6, r7}
 800367e:	4770      	bx	lr
	else WS2812->write_address_pointer += WS2812->ring_bufer_half_size;
 8003680:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003684:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8003688:	4413      	add	r3, r2
 800368a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800368e:	e7ea      	b.n	8003666 <WS2812_prepare_data+0x166>

08003690 <WS2812_setColor>:

void  WS2812_setColor(SD_t* data, int LED_num, COLORS color) {
 8003690:	b410      	push	{r4}
	uint16_t pos = LED_num*3;
 8003692:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003696:	b289      	uxth	r1, r1
	data->ring_bufer[pos++] = (color >> 16) & 0xFF;
 8003698:	1843      	adds	r3, r0, r1
 800369a:	0c14      	lsrs	r4, r2, #16
 800369c:	f883 42a9 	strb.w	r4, [r3, #681]	; 0x2a9
 80036a0:	1c4b      	adds	r3, r1, #1
	data->ring_bufer[pos++] = (color >>  8) & 0xFF;
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	4403      	add	r3, r0
 80036a6:	0a14      	lsrs	r4, r2, #8
 80036a8:	f883 42a9 	strb.w	r4, [r3, #681]	; 0x2a9
 80036ac:	3102      	adds	r1, #2
	data->ring_bufer[pos] = (color >>  0) & 0xFF;
 80036ae:	b289      	uxth	r1, r1
 80036b0:	4401      	add	r1, r0
 80036b2:	f881 22a9 	strb.w	r2, [r1, #681]	; 0x2a9
}
 80036b6:	bc10      	pop	{r4}
 80036b8:	4770      	bx	lr

080036ba <WS2812_fill>:

void  WS2812_fill(SD_t* data, COLORS color) {
 80036ba:	b570      	push	{r4, r5, r6, lr}
 80036bc:	4606      	mov	r6, r0
 80036be:	460d      	mov	r5, r1
	for (int LED_num = sizeof(data->ring_bufer)/3; LED_num >= 0; LED_num--) {
 80036c0:	f240 1455 	movw	r4, #341	; 0x155
		WS2812_setColor(data, LED_num, color);
 80036c4:	462a      	mov	r2, r5
 80036c6:	4621      	mov	r1, r4
 80036c8:	4630      	mov	r0, r6
 80036ca:	f7ff ffe1 	bl	8003690 <WS2812_setColor>
	for (int LED_num = sizeof(data->ring_bufer)/3; LED_num >= 0; LED_num--) {
 80036ce:	3c01      	subs	r4, #1
 80036d0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80036d4:	d1f6      	bne.n	80036c4 <WS2812_fill+0xa>
	}
}
 80036d6:	bd70      	pop	{r4, r5, r6, pc}

080036d8 <WS2812_clear>:

void  WS2812_clear(SD_t* data) {
 80036d8:	b508      	push	{r3, lr}
	memset(data->ring_bufer, 0x00, sizeof(data->ring_bufer));
 80036da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036de:	2100      	movs	r1, #0
 80036e0:	f200 20a9 	addw	r0, r0, #681	; 0x2a9
 80036e4:	f006 f99b 	bl	8009a1e <memset>
}
 80036e8:	bd08      	pop	{r3, pc}
	...

080036ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80036ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80036ee:	e003      	b.n	80036f8 <LoopCopyDataInit>

080036f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80036f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80036f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80036f6:	3104      	adds	r1, #4

080036f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80036f8:	480a      	ldr	r0, [pc, #40]	; (8003724 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80036fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80036fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003700:	d3f6      	bcc.n	80036f0 <CopyDataInit>
  ldr r2, =_sbss
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003704:	e002      	b.n	800370c <LoopFillZerobss>

08003706 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003706:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003708:	f842 3b04 	str.w	r3, [r2], #4

0800370c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800370e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003710:	d3f9      	bcc.n	8003706 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003712:	f7fe ffb3 	bl	800267c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003716:	f006 f939 	bl	800998c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800371a:	f7fe f83d 	bl	8001798 <main>
  bx lr
 800371e:	4770      	bx	lr
  ldr r3, =_sidata
 8003720:	0800b358 	.word	0x0800b358
  ldr r0, =_sdata
 8003724:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003728:	2000021c 	.word	0x2000021c
  ldr r2, =_sbss
 800372c:	2000021c 	.word	0x2000021c
  ldr r3, = _ebss
 8003730:	20000ed8 	.word	0x20000ed8

08003734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003734:	e7fe      	b.n	8003734 <ADC1_2_IRQHandler>
	...

08003738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003738:	b510      	push	{r4, lr}
 800373a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_InitTick+0x40>)
 800373e:	7818      	ldrb	r0, [r3, #0]
 8003740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003744:	fbb3 f3f0 	udiv	r3, r3, r0
 8003748:	4a0c      	ldr	r2, [pc, #48]	; (800377c <HAL_InitTick+0x44>)
 800374a:	6810      	ldr	r0, [r2, #0]
 800374c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003750:	f000 fc7c 	bl	800404c <HAL_SYSTICK_Config>
 8003754:	b968      	cbnz	r0, 8003772 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003756:	2c0f      	cmp	r4, #15
 8003758:	d901      	bls.n	800375e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800375a:	2001      	movs	r0, #1
 800375c:	e00a      	b.n	8003774 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800375e:	2200      	movs	r2, #0
 8003760:	4621      	mov	r1, r4
 8003762:	f04f 30ff 	mov.w	r0, #4294967295
 8003766:	f000 fc17 	bl	8003f98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_InitTick+0x48>)
 800376c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800376e:	2000      	movs	r0, #0
 8003770:	e000      	b.n	8003774 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8003772:	2001      	movs	r0, #1
}
 8003774:	bd10      	pop	{r4, pc}
 8003776:	bf00      	nop
 8003778:	2000002d 	.word	0x2000002d
 800377c:	20000028 	.word	0x20000028
 8003780:	20000030 	.word	0x20000030

08003784 <HAL_Init>:
{
 8003784:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003786:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <HAL_Init+0x20>)
 8003788:	6813      	ldr	r3, [r2, #0]
 800378a:	f043 0310 	orr.w	r3, r3, #16
 800378e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003790:	2003      	movs	r0, #3
 8003792:	f000 fbe3 	bl	8003f5c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003796:	2000      	movs	r0, #0
 8003798:	f7ff ffce 	bl	8003738 <HAL_InitTick>
  HAL_MspInit();
 800379c:	f7fe fece 	bl	800253c <HAL_MspInit>
}
 80037a0:	2000      	movs	r0, #0
 80037a2:	bd08      	pop	{r3, pc}
 80037a4:	40022000 	.word	0x40022000

080037a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80037a8:	4a03      	ldr	r2, [pc, #12]	; (80037b8 <HAL_IncTick+0x10>)
 80037aa:	6811      	ldr	r1, [r2, #0]
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_IncTick+0x14>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	440b      	add	r3, r1
 80037b2:	6013      	str	r3, [r2, #0]
}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000c6c 	.word	0x20000c6c
 80037bc:	2000002d 	.word	0x2000002d

080037c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037c0:	4b01      	ldr	r3, [pc, #4]	; (80037c8 <HAL_GetTick+0x8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000c6c 	.word	0x20000c6c

080037cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037cc:	b538      	push	{r3, r4, r5, lr}
 80037ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80037d0:	f7ff fff6 	bl	80037c0 <HAL_GetTick>
 80037d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037d6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80037da:	d002      	beq.n	80037e2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_Delay+0x24>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037e2:	f7ff ffed 	bl	80037c0 <HAL_GetTick>
 80037e6:	1b40      	subs	r0, r0, r5
 80037e8:	42a0      	cmp	r0, r4
 80037ea:	d3fa      	bcc.n	80037e2 <HAL_Delay+0x16>
  {
  }
}
 80037ec:	bd38      	pop	{r3, r4, r5, pc}
 80037ee:	bf00      	nop
 80037f0:	2000002d 	.word	0x2000002d

080037f4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80037f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f6:	b083      	sub	sp, #12
 80037f8:	4605      	mov	r5, r0
 80037fa:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	9301      	str	r3, [sp, #4]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003800:	6803      	ldr	r3, [r0, #0]
 8003802:	4a5b      	ldr	r2, [pc, #364]	; (8003970 <HAL_ADC_PollForConversion+0x17c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d008      	beq.n	800381a <HAL_ADC_PollForConversion+0x26>
 8003808:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800380c:	4293      	cmp	r3, r2
 800380e:	d004      	beq.n	800381a <HAL_ADC_PollForConversion+0x26>
 8003810:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8003814:	4857      	ldr	r0, [pc, #348]	; (8003974 <HAL_ADC_PollForConversion+0x180>)
 8003816:	f7fe f927 	bl	8001a68 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800381a:	f7ff ffd1 	bl	80037c0 <HAL_GetTick>
 800381e:	4607      	mov	r7, r0
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003828:	d124      	bne.n	8003874 <HAL_ADC_PollForConversion+0x80>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003830:	d103      	bne.n	800383a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003834:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8003838:	d026      	beq.n	8003888 <HAL_ADC_PollForConversion+0x94>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800383a:	4b4f      	ldr	r3, [pc, #316]	; (8003978 <HAL_ADC_PollForConversion+0x184>)
 800383c:	681e      	ldr	r6, [r3, #0]
 800383e:	2002      	movs	r0, #2
 8003840:	f001 fd9e 	bl	8005380 <HAL_RCCEx_GetPeriphCLKFreq>
 8003844:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	6919      	ldr	r1, [r3, #16]
 800384c:	4a4b      	ldr	r2, [pc, #300]	; (800397c <HAL_ADC_PollForConversion+0x188>)
 800384e:	4211      	tst	r1, r2
 8003850:	d131      	bne.n	80038b6 <HAL_ADC_PollForConversion+0xc2>
 8003852:	68d9      	ldr	r1, [r3, #12]
 8003854:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 8003858:	4211      	tst	r1, r2
 800385a:	d12c      	bne.n	80038b6 <HAL_ADC_PollForConversion+0xc2>
 800385c:	6919      	ldr	r1, [r3, #16]
 800385e:	4a48      	ldr	r2, [pc, #288]	; (8003980 <HAL_ADC_PollForConversion+0x18c>)
 8003860:	4211      	tst	r1, r2
 8003862:	d152      	bne.n	800390a <HAL_ADC_PollForConversion+0x116>
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_ADC_PollForConversion+0x190>)
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2629      	movne	r6, #41	; 0x29
 8003870:	2614      	moveq	r6, #20
 8003872:	e034      	b.n	80038de <HAL_ADC_PollForConversion+0xea>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003874:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003876:	f043 0320 	orr.w	r3, r3, #32
 800387a:	62ab      	str	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800387c:	2300      	movs	r3, #0
 800387e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 8003882:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8003884:	b003      	add	sp, #12
 8003886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003888:	682a      	ldr	r2, [r5, #0]
 800388a:	6813      	ldr	r3, [r2, #0]
 800388c:	f013 0f02 	tst.w	r3, #2
 8003890:	d12a      	bne.n	80038e8 <HAL_ADC_PollForConversion+0xf4>
      if(Timeout != HAL_MAX_DELAY)
 8003892:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003896:	d0f8      	beq.n	800388a <HAL_ADC_PollForConversion+0x96>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003898:	b124      	cbz	r4, 80038a4 <HAL_ADC_PollForConversion+0xb0>
 800389a:	f7ff ff91 	bl	80037c0 <HAL_GetTick>
 800389e:	1bc0      	subs	r0, r0, r7
 80038a0:	42a0      	cmp	r0, r4
 80038a2:	d9f1      	bls.n	8003888 <HAL_ADC_PollForConversion+0x94>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80038a6:	f043 0304 	orr.w	r3, r3, #4
 80038aa:	62ab      	str	r3, [r5, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80038ac:	2300      	movs	r3, #0
 80038ae:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
          return HAL_TIMEOUT;
 80038b2:	2003      	movs	r0, #3
 80038b4:	e7e6      	b.n	8003884 <HAL_ADC_PollForConversion+0x90>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80038b6:	6919      	ldr	r1, [r3, #16]
 80038b8:	4a31      	ldr	r2, [pc, #196]	; (8003980 <HAL_ADC_PollForConversion+0x18c>)
 80038ba:	4211      	tst	r1, r2
 80038bc:	d104      	bne.n	80038c8 <HAL_ADC_PollForConversion+0xd4>
 80038be:	68d9      	ldr	r1, [r3, #12]
 80038c0:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80038c4:	4211      	tst	r1, r2
 80038c6:	d022      	beq.n	800390e <HAL_ADC_PollForConversion+0x11a>
 80038c8:	6919      	ldr	r1, [r3, #16]
 80038ca:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <HAL_ADC_PollForConversion+0x194>)
 80038cc:	400a      	ands	r2, r1
 80038ce:	bb02      	cbnz	r2, 8003912 <HAL_ADC_PollForConversion+0x11e>
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <HAL_ADC_PollForConversion+0x194>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf14      	ite	ne
 80038da:	26fc      	movne	r6, #252	; 0xfc
 80038dc:	2654      	moveq	r6, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80038de:	fb06 f600 	mul.w	r6, r6, r0
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80038e2:	9b01      	ldr	r3, [sp, #4]
 80038e4:	429e      	cmp	r6, r3
 80038e6:	d81c      	bhi.n	8003922 <HAL_ADC_PollForConversion+0x12e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	f06f 0212 	mvn.w	r2, #18
 80038ee:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80038f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f6:	62ab      	str	r3, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003900:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003904:	d01f      	beq.n	8003946 <HAL_ADC_PollForConversion+0x152>
  return HAL_OK;
 8003906:	2000      	movs	r0, #0
 8003908:	e7bc      	b.n	8003884 <HAL_ADC_PollForConversion+0x90>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800390a:	2629      	movs	r6, #41	; 0x29
 800390c:	e7e7      	b.n	80038de <HAL_ADC_PollForConversion+0xea>
 800390e:	2654      	movs	r6, #84	; 0x54
 8003910:	e7e5      	b.n	80038de <HAL_ADC_PollForConversion+0xea>
 8003912:	26fc      	movs	r6, #252	; 0xfc
 8003914:	e7e3      	b.n	80038de <HAL_ADC_PollForConversion+0xea>
      Conversion_Timeout_CPU_cycles ++;
 8003916:	9b01      	ldr	r3, [sp, #4]
 8003918:	3301      	adds	r3, #1
 800391a:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800391c:	9b01      	ldr	r3, [sp, #4]
 800391e:	42b3      	cmp	r3, r6
 8003920:	d2e2      	bcs.n	80038e8 <HAL_ADC_PollForConversion+0xf4>
      if(Timeout != HAL_MAX_DELAY)
 8003922:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003926:	d0f6      	beq.n	8003916 <HAL_ADC_PollForConversion+0x122>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003928:	b124      	cbz	r4, 8003934 <HAL_ADC_PollForConversion+0x140>
 800392a:	f7ff ff49 	bl	80037c0 <HAL_GetTick>
 800392e:	1bc0      	subs	r0, r0, r7
 8003930:	42a0      	cmp	r0, r4
 8003932:	d9f0      	bls.n	8003916 <HAL_ADC_PollForConversion+0x122>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003934:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	62ab      	str	r3, [r5, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800393c:	2300      	movs	r3, #0
 800393e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
          return HAL_TIMEOUT;
 8003942:	2003      	movs	r0, #3
 8003944:	e79e      	b.n	8003884 <HAL_ADC_PollForConversion+0x90>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003946:	7b2b      	ldrb	r3, [r5, #12]
 8003948:	b96b      	cbnz	r3, 8003966 <HAL_ADC_PollForConversion+0x172>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800394a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800394c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003950:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003952:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003954:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003958:	d107      	bne.n	800396a <HAL_ADC_PollForConversion+0x176>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800395a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	62ab      	str	r3, [r5, #40]	; 0x28
  return HAL_OK;
 8003962:	2000      	movs	r0, #0
 8003964:	e78e      	b.n	8003884 <HAL_ADC_PollForConversion+0x90>
 8003966:	2000      	movs	r0, #0
 8003968:	e78c      	b.n	8003884 <HAL_ADC_PollForConversion+0x90>
 800396a:	2000      	movs	r0, #0
 800396c:	e78a      	b.n	8003884 <HAL_ADC_PollForConversion+0x90>
 800396e:	bf00      	nop
 8003970:	40012400 	.word	0x40012400
 8003974:	0800ae30 	.word	0x0800ae30
 8003978:	20000028 	.word	0x20000028
 800397c:	24924924 	.word	0x24924924
 8003980:	12492492 	.word	0x12492492
 8003984:	00492492 	.word	0x00492492
 8003988:	00249249 	.word	0x00249249

0800398c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800398c:	b510      	push	{r4, lr}
 800398e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003990:	6803      	ldr	r3, [r0, #0]
 8003992:	4a07      	ldr	r2, [pc, #28]	; (80039b0 <HAL_ADC_GetValue+0x24>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d008      	beq.n	80039aa <HAL_ADC_GetValue+0x1e>
 8003998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_ADC_GetValue+0x1e>
 80039a0:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 80039a4:	4803      	ldr	r0, [pc, #12]	; (80039b4 <HAL_ADC_GetValue+0x28>)
 80039a6:	f7fe f85f 	bl	8001a68 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80039ae:	bd10      	pop	{r4, pc}
 80039b0:	40012400 	.word	0x40012400
 80039b4:	0800ae30 	.word	0x0800ae30

080039b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80039b8:	b530      	push	{r4, r5, lr}
 80039ba:	b083      	sub	sp, #12
 80039bc:	4605      	mov	r5, r0
 80039be:	460c      	mov	r4, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80039c4:	6803      	ldr	r3, [r0, #0]
 80039c6:	4a60      	ldr	r2, [pc, #384]	; (8003b48 <HAL_ADC_ConfigChannel+0x190>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d008      	beq.n	80039de <HAL_ADC_ConfigChannel+0x26>
 80039cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_ADC_ConfigChannel+0x26>
 80039d4:	f240 71ce 	movw	r1, #1998	; 0x7ce
 80039d8:	485c      	ldr	r0, [pc, #368]	; (8003b4c <HAL_ADC_ConfigChannel+0x194>)
 80039da:	f7fe f845 	bl	8001a68 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	2b11      	cmp	r3, #17
 80039e2:	d83a      	bhi.n	8003a5a <HAL_ADC_ConfigChannel+0xa2>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80039e4:	6863      	ldr	r3, [r4, #4]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	2b0f      	cmp	r3, #15
 80039ea:	d83c      	bhi.n	8003a66 <HAL_ADC_ConfigChannel+0xae>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80039ec:	68a3      	ldr	r3, [r4, #8]
 80039ee:	2b07      	cmp	r3, #7
 80039f0:	d83f      	bhi.n	8003a72 <HAL_ADC_ConfigChannel+0xba>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039f2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	f000 80a4 	beq.w	8003b44 <HAL_ADC_ConfigChannel+0x18c>
 80039fc:	2301      	movs	r3, #1
 80039fe:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a02:	6863      	ldr	r3, [r4, #4]
 8003a04:	2b06      	cmp	r3, #6
 8003a06:	d83a      	bhi.n	8003a7e <HAL_ADC_ConfigChannel+0xc6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003a08:	6828      	ldr	r0, [r5, #0]
 8003a0a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003a0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a10:	3b05      	subs	r3, #5
 8003a12:	211f      	movs	r1, #31
 8003a14:	4099      	lsls	r1, r3
 8003a16:	ea22 0201 	bic.w	r2, r2, r1
 8003a1a:	6821      	ldr	r1, [r4, #0]
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	4313      	orrs	r3, r2
 8003a22:	6343      	str	r3, [r0, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	2b09      	cmp	r3, #9
 8003a28:	d949      	bls.n	8003abe <HAL_ADC_ConfigChannel+0x106>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a2a:	6828      	ldr	r0, [r5, #0]
 8003a2c:	68c2      	ldr	r2, [r0, #12]
 8003a2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003a32:	3b1e      	subs	r3, #30
 8003a34:	2107      	movs	r1, #7
 8003a36:	4099      	lsls	r1, r3
 8003a38:	ea22 0201 	bic.w	r2, r2, r1
 8003a3c:	68a1      	ldr	r1, [r4, #8]
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60c3      	str	r3, [r0, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	3b10      	subs	r3, #16
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d945      	bls.n	8003ada <HAL_ADC_ConfigChannel+0x122>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a4e:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a50:	2300      	movs	r3, #0
 8003a52:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8003a56:	b003      	add	sp, #12
 8003a58:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003a5a:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8003a5e:	483b      	ldr	r0, [pc, #236]	; (8003b4c <HAL_ADC_ConfigChannel+0x194>)
 8003a60:	f7fe f802 	bl	8001a68 <assert_failed>
 8003a64:	e7be      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x2c>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003a66:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003a6a:	4838      	ldr	r0, [pc, #224]	; (8003b4c <HAL_ADC_ConfigChannel+0x194>)
 8003a6c:	f7fd fffc 	bl	8001a68 <assert_failed>
 8003a70:	e7bc      	b.n	80039ec <HAL_ADC_ConfigChannel+0x34>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003a72:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8003a76:	4835      	ldr	r0, [pc, #212]	; (8003b4c <HAL_ADC_ConfigChannel+0x194>)
 8003a78:	f7fd fff6 	bl	8001a68 <assert_failed>
 8003a7c:	e7b9      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 13U)
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d80e      	bhi.n	8003aa0 <HAL_ADC_ConfigChannel+0xe8>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003a82:	6828      	ldr	r0, [r5, #0]
 8003a84:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003a86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a8a:	3b23      	subs	r3, #35	; 0x23
 8003a8c:	211f      	movs	r1, #31
 8003a8e:	4099      	lsls	r1, r3
 8003a90:	ea22 0201 	bic.w	r2, r2, r1
 8003a94:	6821      	ldr	r1, [r4, #0]
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	6303      	str	r3, [r0, #48]	; 0x30
 8003a9e:	e7c1      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x6c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003aa0:	6828      	ldr	r0, [r5, #0]
 8003aa2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003aa4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003aa8:	3b41      	subs	r3, #65	; 0x41
 8003aaa:	211f      	movs	r1, #31
 8003aac:	4099      	lsls	r1, r3
 8003aae:	ea22 0201 	bic.w	r2, r2, r1
 8003ab2:	6821      	ldr	r1, [r4, #0]
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003abc:	e7b2      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x6c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003abe:	6828      	ldr	r0, [r5, #0]
 8003ac0:	6902      	ldr	r2, [r0, #16]
 8003ac2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003ac6:	2107      	movs	r1, #7
 8003ac8:	4099      	lsls	r1, r3
 8003aca:	ea22 0201 	bic.w	r2, r2, r1
 8003ace:	68a1      	ldr	r1, [r4, #8]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	6103      	str	r3, [r0, #16]
 8003ad8:	e7b5      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x8e>
    if (hadc->Instance == ADC1)
 8003ada:	682a      	ldr	r2, [r5, #0]
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <HAL_ADC_ConfigChannel+0x190>)
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d005      	beq.n	8003aee <HAL_ADC_ConfigChannel+0x136>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003ae4:	f043 0320 	orr.w	r3, r3, #32
 8003ae8:	62ab      	str	r3, [r5, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8003aea:	2001      	movs	r0, #1
 8003aec:	e7b0      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x98>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003af4:	d122      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x184>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003af6:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <HAL_ADC_ConfigChannel+0x190>)
 8003af8:	6893      	ldr	r3, [r2, #8]
 8003afa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003afe:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d001      	beq.n	8003b0a <HAL_ADC_ConfigChannel+0x152>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b06:	2000      	movs	r0, #0
 8003b08:	e7a2      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_ADC_ConfigChannel+0x198>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8003b12:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8003b16:	f202 2283 	addw	r2, r2, #643	; 0x283
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0c9b      	lsrs	r3, r3, #18
 8003b20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003b28:	9b01      	ldr	r3, [sp, #4]
 8003b2a:	b14b      	cbz	r3, 8003b40 <HAL_ADC_ConfigChannel+0x188>
            wait_loop_index--;
 8003b2c:	9b01      	ldr	r3, [sp, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003b32:	9b01      	ldr	r3, [sp, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f9      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x174>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b38:	2000      	movs	r0, #0
 8003b3a:	e789      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x98>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e787      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x98>
 8003b40:	2000      	movs	r0, #0
 8003b42:	e785      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x98>
  __HAL_LOCK(hadc);
 8003b44:	2002      	movs	r0, #2
 8003b46:	e786      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x9e>
 8003b48:	40012400 	.word	0x40012400
 8003b4c:	0800ae30 	.word	0x0800ae30
 8003b50:	20000028 	.word	0x20000028

08003b54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b54:	b530      	push	{r4, r5, lr}
 8003b56:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b5c:	6803      	ldr	r3, [r0, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	f012 0f01 	tst.w	r2, #1
 8003b64:	d12f      	bne.n	8003bc6 <ADC_Enable+0x72>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b6e:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <ADC_Enable+0x78>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <ADC_Enable+0x7c>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	0c9b      	lsrs	r3, r3, #18
 8003b7a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003b7c:	9b01      	ldr	r3, [sp, #4]
 8003b7e:	b12b      	cbz	r3, 8003b8c <ADC_Enable+0x38>
    {
      wait_loop_index--;
 8003b80:	9b01      	ldr	r3, [sp, #4]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003b86:	9b01      	ldr	r3, [sp, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f9      	bne.n	8003b80 <ADC_Enable+0x2c>
 8003b8c:	4604      	mov	r4, r0
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b8e:	f7ff fe17 	bl	80037c0 <HAL_GetTick>
 8003b92:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f013 0f01 	tst.w	r3, #1
 8003b9c:	d111      	bne.n	8003bc2 <ADC_Enable+0x6e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b9e:	f7ff fe0f 	bl	80037c0 <HAL_GetTick>
 8003ba2:	1b40      	subs	r0, r0, r5
 8003ba4:	2802      	cmp	r0, #2
 8003ba6:	d9f5      	bls.n	8003b94 <ADC_Enable+0x40>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003baa:	f043 0310 	orr.w	r3, r3, #16
 8003bae:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	62e3      	str	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      
        return HAL_ERROR;
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	e002      	b.n	8003bc8 <ADC_Enable+0x74>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e000      	b.n	8003bc8 <ADC_Enable+0x74>
 8003bc6:	2000      	movs	r0, #0
}
 8003bc8:	b003      	add	sp, #12
 8003bca:	bd30      	pop	{r4, r5, pc}
 8003bcc:	20000028 	.word	0x20000028
 8003bd0:	431bde83 	.word	0x431bde83

08003bd4 <HAL_ADC_Start>:
{
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003bd8:	6803      	ldr	r3, [r0, #0]
 8003bda:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <HAL_ADC_Start+0xfc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d008      	beq.n	8003bf2 <HAL_ADC_Start+0x1e>
 8003be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_ADC_Start+0x1e>
 8003be8:	f240 411b 	movw	r1, #1051	; 0x41b
 8003bec:	4839      	ldr	r0, [pc, #228]	; (8003cd4 <HAL_ADC_Start+0x100>)
 8003bee:	f7fd ff3b 	bl	8001a68 <assert_failed>
  __HAL_LOCK(hadc);
 8003bf2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d067      	beq.n	8003cca <HAL_ADC_Start+0xf6>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7ff ffa7 	bl	8003b54 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8003c06:	4602      	mov	r2, r0
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d159      	bne.n	8003cc0 <HAL_ADC_Start+0xec>
    ADC_STATE_CLR_SET(hadc->State,
 8003c0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	492e      	ldr	r1, [pc, #184]	; (8003cd8 <HAL_ADC_Start+0x104>)
 8003c20:	428b      	cmp	r3, r1
 8003c22:	d028      	beq.n	8003c76 <HAL_ADC_Start+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c26:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 8003c2a:	62a1      	str	r1, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c2c:	6859      	ldr	r1, [r3, #4]
 8003c2e:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8003c32:	d005      	beq.n	8003c40 <HAL_ADC_Start+0x6c>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c34:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c36:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003c3a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003c3e:	62a1      	str	r1, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c42:	f411 5f80 	tst.w	r1, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c46:	bf1a      	itte	ne
 8003c48:	6ae1      	ldrne	r1, [r4, #44]	; 0x2c
 8003c4a:	f021 0106 	bicne.w	r1, r1, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003c4e:	2100      	moveq	r1, #0
 8003c50:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8003c52:	2100      	movs	r1, #0
 8003c54:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003c58:	f06f 0102 	mvn.w	r1, #2
 8003c5c:	6019      	str	r1, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	6899      	ldr	r1, [r3, #8]
 8003c62:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 8003c66:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 8003c6a:	d01a      	beq.n	8003ca2 <HAL_ADC_Start+0xce>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003c6c:	6899      	ldr	r1, [r3, #8]
 8003c6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003c72:	6099      	str	r1, [r3, #8]
 8003c74:	e027      	b.n	8003cc6 <HAL_ADC_Start+0xf2>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c76:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8003c7a:	6849      	ldr	r1, [r1, #4]
 8003c7c:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8003c80:	d0d0      	beq.n	8003c24 <HAL_ADC_Start+0x50>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003c88:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c8a:	4911      	ldr	r1, [pc, #68]	; (8003cd0 <HAL_ADC_Start+0xfc>)
 8003c8c:	6849      	ldr	r1, [r1, #4]
 8003c8e:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8003c92:	d0d5      	beq.n	8003c40 <HAL_ADC_Start+0x6c>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c94:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c96:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003c9a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003c9e:	62a1      	str	r1, [r4, #40]	; 0x28
 8003ca0:	e7ce      	b.n	8003c40 <HAL_ADC_Start+0x6c>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003ca2:	490d      	ldr	r1, [pc, #52]	; (8003cd8 <HAL_ADC_Start+0x104>)
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	d004      	beq.n	8003cb2 <HAL_ADC_Start+0xde>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003ca8:	6899      	ldr	r1, [r3, #8]
 8003caa:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 8003cae:	6099      	str	r1, [r3, #8]
 8003cb0:	e009      	b.n	8003cc6 <HAL_ADC_Start+0xf2>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003cb2:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8003cb6:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003cb8:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8003cbc:	d1d6      	bne.n	8003c6c <HAL_ADC_Start+0x98>
 8003cbe:	e7f3      	b.n	8003ca8 <HAL_ADC_Start+0xd4>
    __HAL_UNLOCK(hadc);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003cca:	2202      	movs	r2, #2
 8003ccc:	e7fb      	b.n	8003cc6 <HAL_ADC_Start+0xf2>
 8003cce:	bf00      	nop
 8003cd0:	40012400 	.word	0x40012400
 8003cd4:	0800ae30 	.word	0x0800ae30
 8003cd8:	40012800 	.word	0x40012800

08003cdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003cdc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003cde:	6803      	ldr	r3, [r0, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	f012 0f01 	tst.w	r2, #1
 8003ce6:	d101      	bne.n	8003cec <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ce8:	2000      	movs	r0, #0
}
 8003cea:	bd38      	pop	{r3, r4, r5, pc}
 8003cec:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	f022 0201 	bic.w	r2, r2, #1
 8003cf4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003cf6:	f7ff fd63 	bl	80037c0 <HAL_GetTick>
 8003cfa:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f013 0f01 	tst.w	r3, #1
 8003d04:	d00e      	beq.n	8003d24 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d06:	f7ff fd5b 	bl	80037c0 <HAL_GetTick>
 8003d0a:	1b40      	subs	r0, r0, r5
 8003d0c:	2802      	cmp	r0, #2
 8003d0e:	d9f5      	bls.n	8003cfc <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d12:	f043 0310 	orr.w	r3, r3, #16
 8003d16:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8003d20:	2001      	movs	r0, #1
 8003d22:	e7e2      	b.n	8003cea <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8003d24:	2000      	movs	r0, #0
 8003d26:	e7e0      	b.n	8003cea <ADC_ConversionStop_Disable+0xe>

08003d28 <HAL_ADC_Init>:
  if(hadc == NULL)
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	f000 80df 	beq.w	8003eec <HAL_ADC_Init+0x1c4>
{
 8003d2e:	b538      	push	{r3, r4, r5, lr}
 8003d30:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003d32:	6803      	ldr	r3, [r0, #0]
 8003d34:	4a6e      	ldr	r2, [pc, #440]	; (8003ef0 <HAL_ADC_Init+0x1c8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d008      	beq.n	8003d4c <HAL_ADC_Init+0x24>
 8003d3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_ADC_Init+0x24>
 8003d42:	f240 11b3 	movw	r1, #435	; 0x1b3
 8003d46:	486b      	ldr	r0, [pc, #428]	; (8003ef4 <HAL_ADC_Init+0x1cc>)
 8003d48:	f7fd fe8e 	bl	8001a68 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003d4c:	6863      	ldr	r3, [r4, #4]
 8003d4e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8003d52:	d004      	beq.n	8003d5e <HAL_ADC_Init+0x36>
 8003d54:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003d58:	4866      	ldr	r0, [pc, #408]	; (8003ef4 <HAL_ADC_Init+0x1cc>)
 8003d5a:	f7fd fe85 	bl	8001a68 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8003d5e:	68a3      	ldr	r3, [r4, #8]
 8003d60:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8003d64:	d004      	beq.n	8003d70 <HAL_ADC_Init+0x48>
 8003d66:	f240 11b5 	movw	r1, #437	; 0x1b5
 8003d6a:	4862      	ldr	r0, [pc, #392]	; (8003ef4 <HAL_ADC_Init+0x1cc>)
 8003d6c:	f7fd fe7c 	bl	8001a68 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003d70:	7b23      	ldrb	r3, [r4, #12]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d85d      	bhi.n	8003e32 <HAL_ADC_Init+0x10a>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8003d76:	69e3      	ldr	r3, [r4, #28]
 8003d78:	f433 3200 	bics.w	r2, r3, #131072	; 0x20000
 8003d7c:	d00f      	beq.n	8003d9e <HAL_ADC_Init+0x76>
 8003d7e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d82:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
 8003d86:	d00a      	beq.n	8003d9e <HAL_ADC_Init+0x76>
 8003d88:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8003d8c:	d007      	beq.n	8003d9e <HAL_ADC_Init+0x76>
 8003d8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d92:	d004      	beq.n	8003d9e <HAL_ADC_Init+0x76>
 8003d94:	f240 11b7 	movw	r1, #439	; 0x1b7
 8003d98:	4856      	ldr	r0, [pc, #344]	; (8003ef4 <HAL_ADC_Init+0x1cc>)
 8003d9a:	f7fd fe65 	bl	8001a68 <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d9e:	68a3      	ldr	r3, [r4, #8]
 8003da0:	b163      	cbz	r3, 8003dbc <HAL_ADC_Init+0x94>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003da2:	6923      	ldr	r3, [r4, #16]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	2b0f      	cmp	r3, #15
 8003da8:	d849      	bhi.n	8003e3e <HAL_ADC_Init+0x116>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003daa:	7d23      	ldrb	r3, [r4, #20]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d84c      	bhi.n	8003e4a <HAL_ADC_Init+0x122>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003db0:	7d23      	ldrb	r3, [r4, #20]
 8003db2:	b11b      	cbz	r3, 8003dbc <HAL_ADC_Init+0x94>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003db4:	69a3      	ldr	r3, [r4, #24]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	2b07      	cmp	r3, #7
 8003dba:	d84c      	bhi.n	8003e56 <HAL_ADC_Init+0x12e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d04f      	beq.n	8003e62 <HAL_ADC_Init+0x13a>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f7ff ff8a 	bl	8003cdc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003dc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dca:	f013 0310 	ands.w	r3, r3, #16
 8003dce:	f040 8087 	bne.w	8003ee0 <HAL_ADC_Init+0x1b8>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	f040 8084 	bne.w	8003ee0 <HAL_ADC_Init+0x1b8>
    ADC_STATE_CLR_SET(hadc->State,
 8003dd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003dda:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003dde:	f022 0202 	bic.w	r2, r2, #2
 8003de2:	f042 0202 	orr.w	r2, r2, #2
 8003de6:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003de8:	7b25      	ldrb	r5, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003dea:	6862      	ldr	r2, [r4, #4]
 8003dec:	69e1      	ldr	r1, [r4, #28]
 8003dee:	430a      	orrs	r2, r1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003df0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003df4:	68a1      	ldr	r1, [r4, #8]
 8003df6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003dfa:	d039      	beq.n	8003e70 <HAL_ADC_Init+0x148>
 8003dfc:	2901      	cmp	r1, #1
 8003dfe:	bf08      	it	eq
 8003e00:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e04:	7d21      	ldrb	r1, [r4, #20]
 8003e06:	2901      	cmp	r1, #1
 8003e08:	d035      	beq.n	8003e76 <HAL_ADC_Init+0x14e>
      MODIFY_REG(hadc->Instance->CR1,
 8003e0a:	6825      	ldr	r5, [r4, #0]
 8003e0c:	6869      	ldr	r1, [r5, #4]
 8003e0e:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8003e12:	430b      	orrs	r3, r1
 8003e14:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003e16:	6821      	ldr	r1, [r4, #0]
 8003e18:	688d      	ldr	r5, [r1, #8]
 8003e1a:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <HAL_ADC_Init+0x1d0>)
 8003e1c:	402b      	ands	r3, r5
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e28:	d036      	beq.n	8003e98 <HAL_ADC_Init+0x170>
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d034      	beq.n	8003e98 <HAL_ADC_Init+0x170>
  uint32_t tmp_sqr1 = 0U;
 8003e2e:	2100      	movs	r1, #0
 8003e30:	e035      	b.n	8003e9e <HAL_ADC_Init+0x176>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003e32:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8003e36:	482f      	ldr	r0, [pc, #188]	; (8003ef4 <HAL_ADC_Init+0x1cc>)
 8003e38:	f7fd fe16 	bl	8001a68 <assert_failed>
 8003e3c:	e79b      	b.n	8003d76 <HAL_ADC_Init+0x4e>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003e3e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8003e42:	482c      	ldr	r0, [pc, #176]	; (8003ef4 <HAL_ADC_Init+0x1cc>)
 8003e44:	f7fd fe10 	bl	8001a68 <assert_failed>
 8003e48:	e7af      	b.n	8003daa <HAL_ADC_Init+0x82>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003e4a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8003e4e:	4829      	ldr	r0, [pc, #164]	; (8003ef4 <HAL_ADC_Init+0x1cc>)
 8003e50:	f7fd fe0a 	bl	8001a68 <assert_failed>
 8003e54:	e7ac      	b.n	8003db0 <HAL_ADC_Init+0x88>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003e56:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003e5a:	4826      	ldr	r0, [pc, #152]	; (8003ef4 <HAL_ADC_Init+0x1cc>)
 8003e5c:	f7fd fe04 	bl	8001a68 <assert_failed>
 8003e60:	e7ac      	b.n	8003dbc <HAL_ADC_Init+0x94>
    ADC_CLEAR_ERRORCODE(hadc);
 8003e62:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003e64:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f7fd f9e3 	bl	8001234 <HAL_ADC_MspInit>
 8003e6e:	e7a8      	b.n	8003dc2 <HAL_ADC_Init+0x9a>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e74:	e7c6      	b.n	8003e04 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e76:	b935      	cbnz	r5, 8003e86 <HAL_ADC_Init+0x15e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003e78:	69a1      	ldr	r1, [r4, #24]
 8003e7a:	3901      	subs	r1, #1
 8003e7c:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8003e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e84:	e7c1      	b.n	8003e0a <HAL_ADC_Init+0xe2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003e88:	f041 0120 	orr.w	r1, r1, #32
 8003e8c:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003e90:	f041 0101 	orr.w	r1, r1, #1
 8003e94:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003e96:	e7b8      	b.n	8003e0a <HAL_ADC_Init+0xe2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8003e9e:	6825      	ldr	r5, [r4, #0]
 8003ea0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003ea2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	6899      	ldr	r1, [r3, #8]
 8003eae:	4b13      	ldr	r3, [pc, #76]	; (8003efc <HAL_ADC_Init+0x1d4>)
 8003eb0:	400b      	ands	r3, r1
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d00b      	beq.n	8003ece <HAL_ADC_Init+0x1a6>
      ADC_STATE_CLR_SET(hadc->State,
 8003eb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003eb8:	f023 0312 	bic.w	r3, r3, #18
 8003ebc:	f043 0310 	orr.w	r3, r3, #16
 8003ec0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8003eca:	2001      	movs	r0, #1
 8003ecc:	e00d      	b.n	8003eea <HAL_ADC_Init+0x1c2>
      ADC_CLEAR_ERRORCODE(hadc);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003ed2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ed4:	f023 0303 	bic.w	r3, r3, #3
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ede:	e004      	b.n	8003eea <HAL_ADC_Init+0x1c2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ee2:	f043 0310 	orr.w	r3, r3, #16
 8003ee6:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8003ee8:	2001      	movs	r0, #1
}
 8003eea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003eec:	2001      	movs	r0, #1
}
 8003eee:	4770      	bx	lr
 8003ef0:	40012400 	.word	0x40012400
 8003ef4:	0800ae30 	.word	0x0800ae30
 8003ef8:	ffe1f7fd 	.word	0xffe1f7fd
 8003efc:	ff1f0efe 	.word	0xff1f0efe

08003f00 <HAL_ADC_Stop>:
{
 8003f00:	b510      	push	{r4, lr}
 8003f02:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003f04:	6803      	ldr	r3, [r0, #0]
 8003f06:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <HAL_ADC_Stop+0x54>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d008      	beq.n	8003f1e <HAL_ADC_Stop+0x1e>
 8003f0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_ADC_Stop+0x1e>
 8003f14:	f240 418c 	movw	r1, #1164	; 0x48c
 8003f18:	480f      	ldr	r0, [pc, #60]	; (8003f58 <HAL_ADC_Stop+0x58>)
 8003f1a:	f7fd fda5 	bl	8001a68 <assert_failed>
  __HAL_LOCK(hadc);
 8003f1e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d014      	beq.n	8003f50 <HAL_ADC_Stop+0x50>
 8003f26:	2301      	movs	r3, #1
 8003f28:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f7ff fed5 	bl	8003cdc <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8003f32:	4602      	mov	r2, r0
 8003f34:	b938      	cbnz	r0, 8003f46 <HAL_ADC_Stop+0x46>
    ADC_STATE_CLR_SET(hadc->State,
 8003f36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8003f46:	2300      	movs	r3, #0
 8003f48:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003f50:	2202      	movs	r2, #2
 8003f52:	e7fb      	b.n	8003f4c <HAL_ADC_Stop+0x4c>
 8003f54:	40012400 	.word	0x40012400
 8003f58:	0800ae30 	.word	0x0800ae30

08003f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003f60:	1ec3      	subs	r3, r0, #3
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d80f      	bhi.n	8003f86 <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f66:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8003f68:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f7a:	0224      	lsls	r4, r4, #8
 8003f7c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8003f80:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8003f82:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f84:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003f86:	2192      	movs	r1, #146	; 0x92
 8003f88:	4802      	ldr	r0, [pc, #8]	; (8003f94 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8003f8a:	f7fd fd6d 	bl	8001a68 <assert_failed>
 8003f8e:	e7ea      	b.n	8003f66 <HAL_NVIC_SetPriorityGrouping+0xa>
 8003f90:	e000ed00 	.word	0xe000ed00
 8003f94:	0800ae68 	.word	0x0800ae68

08003f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003fa0:	2a0f      	cmp	r2, #15
 8003fa2:	d826      	bhi.n	8003ff2 <HAL_NVIC_SetPriority+0x5a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003fa4:	2c0f      	cmp	r4, #15
 8003fa6:	d829      	bhi.n	8003ffc <HAL_NVIC_SetPriority+0x64>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <HAL_NVIC_SetPriority+0x7c>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb0:	f1c3 0207 	rsb	r2, r3, #7
 8003fb4:	2a04      	cmp	r2, #4
 8003fb6:	bf28      	it	cs
 8003fb8:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fba:	1d19      	adds	r1, r3, #4
 8003fbc:	2906      	cmp	r1, #6
 8003fbe:	bf8c      	ite	hi
 8003fc0:	3b03      	subhi	r3, #3
 8003fc2:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fcc:	ea24 0402 	bic.w	r4, r4, r2
 8003fd0:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fda:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) >= 0)
 8003fdc:	2d00      	cmp	r5, #0
 8003fde:	db12      	blt.n	8004006 <HAL_NVIC_SetPriority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe0:	0124      	lsls	r4, r4, #4
 8003fe2:	b2e4      	uxtb	r4, r4
 8003fe4:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8003fe8:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8003fec:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003ff2:	21aa      	movs	r1, #170	; 0xaa
 8003ff4:	4808      	ldr	r0, [pc, #32]	; (8004018 <HAL_NVIC_SetPriority+0x80>)
 8003ff6:	f7fd fd37 	bl	8001a68 <assert_failed>
 8003ffa:	e7d3      	b.n	8003fa4 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003ffc:	21ab      	movs	r1, #171	; 0xab
 8003ffe:	4806      	ldr	r0, [pc, #24]	; (8004018 <HAL_NVIC_SetPriority+0x80>)
 8004000:	f7fd fd32 	bl	8001a68 <assert_failed>
 8004004:	e7d0      	b.n	8003fa8 <HAL_NVIC_SetPriority+0x10>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004006:	f005 050f 	and.w	r5, r5, #15
 800400a:	0124      	lsls	r4, r4, #4
 800400c:	b2e4      	uxtb	r4, r4
 800400e:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_NVIC_SetPriority+0x84>)
 8004010:	555c      	strb	r4, [r3, r5]
}
 8004012:	e7ed      	b.n	8003ff0 <HAL_NVIC_SetPriority+0x58>
 8004014:	e000ed00 	.word	0xe000ed00
 8004018:	0800ae68 	.word	0x0800ae68
 800401c:	e000ed14 	.word	0xe000ed14

08004020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004022:	2800      	cmp	r0, #0
 8004024:	db09      	blt.n	800403a <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004026:	0942      	lsrs	r2, r0, #5
 8004028:	f000 001f 	and.w	r0, r0, #31
 800402c:	2301      	movs	r3, #1
 800402e:	fa03 f000 	lsl.w	r0, r3, r0
 8004032:	4b04      	ldr	r3, [pc, #16]	; (8004044 <HAL_NVIC_EnableIRQ+0x24>)
 8004034:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004038:	bd08      	pop	{r3, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800403a:	21be      	movs	r1, #190	; 0xbe
 800403c:	4802      	ldr	r0, [pc, #8]	; (8004048 <HAL_NVIC_EnableIRQ+0x28>)
 800403e:	f7fd fd13 	bl	8001a68 <assert_failed>
}
 8004042:	e7f9      	b.n	8004038 <HAL_NVIC_EnableIRQ+0x18>
 8004044:	e000e100 	.word	0xe000e100
 8004048:	0800ae68 	.word	0x0800ae68

0800404c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800404c:	3801      	subs	r0, #1
 800404e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004052:	d20a      	bcs.n	800406a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_SYSTICK_Config+0x24>)
 8004056:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004058:	4a06      	ldr	r2, [pc, #24]	; (8004074 <HAL_SYSTICK_Config+0x28>)
 800405a:	21f0      	movs	r1, #240	; 0xf0
 800405c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004060:	2000      	movs	r0, #0
 8004062:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004064:	2207      	movs	r2, #7
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800406a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	e000e010 	.word	0xe000e010
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004078:	2800      	cmp	r0, #0
 800407a:	f000 808f 	beq.w	800419c <HAL_DMA_Init+0x124>
{
 800407e:	b510      	push	{r4, lr}
 8004080:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8004082:	6803      	ldr	r3, [r0, #0]
 8004084:	4a46      	ldr	r2, [pc, #280]	; (80041a0 <HAL_DMA_Init+0x128>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d015      	beq.n	80040b6 <HAL_DMA_Init+0x3e>
 800408a:	3214      	adds	r2, #20
 800408c:	4293      	cmp	r3, r2
 800408e:	d012      	beq.n	80040b6 <HAL_DMA_Init+0x3e>
 8004090:	3214      	adds	r2, #20
 8004092:	4293      	cmp	r3, r2
 8004094:	d00f      	beq.n	80040b6 <HAL_DMA_Init+0x3e>
 8004096:	3214      	adds	r2, #20
 8004098:	4293      	cmp	r3, r2
 800409a:	d00c      	beq.n	80040b6 <HAL_DMA_Init+0x3e>
 800409c:	3214      	adds	r2, #20
 800409e:	4293      	cmp	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_DMA_Init+0x3e>
 80040a2:	3214      	adds	r2, #20
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d006      	beq.n	80040b6 <HAL_DMA_Init+0x3e>
 80040a8:	3214      	adds	r2, #20
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <HAL_DMA_Init+0x3e>
 80040ae:	219a      	movs	r1, #154	; 0x9a
 80040b0:	483c      	ldr	r0, [pc, #240]	; (80041a4 <HAL_DMA_Init+0x12c>)
 80040b2:	f7fd fcd9 	bl	8001a68 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80040b6:	6863      	ldr	r3, [r4, #4]
 80040b8:	f033 0210 	bics.w	r2, r3, #16
 80040bc:	d002      	beq.n	80040c4 <HAL_DMA_Init+0x4c>
 80040be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040c2:	d152      	bne.n	800416a <HAL_DMA_Init+0xf2>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80040c4:	68a3      	ldr	r3, [r4, #8]
 80040c6:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80040ca:	d153      	bne.n	8004174 <HAL_DMA_Init+0xfc>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80040cc:	68e3      	ldr	r3, [r4, #12]
 80040ce:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80040d2:	d154      	bne.n	800417e <HAL_DMA_Init+0x106>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80040d4:	6923      	ldr	r3, [r4, #16]
 80040d6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80040da:	d002      	beq.n	80040e2 <HAL_DMA_Init+0x6a>
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e0:	d152      	bne.n	8004188 <HAL_DMA_Init+0x110>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80040e2:	6963      	ldr	r3, [r4, #20]
 80040e4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80040e8:	d002      	beq.n	80040f0 <HAL_DMA_Init+0x78>
 80040ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ee:	d150      	bne.n	8004192 <HAL_DMA_Init+0x11a>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80040f0:	69a3      	ldr	r3, [r4, #24]
 80040f2:	f033 0320 	bics.w	r3, r3, #32
 80040f6:	d003      	beq.n	8004100 <HAL_DMA_Init+0x88>
 80040f8:	21a0      	movs	r1, #160	; 0xa0
 80040fa:	482a      	ldr	r0, [pc, #168]	; (80041a4 <HAL_DMA_Init+0x12c>)
 80040fc:	f7fd fcb4 	bl	8001a68 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004100:	69e3      	ldr	r3, [r4, #28]
 8004102:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8004106:	d006      	beq.n	8004116 <HAL_DMA_Init+0x9e>
 8004108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410c:	d003      	beq.n	8004116 <HAL_DMA_Init+0x9e>
 800410e:	21a1      	movs	r1, #161	; 0xa1
 8004110:	4824      	ldr	r0, [pc, #144]	; (80041a4 <HAL_DMA_Init+0x12c>)
 8004112:	f7fd fca9 	bl	8001a68 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004116:	6822      	ldr	r2, [r4, #0]
 8004118:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <HAL_DMA_Init+0x130>)
 800411a:	4413      	add	r3, r2
 800411c:	4923      	ldr	r1, [pc, #140]	; (80041ac <HAL_DMA_Init+0x134>)
 800411e:	fba1 1303 	umull	r1, r3, r1, r3
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004128:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <HAL_DMA_Init+0x138>)
 800412a:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800412c:	2302      	movs	r3, #2
 800412e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004132:	6811      	ldr	r1, [r2, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004134:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8004138:	f021 0130 	bic.w	r1, r1, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800413c:	6863      	ldr	r3, [r4, #4]
 800413e:	68a0      	ldr	r0, [r4, #8]
 8004140:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004142:	68e0      	ldr	r0, [r4, #12]
 8004144:	4303      	orrs	r3, r0
 8004146:	6920      	ldr	r0, [r4, #16]
 8004148:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414a:	6960      	ldr	r0, [r4, #20]
 800414c:	4303      	orrs	r3, r0
 800414e:	69a0      	ldr	r0, [r4, #24]
 8004150:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004152:	69e0      	ldr	r0, [r4, #28]
 8004154:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8004156:	430b      	orrs	r3, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004158:	6013      	str	r3, [r2, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800415a:	2000      	movs	r0, #0
 800415c:	63a0      	str	r0, [r4, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800415e:	2301      	movs	r3, #1
 8004160:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004164:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 8004168:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800416a:	219b      	movs	r1, #155	; 0x9b
 800416c:	480d      	ldr	r0, [pc, #52]	; (80041a4 <HAL_DMA_Init+0x12c>)
 800416e:	f7fd fc7b 	bl	8001a68 <assert_failed>
 8004172:	e7a7      	b.n	80040c4 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004174:	219c      	movs	r1, #156	; 0x9c
 8004176:	480b      	ldr	r0, [pc, #44]	; (80041a4 <HAL_DMA_Init+0x12c>)
 8004178:	f7fd fc76 	bl	8001a68 <assert_failed>
 800417c:	e7a6      	b.n	80040cc <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800417e:	219d      	movs	r1, #157	; 0x9d
 8004180:	4808      	ldr	r0, [pc, #32]	; (80041a4 <HAL_DMA_Init+0x12c>)
 8004182:	f7fd fc71 	bl	8001a68 <assert_failed>
 8004186:	e7a5      	b.n	80040d4 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004188:	219e      	movs	r1, #158	; 0x9e
 800418a:	4806      	ldr	r0, [pc, #24]	; (80041a4 <HAL_DMA_Init+0x12c>)
 800418c:	f7fd fc6c 	bl	8001a68 <assert_failed>
 8004190:	e7a7      	b.n	80040e2 <HAL_DMA_Init+0x6a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004192:	219f      	movs	r1, #159	; 0x9f
 8004194:	4803      	ldr	r0, [pc, #12]	; (80041a4 <HAL_DMA_Init+0x12c>)
 8004196:	f7fd fc67 	bl	8001a68 <assert_failed>
 800419a:	e7a9      	b.n	80040f0 <HAL_DMA_Init+0x78>
    return HAL_ERROR;
 800419c:	2001      	movs	r0, #1
}
 800419e:	4770      	bx	lr
 80041a0:	40020008 	.word	0x40020008
 80041a4:	0800aea4 	.word	0x0800aea4
 80041a8:	bffdfff8 	.word	0xbffdfff8
 80041ac:	cccccccd 	.word	0xcccccccd
 80041b0:	40020000 	.word	0x40020000

080041b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	4604      	mov	r4, r0
 80041b8:	460f      	mov	r7, r1
 80041ba:	4616      	mov	r6, r2
 80041bc:	461d      	mov	r5, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80041be:	1e5a      	subs	r2, r3, #1
 80041c0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d80f      	bhi.n	80041e8 <HAL_DMA_Start_IT+0x34>

  /* Process locked */
  __HAL_LOCK(hdma);
 80041c8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d047      	beq.n	8004260 <HAL_DMA_Start_IT+0xac>
 80041d0:	2301      	movs	r3, #1
 80041d2:	f884 3020 	strb.w	r3, [r4, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041d6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d00a      	beq.n	80041f4 <HAL_DMA_Start_IT+0x40>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80041de:	2300      	movs	r3, #0
 80041e0:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80041e4:	2002      	movs	r0, #2
  }    
  return status;
}
 80041e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80041e8:	f240 116f 	movw	r1, #367	; 0x16f
 80041ec:	481d      	ldr	r0, [pc, #116]	; (8004264 <HAL_DMA_Start_IT+0xb0>)
 80041ee:	f7fd fc3b 	bl	8001a68 <assert_failed>
 80041f2:	e7e9      	b.n	80041c8 <HAL_DMA_Start_IT+0x14>
    hdma->State = HAL_DMA_STATE_BUSY;
 80041f4:	2302      	movs	r3, #2
 80041f6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	6813      	ldr	r3, [r2, #0]
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	6013      	str	r3, [r2, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004208:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800420a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800420c:	2301      	movs	r3, #1
 800420e:	408b      	lsls	r3, r1
 8004210:	6053      	str	r3, [r2, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	605d      	str	r5, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004216:	6863      	ldr	r3, [r4, #4]
 8004218:	2b10      	cmp	r3, #16
 800421a:	d011      	beq.n	8004240 <HAL_DMA_Start_IT+0x8c>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	609f      	str	r7, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	60de      	str	r6, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8004224:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004226:	b183      	cbz	r3, 800424a <HAL_DMA_Start_IT+0x96>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004228:	6822      	ldr	r2, [r4, #0]
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	f043 030e 	orr.w	r3, r3, #14
 8004230:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	6813      	ldr	r3, [r2, #0]
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423c:	2000      	movs	r0, #0
 800423e:	e7d2      	b.n	80041e6 <HAL_DMA_Start_IT+0x32>
    hdma->Instance->CPAR = DstAddress;
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	609e      	str	r6, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	60df      	str	r7, [r3, #12]
 8004248:	e7ec      	b.n	8004224 <HAL_DMA_Start_IT+0x70>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	6813      	ldr	r3, [r2, #0]
 800424e:	f023 0304 	bic.w	r3, r3, #4
 8004252:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004254:	6822      	ldr	r2, [r4, #0]
 8004256:	6813      	ldr	r3, [r2, #0]
 8004258:	f043 030a 	orr.w	r3, r3, #10
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e7e8      	b.n	8004232 <HAL_DMA_Start_IT+0x7e>
  __HAL_LOCK(hdma);
 8004260:	2002      	movs	r0, #2
 8004262:	e7c0      	b.n	80041e6 <HAL_DMA_Start_IT+0x32>
 8004264:	0800aea4 	.word	0x0800aea4

08004268 <HAL_DMA_Abort_IT>:
{  
 8004268:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800426a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800426e:	2b02      	cmp	r3, #2
 8004270:	d003      	beq.n	800427a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004272:	2304      	movs	r3, #4
 8004274:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8004276:	2001      	movs	r0, #1
}
 8004278:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427a:	6802      	ldr	r2, [r0, #0]
 800427c:	6813      	ldr	r3, [r2, #0]
 800427e:	f023 030e 	bic.w	r3, r3, #14
 8004282:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004284:	6802      	ldr	r2, [r0, #0]
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800428e:	6803      	ldr	r3, [r0, #0]
 8004290:	4a18      	ldr	r2, [pc, #96]	; (80042f4 <HAL_DMA_Abort_IT+0x8c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_DMA_Abort_IT+0x56>
 8004296:	3214      	adds	r2, #20
 8004298:	4293      	cmp	r3, r2
 800429a:	d01e      	beq.n	80042da <HAL_DMA_Abort_IT+0x72>
 800429c:	3214      	adds	r2, #20
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01d      	beq.n	80042de <HAL_DMA_Abort_IT+0x76>
 80042a2:	3214      	adds	r2, #20
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d01d      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x7c>
 80042a8:	3214      	adds	r2, #20
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01d      	beq.n	80042ea <HAL_DMA_Abort_IT+0x82>
 80042ae:	3214      	adds	r2, #20
 80042b0:	4293      	cmp	r3, r2
 80042b2:	bf0c      	ite	eq
 80042b4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80042b8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80042bc:	e000      	b.n	80042c0 <HAL_DMA_Abort_IT+0x58>
 80042be:	2301      	movs	r3, #1
 80042c0:	4a0d      	ldr	r2, [pc, #52]	; (80042f8 <HAL_DMA_Abort_IT+0x90>)
 80042c2:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80042ca:	2300      	movs	r3, #0
 80042cc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80042d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042d2:	b16b      	cbz	r3, 80042f0 <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 80042d4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80042d6:	2000      	movs	r0, #0
 80042d8:	e7ce      	b.n	8004278 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80042da:	2310      	movs	r3, #16
 80042dc:	e7f0      	b.n	80042c0 <HAL_DMA_Abort_IT+0x58>
 80042de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042e2:	e7ed      	b.n	80042c0 <HAL_DMA_Abort_IT+0x58>
 80042e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e8:	e7ea      	b.n	80042c0 <HAL_DMA_Abort_IT+0x58>
 80042ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ee:	e7e7      	b.n	80042c0 <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2000      	movs	r0, #0
 80042f2:	e7c1      	b.n	8004278 <HAL_DMA_Abort_IT+0x10>
 80042f4:	40020008 	.word	0x40020008
 80042f8:	40020000 	.word	0x40020000

080042fc <HAL_DMA_IRQHandler>:
{
 80042fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042fe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004300:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004302:	6804      	ldr	r4, [r0, #0]
 8004304:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004306:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004308:	2304      	movs	r3, #4
 800430a:	408b      	lsls	r3, r1
 800430c:	4213      	tst	r3, r2
 800430e:	d034      	beq.n	800437a <HAL_DMA_IRQHandler+0x7e>
 8004310:	f015 0f04 	tst.w	r5, #4
 8004314:	d031      	beq.n	800437a <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	f013 0f20 	tst.w	r3, #32
 800431c:	d103      	bne.n	8004326 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	f023 0304 	bic.w	r3, r3, #4
 8004324:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004326:	6803      	ldr	r3, [r0, #0]
 8004328:	4a42      	ldr	r2, [pc, #264]	; (8004434 <HAL_DMA_IRQHandler+0x138>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_DMA_IRQHandler+0x5a>
 800432e:	3214      	adds	r2, #20
 8004330:	4293      	cmp	r3, r2
 8004332:	d017      	beq.n	8004364 <HAL_DMA_IRQHandler+0x68>
 8004334:	3214      	adds	r2, #20
 8004336:	4293      	cmp	r3, r2
 8004338:	d016      	beq.n	8004368 <HAL_DMA_IRQHandler+0x6c>
 800433a:	3214      	adds	r2, #20
 800433c:	4293      	cmp	r3, r2
 800433e:	d016      	beq.n	800436e <HAL_DMA_IRQHandler+0x72>
 8004340:	3214      	adds	r2, #20
 8004342:	4293      	cmp	r3, r2
 8004344:	d016      	beq.n	8004374 <HAL_DMA_IRQHandler+0x78>
 8004346:	3214      	adds	r2, #20
 8004348:	4293      	cmp	r3, r2
 800434a:	bf0c      	ite	eq
 800434c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8004350:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8004354:	e000      	b.n	8004358 <HAL_DMA_IRQHandler+0x5c>
 8004356:	2304      	movs	r3, #4
 8004358:	4a37      	ldr	r2, [pc, #220]	; (8004438 <HAL_DMA_IRQHandler+0x13c>)
 800435a:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800435c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800435e:	b103      	cbz	r3, 8004362 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8004360:	4798      	blx	r3
}
 8004362:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	e7f7      	b.n	8004358 <HAL_DMA_IRQHandler+0x5c>
 8004368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800436c:	e7f4      	b.n	8004358 <HAL_DMA_IRQHandler+0x5c>
 800436e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004372:	e7f1      	b.n	8004358 <HAL_DMA_IRQHandler+0x5c>
 8004374:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004378:	e7ee      	b.n	8004358 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800437a:	2302      	movs	r3, #2
 800437c:	408b      	lsls	r3, r1
 800437e:	4213      	tst	r3, r2
 8004380:	d03b      	beq.n	80043fa <HAL_DMA_IRQHandler+0xfe>
 8004382:	f015 0f02 	tst.w	r5, #2
 8004386:	d038      	beq.n	80043fa <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	f013 0f20 	tst.w	r3, #32
 800438e:	d106      	bne.n	800439e <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	f023 030a 	bic.w	r3, r3, #10
 8004396:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004398:	2301      	movs	r3, #1
 800439a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800439e:	6803      	ldr	r3, [r0, #0]
 80043a0:	4a24      	ldr	r2, [pc, #144]	; (8004434 <HAL_DMA_IRQHandler+0x138>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 80043a6:	3214      	adds	r2, #20
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d01b      	beq.n	80043e4 <HAL_DMA_IRQHandler+0xe8>
 80043ac:	3214      	adds	r2, #20
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01a      	beq.n	80043e8 <HAL_DMA_IRQHandler+0xec>
 80043b2:	3214      	adds	r2, #20
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d01a      	beq.n	80043ee <HAL_DMA_IRQHandler+0xf2>
 80043b8:	3214      	adds	r2, #20
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01a      	beq.n	80043f4 <HAL_DMA_IRQHandler+0xf8>
 80043be:	3214      	adds	r2, #20
 80043c0:	4293      	cmp	r3, r2
 80043c2:	bf0c      	ite	eq
 80043c4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80043c8:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80043cc:	e000      	b.n	80043d0 <HAL_DMA_IRQHandler+0xd4>
 80043ce:	2302      	movs	r3, #2
 80043d0:	4a19      	ldr	r2, [pc, #100]	; (8004438 <HAL_DMA_IRQHandler+0x13c>)
 80043d2:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80043d4:	2300      	movs	r3, #0
 80043d6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80043da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0c0      	beq.n	8004362 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 80043e0:	4798      	blx	r3
 80043e2:	e7be      	b.n	8004362 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80043e4:	2320      	movs	r3, #32
 80043e6:	e7f3      	b.n	80043d0 <HAL_DMA_IRQHandler+0xd4>
 80043e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ec:	e7f0      	b.n	80043d0 <HAL_DMA_IRQHandler+0xd4>
 80043ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043f2:	e7ed      	b.n	80043d0 <HAL_DMA_IRQHandler+0xd4>
 80043f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043f8:	e7ea      	b.n	80043d0 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043fa:	2308      	movs	r3, #8
 80043fc:	fa03 f101 	lsl.w	r1, r3, r1
 8004400:	4211      	tst	r1, r2
 8004402:	d0ae      	beq.n	8004362 <HAL_DMA_IRQHandler+0x66>
 8004404:	f015 0f08 	tst.w	r5, #8
 8004408:	d0ab      	beq.n	8004362 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	f023 030e 	bic.w	r3, r3, #14
 8004410:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004412:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004414:	2301      	movs	r3, #1
 8004416:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004418:	fa03 f202 	lsl.w	r2, r3, r2
 800441c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800441e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8004420:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8004424:	2300      	movs	r3, #0
 8004426:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800442a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800442c:	2b00      	cmp	r3, #0
 800442e:	d098      	beq.n	8004362 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8004430:	4798      	blx	r3
  return;
 8004432:	e796      	b.n	8004362 <HAL_DMA_IRQHandler+0x66>
 8004434:	40020008 	.word	0x40020008
 8004438:	40020000 	.word	0x40020000

0800443c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004440:	b083      	sub	sp, #12
 8004442:	4680      	mov	r8, r0
 8004444:	460f      	mov	r7, r1
  uint32_t config = 0x00u;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004446:	4bad      	ldr	r3, [pc, #692]	; (80046fc <HAL_GPIO_Init+0x2c0>)
 8004448:	4298      	cmp	r0, r3
 800444a:	d013      	beq.n	8004474 <HAL_GPIO_Init+0x38>
 800444c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004450:	4298      	cmp	r0, r3
 8004452:	d00f      	beq.n	8004474 <HAL_GPIO_Init+0x38>
 8004454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004458:	4298      	cmp	r0, r3
 800445a:	d00b      	beq.n	8004474 <HAL_GPIO_Init+0x38>
 800445c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004460:	4298      	cmp	r0, r3
 8004462:	d007      	beq.n	8004474 <HAL_GPIO_Init+0x38>
 8004464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004468:	4298      	cmp	r0, r3
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x38>
 800446c:	21bd      	movs	r1, #189	; 0xbd
 800446e:	48a4      	ldr	r0, [pc, #656]	; (8004700 <HAL_GPIO_Init+0x2c4>)
 8004470:	f7fd fafa 	bl	8001a68 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	b29a      	uxth	r2, r3
 8004478:	b112      	cbz	r2, 8004480 <HAL_GPIO_Init+0x44>
 800447a:	0c1b      	lsrs	r3, r3, #16
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	b11b      	cbz	r3, 8004488 <HAL_GPIO_Init+0x4c>
 8004480:	21be      	movs	r1, #190	; 0xbe
 8004482:	489f      	ldr	r0, [pc, #636]	; (8004700 <HAL_GPIO_Init+0x2c4>)
 8004484:	f7fd faf0 	bl	8001a68 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b03      	cmp	r3, #3
 800448c:	d917      	bls.n	80044be <HAL_GPIO_Init+0x82>
 800448e:	f1a3 0211 	sub.w	r2, r3, #17
 8004492:	2a01      	cmp	r2, #1
 8004494:	d913      	bls.n	80044be <HAL_GPIO_Init+0x82>
 8004496:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800449a:	499a      	ldr	r1, [pc, #616]	; (8004704 <HAL_GPIO_Init+0x2c8>)
 800449c:	428a      	cmp	r2, r1
 800449e:	d00e      	beq.n	80044be <HAL_GPIO_Init+0x82>
 80044a0:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80044a4:	428b      	cmp	r3, r1
 80044a6:	d00a      	beq.n	80044be <HAL_GPIO_Init+0x82>
 80044a8:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80044ac:	428a      	cmp	r2, r1
 80044ae:	d006      	beq.n	80044be <HAL_GPIO_Init+0x82>
 80044b0:	4a95      	ldr	r2, [pc, #596]	; (8004708 <HAL_GPIO_Init+0x2cc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_Init+0x82>
 80044b6:	21bf      	movs	r1, #191	; 0xbf
 80044b8:	4891      	ldr	r0, [pc, #580]	; (8004700 <HAL_GPIO_Init+0x2c4>)
 80044ba:	f7fd fad5 	bl	8001a68 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044be:	683c      	ldr	r4, [r7, #0]
 80044c0:	2c00      	cmp	r4, #0
 80044c2:	f000 8118 	beq.w	80046f6 <HAL_GPIO_Init+0x2ba>
 80044c6:	f04f 0a00 	mov.w	sl, #0
 80044ca:	4656      	mov	r6, sl
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80044cc:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80046fc <HAL_GPIO_Init+0x2c0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044d0:	f8df 9248 	ldr.w	r9, [pc, #584]	; 800471c <HAL_GPIO_Init+0x2e0>
 80044d4:	e0ac      	b.n	8004630 <HAL_GPIO_Init+0x1f4>
      switch (GPIO_Init->Mode)
 80044d6:	b30b      	cbz	r3, 800451c <HAL_GPIO_Init+0xe0>
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d132      	bne.n	8004542 <HAL_GPIO_Init+0x106>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3b01      	subs	r3, #1
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	f200 80d6 	bhi.w	8004692 <HAL_GPIO_Init+0x256>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044e6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
          break;
 80044ea:	e02a      	b.n	8004542 <HAL_GPIO_Init+0x106>
      switch (GPIO_Init->Mode)
 80044ec:	4a87      	ldr	r2, [pc, #540]	; (800470c <HAL_GPIO_Init+0x2d0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d014      	beq.n	800451c <HAL_GPIO_Init+0xe0>
 80044f2:	d90b      	bls.n	800450c <HAL_GPIO_Init+0xd0>
 80044f4:	4a86      	ldr	r2, [pc, #536]	; (8004710 <HAL_GPIO_Init+0x2d4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d010      	beq.n	800451c <HAL_GPIO_Init+0xe0>
 80044fa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00c      	beq.n	800451c <HAL_GPIO_Init+0xe0>
 8004502:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8004506:	4293      	cmp	r3, r2
 8004508:	d11b      	bne.n	8004542 <HAL_GPIO_Init+0x106>
 800450a:	e007      	b.n	800451c <HAL_GPIO_Init+0xe0>
 800450c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <HAL_GPIO_Init+0xe0>
 8004514:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004518:	4293      	cmp	r3, r2
 800451a:	d112      	bne.n	8004542 <HAL_GPIO_Init+0x106>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b02      	cmp	r3, #2
 8004520:	f200 80db 	bhi.w	80046da <HAL_GPIO_Init+0x29e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 80dc 	beq.w	80046e4 <HAL_GPIO_Init+0x2a8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800452c:	2b01      	cmp	r3, #1
            GPIOx->BSRR = ioposition;
 800452e:	bf0c      	ite	eq
 8004530:	f8c8 5010 	streq.w	r5, [r8, #16]
            GPIOx->BRR = ioposition;
 8004534:	f8c8 5014 	strne.w	r5, [r8, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004538:	f04f 0a08 	mov.w	sl, #8
 800453c:	e001      	b.n	8004542 <HAL_GPIO_Init+0x106>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800453e:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004542:	2cff      	cmp	r4, #255	; 0xff
 8004544:	bf99      	ittee	ls
 8004546:	4641      	movls	r1, r8
 8004548:	f8d8 2000 	ldrls.w	r2, [r8]
 800454c:	f108 0104 	addhi.w	r1, r8, #4
 8004550:	f8d8 2004 	ldrhi.w	r2, [r8, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004554:	2cff      	cmp	r4, #255	; 0xff
 8004556:	bf91      	iteee	ls
 8004558:	00b3      	lslls	r3, r6, #2
 800455a:	f106 4380 	addhi.w	r3, r6, #1073741824	; 0x40000000
 800455e:	3b08      	subhi	r3, #8
 8004560:	009b      	lslhi	r3, r3, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004562:	200f      	movs	r0, #15
 8004564:	4098      	lsls	r0, r3
 8004566:	ea22 0200 	bic.w	r2, r2, r0
 800456a:	fa0a f303 	lsl.w	r3, sl, r3
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004578:	d055      	beq.n	8004626 <HAL_GPIO_Init+0x1ea>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800457a:	4a66      	ldr	r2, [pc, #408]	; (8004714 <HAL_GPIO_Init+0x2d8>)
 800457c:	6993      	ldr	r3, [r2, #24]
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6193      	str	r3, [r2, #24]
 8004584:	6993      	ldr	r3, [r2, #24]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	9b01      	ldr	r3, [sp, #4]
 800458e:	f026 0303 	bic.w	r3, r6, #3
 8004592:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004596:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2u];
 800459a:	6898      	ldr	r0, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800459c:	f006 0203 	and.w	r2, r6, #3
 80045a0:	0091      	lsls	r1, r2, #2
 80045a2:	220f      	movs	r2, #15
 80045a4:	408a      	lsls	r2, r1
 80045a6:	ea20 0002 	bic.w	r0, r0, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045aa:	45d8      	cmp	r8, fp
 80045ac:	f000 809d 	beq.w	80046ea <HAL_GPIO_Init+0x2ae>
 80045b0:	4a59      	ldr	r2, [pc, #356]	; (8004718 <HAL_GPIO_Init+0x2dc>)
 80045b2:	4590      	cmp	r8, r2
 80045b4:	f000 809b 	beq.w	80046ee <HAL_GPIO_Init+0x2b2>
 80045b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045bc:	4590      	cmp	r8, r2
 80045be:	f000 8098 	beq.w	80046f2 <HAL_GPIO_Init+0x2b6>
 80045c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045c6:	4590      	cmp	r8, r2
 80045c8:	bf0c      	ite	eq
 80045ca:	2203      	moveq	r2, #3
 80045cc:	2204      	movne	r2, #4
 80045ce:	408a      	lsls	r2, r1
 80045d0:	4302      	orrs	r2, r0
        AFIO->EXTICR[position >> 2u] = temp;
 80045d2:	609a      	str	r2, [r3, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80045da:	f8d9 3000 	ldr.w	r3, [r9]
 80045de:	bf14      	ite	ne
 80045e0:	4323      	orrne	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045e2:	43a3      	biceq	r3, r4
 80045e4:	f8c9 3000 	str.w	r3, [r9]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80045ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80045f2:	bf14      	ite	ne
 80045f4:	4323      	orrne	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045f6:	43a3      	biceq	r3, r4
 80045f8:	f8c9 3004 	str.w	r3, [r9, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8004602:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004606:	bf14      	ite	ne
 8004608:	4323      	orrne	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800460a:	43a3      	biceq	r3, r4
 800460c:	f8c9 3008 	str.w	r3, [r9, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8004616:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800461a:	bf14      	ite	ne
 800461c:	431c      	orrne	r4, r3
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800461e:	ea23 0404 	biceq.w	r4, r3, r4
 8004622:	f8c9 400c 	str.w	r4, [r9, #12]
        }
      }
    }

	position++;
 8004626:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004628:	683c      	ldr	r4, [r7, #0]
 800462a:	fa34 f306 	lsrs.w	r3, r4, r6
 800462e:	d062      	beq.n	80046f6 <HAL_GPIO_Init+0x2ba>
    ioposition = (0x01uL << position);
 8004630:	2501      	movs	r5, #1
 8004632:	40b5      	lsls	r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004634:	402c      	ands	r4, r5
    if (iocurrent == ioposition)
 8004636:	42a5      	cmp	r5, r4
 8004638:	d1f5      	bne.n	8004626 <HAL_GPIO_Init+0x1ea>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800463a:	45d8      	cmp	r8, fp
 800463c:	d012      	beq.n	8004664 <HAL_GPIO_Init+0x228>
 800463e:	4b36      	ldr	r3, [pc, #216]	; (8004718 <HAL_GPIO_Init+0x2dc>)
 8004640:	4598      	cmp	r8, r3
 8004642:	d00f      	beq.n	8004664 <HAL_GPIO_Init+0x228>
 8004644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004648:	4598      	cmp	r8, r3
 800464a:	d00b      	beq.n	8004664 <HAL_GPIO_Init+0x228>
 800464c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004650:	4598      	cmp	r8, r3
 8004652:	d007      	beq.n	8004664 <HAL_GPIO_Init+0x228>
 8004654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004658:	4598      	cmp	r8, r3
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_Init+0x228>
 800465c:	21cd      	movs	r1, #205	; 0xcd
 800465e:	4828      	ldr	r0, [pc, #160]	; (8004700 <HAL_GPIO_Init+0x2c4>)
 8004660:	f7fd fa02 	bl	8001a68 <assert_failed>
      switch (GPIO_Init->Mode)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b12      	cmp	r3, #18
 8004668:	d02a      	beq.n	80046c0 <HAL_GPIO_Init+0x284>
 800466a:	f63f af3f 	bhi.w	80044ec <HAL_GPIO_Init+0xb0>
 800466e:	2b02      	cmp	r3, #2
 8004670:	d019      	beq.n	80046a6 <HAL_GPIO_Init+0x26a>
 8004672:	f67f af30 	bls.w	80044d6 <HAL_GPIO_Init+0x9a>
 8004676:	2b03      	cmp	r3, #3
 8004678:	f43f af61 	beq.w	800453e <HAL_GPIO_Init+0x102>
 800467c:	2b11      	cmp	r3, #17
 800467e:	f47f af60 	bne.w	8004542 <HAL_GPIO_Init+0x106>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3b01      	subs	r3, #1
 8004686:	2b02      	cmp	r3, #2
 8004688:	d808      	bhi.n	800469c <HAL_GPIO_Init+0x260>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f103 0a04 	add.w	sl, r3, #4
          break;
 8004690:	e757      	b.n	8004542 <HAL_GPIO_Init+0x106>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004692:	21d5      	movs	r1, #213	; 0xd5
 8004694:	481a      	ldr	r0, [pc, #104]	; (8004700 <HAL_GPIO_Init+0x2c4>)
 8004696:	f7fd f9e7 	bl	8001a68 <assert_failed>
 800469a:	e724      	b.n	80044e6 <HAL_GPIO_Init+0xaa>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800469c:	21dc      	movs	r1, #220	; 0xdc
 800469e:	4818      	ldr	r0, [pc, #96]	; (8004700 <HAL_GPIO_Init+0x2c4>)
 80046a0:	f7fd f9e2 	bl	8001a68 <assert_failed>
 80046a4:	e7f1      	b.n	800468a <HAL_GPIO_Init+0x24e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d803      	bhi.n	80046b6 <HAL_GPIO_Init+0x27a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f103 0a08 	add.w	sl, r3, #8
          break;
 80046b4:	e745      	b.n	8004542 <HAL_GPIO_Init+0x106>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80046b6:	21e3      	movs	r1, #227	; 0xe3
 80046b8:	4811      	ldr	r0, [pc, #68]	; (8004700 <HAL_GPIO_Init+0x2c4>)
 80046ba:	f7fd f9d5 	bl	8001a68 <assert_failed>
 80046be:	e7f6      	b.n	80046ae <HAL_GPIO_Init+0x272>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d803      	bhi.n	80046d0 <HAL_GPIO_Init+0x294>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f103 0a0c 	add.w	sl, r3, #12
          break;
 80046ce:	e738      	b.n	8004542 <HAL_GPIO_Init+0x106>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80046d0:	21ea      	movs	r1, #234	; 0xea
 80046d2:	480b      	ldr	r0, [pc, #44]	; (8004700 <HAL_GPIO_Init+0x2c4>)
 80046d4:	f7fd f9c8 	bl	8001a68 <assert_failed>
 80046d8:	e7f6      	b.n	80046c8 <HAL_GPIO_Init+0x28c>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80046da:	21f7      	movs	r1, #247	; 0xf7
 80046dc:	4808      	ldr	r0, [pc, #32]	; (8004700 <HAL_GPIO_Init+0x2c4>)
 80046de:	f7fd f9c3 	bl	8001a68 <assert_failed>
 80046e2:	e71f      	b.n	8004524 <HAL_GPIO_Init+0xe8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046e4:	f04f 0a04 	mov.w	sl, #4
 80046e8:	e72b      	b.n	8004542 <HAL_GPIO_Init+0x106>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046ea:	2200      	movs	r2, #0
 80046ec:	e76f      	b.n	80045ce <HAL_GPIO_Init+0x192>
 80046ee:	2201      	movs	r2, #1
 80046f0:	e76d      	b.n	80045ce <HAL_GPIO_Init+0x192>
 80046f2:	2202      	movs	r2, #2
 80046f4:	e76b      	b.n	80045ce <HAL_GPIO_Init+0x192>
  }
}
 80046f6:	b003      	add	sp, #12
 80046f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fc:	40010800 	.word	0x40010800
 8004700:	0800aedc 	.word	0x0800aedc
 8004704:	10110000 	.word	0x10110000
 8004708:	10220000 	.word	0x10220000
 800470c:	10210000 	.word	0x10210000
 8004710:	10310000 	.word	0x10310000
 8004714:	40021000 	.word	0x40021000
 8004718:	40010c00 	.word	0x40010c00
 800471c:	40010400 	.word	0x40010400

08004720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004724:	460c      	mov	r4, r1
 8004726:	b129      	cbz	r1, 8004734 <HAL_GPIO_ReadPin+0x14>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004728:	68ab      	ldr	r3, [r5, #8]
 800472a:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800472c:	bf14      	ite	ne
 800472e:	2001      	movne	r0, #1
 8004730:	2000      	moveq	r0, #0
 8004732:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004734:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8004738:	4801      	ldr	r0, [pc, #4]	; (8004740 <HAL_GPIO_ReadPin+0x20>)
 800473a:	f7fd f995 	bl	8001a68 <assert_failed>
 800473e:	e7f3      	b.n	8004728 <HAL_GPIO_ReadPin+0x8>
 8004740:	0800aedc 	.word	0x0800aedc

08004744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4606      	mov	r6, r0
 8004748:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800474a:	460c      	mov	r4, r1
 800474c:	b129      	cbz	r1, 800475a <HAL_GPIO_WritePin+0x16>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800474e:	2d01      	cmp	r5, #1
 8004750:	d809      	bhi.n	8004766 <HAL_GPIO_WritePin+0x22>

  if (PinState != GPIO_PIN_RESET)
 8004752:	b975      	cbnz	r5, 8004772 <HAL_GPIO_WritePin+0x2e>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004754:	0424      	lsls	r4, r4, #16
 8004756:	6134      	str	r4, [r6, #16]
  }
}
 8004758:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800475a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800475e:	4806      	ldr	r0, [pc, #24]	; (8004778 <HAL_GPIO_WritePin+0x34>)
 8004760:	f7fd f982 	bl	8001a68 <assert_failed>
 8004764:	e7f3      	b.n	800474e <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004766:	f240 11d5 	movw	r1, #469	; 0x1d5
 800476a:	4803      	ldr	r0, [pc, #12]	; (8004778 <HAL_GPIO_WritePin+0x34>)
 800476c:	f7fd f97c 	bl	8001a68 <assert_failed>
 8004770:	e7ef      	b.n	8004752 <HAL_GPIO_WritePin+0xe>
    GPIOx->BSRR = GPIO_Pin;
 8004772:	6134      	str	r4, [r6, #16]
 8004774:	e7f0      	b.n	8004758 <HAL_GPIO_WritePin+0x14>
 8004776:	bf00      	nop
 8004778:	0800aedc 	.word	0x0800aedc

0800477c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800477c:	b510      	push	{r4, lr}
 800477e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004780:	b131      	cbz	r1, 8004790 <HAL_GPIO_TogglePin+0x14>
 8004782:	460b      	mov	r3, r1

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8004784:	68c1      	ldr	r1, [r0, #12]
 8004786:	461a      	mov	r2, r3
 8004788:	4219      	tst	r1, r3
 800478a:	d008      	beq.n	800479e <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800478c:	6143      	str	r3, [r0, #20]
 800478e:	e007      	b.n	80047a0 <HAL_GPIO_TogglePin+0x24>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004790:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8004794:	4803      	ldr	r0, [pc, #12]	; (80047a4 <HAL_GPIO_TogglePin+0x28>)
 8004796:	f7fd f967 	bl	8001a68 <assert_failed>
  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800479a:	68e3      	ldr	r3, [r4, #12]
 800479c:	2200      	movs	r2, #0
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800479e:	6122      	str	r2, [r4, #16]
  }
}
 80047a0:	bd10      	pop	{r4, pc}
 80047a2:	bf00      	nop
 80047a4:	0800aedc 	.word	0x0800aedc

080047a8 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80047a8:	4770      	bx	lr
	...

080047ac <HAL_GPIO_EXTI_IRQHandler>:
{
 80047ac:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4203      	tst	r3, r0
 80047b4:	d100      	bne.n	80047b8 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80047b6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047b8:	4b02      	ldr	r3, [pc, #8]	; (80047c4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80047ba:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047bc:	f7ff fff4 	bl	80047a8 <HAL_GPIO_EXTI_Callback>
}
 80047c0:	e7f9      	b.n	80047b6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80047c2:	bf00      	nop
 80047c4:	40010400 	.word	0x40010400

080047c8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047c8:	2800      	cmp	r0, #0
 80047ca:	f000 8106 	beq.w	80049da <HAL_I2C_Init+0x212>
{
 80047ce:	b570      	push	{r4, r5, r6, lr}
 80047d0:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80047d2:	6803      	ldr	r3, [r0, #0]
 80047d4:	4a83      	ldr	r2, [pc, #524]	; (80049e4 <HAL_I2C_Init+0x21c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d008      	beq.n	80047ec <HAL_I2C_Init+0x24>
 80047da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <HAL_I2C_Init+0x24>
 80047e2:	f240 11cd 	movw	r1, #461	; 0x1cd
 80047e6:	4880      	ldr	r0, [pc, #512]	; (80049e8 <HAL_I2C_Init+0x220>)
 80047e8:	f7fd f93e 	bl	8001a68 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80047ec:	6863      	ldr	r3, [r4, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	4a7e      	ldr	r2, [pc, #504]	; (80049ec <HAL_I2C_Init+0x224>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	f200 80a9 	bhi.w	800494a <HAL_I2C_Init+0x182>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80047fe:	d004      	beq.n	800480a <HAL_I2C_Init+0x42>
 8004800:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004804:	4878      	ldr	r0, [pc, #480]	; (80049e8 <HAL_I2C_Init+0x220>)
 8004806:	f7fd f92f 	bl	8001a68 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800480a:	68e3      	ldr	r3, [r4, #12]
 800480c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004810:	f023 0303 	bic.w	r3, r3, #3
 8004814:	2b00      	cmp	r3, #0
 8004816:	f040 809e 	bne.w	8004956 <HAL_I2C_Init+0x18e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004824:	d004      	beq.n	8004830 <HAL_I2C_Init+0x68>
 8004826:	f240 11d1 	movw	r1, #465	; 0x1d1
 800482a:	486f      	ldr	r0, [pc, #444]	; (80049e8 <HAL_I2C_Init+0x220>)
 800482c:	f7fd f91c 	bl	8001a68 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004830:	6963      	ldr	r3, [r4, #20]
 8004832:	2b01      	cmp	r3, #1
 8004834:	f200 8095 	bhi.w	8004962 <HAL_I2C_Init+0x19a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004838:	69a3      	ldr	r3, [r4, #24]
 800483a:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 800483e:	f040 8096 	bne.w	800496e <HAL_I2C_Init+0x1a6>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004842:	69e3      	ldr	r3, [r4, #28]
 8004844:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8004848:	d004      	beq.n	8004854 <HAL_I2C_Init+0x8c>
 800484a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800484e:	4866      	ldr	r0, [pc, #408]	; (80049e8 <HAL_I2C_Init+0x220>)
 8004850:	f7fd f90a 	bl	8001a68 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004854:	6a23      	ldr	r3, [r4, #32]
 8004856:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800485a:	d004      	beq.n	8004866 <HAL_I2C_Init+0x9e>
 800485c:	f240 11d5 	movw	r1, #469	; 0x1d5
 8004860:	4861      	ldr	r0, [pc, #388]	; (80049e8 <HAL_I2C_Init+0x220>)
 8004862:	f7fd f901 	bl	8001a68 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004866:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8085 	beq.w	800497a <HAL_I2C_Init+0x1b2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004870:	2324      	movs	r3, #36	; 0x24
 8004872:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004880:	f000 fca4 	bl	80051cc <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004884:	6862      	ldr	r2, [r4, #4]
 8004886:	4b5a      	ldr	r3, [pc, #360]	; (80049f0 <HAL_I2C_Init+0x228>)
 8004888:	429a      	cmp	r2, r3
 800488a:	bf94      	ite	ls
 800488c:	4b59      	ldrls	r3, [pc, #356]	; (80049f4 <HAL_I2C_Init+0x22c>)
 800488e:	4b5a      	ldrhi	r3, [pc, #360]	; (80049f8 <HAL_I2C_Init+0x230>)
 8004890:	4298      	cmp	r0, r3
 8004892:	bf8c      	ite	hi
 8004894:	2300      	movhi	r3, #0
 8004896:	2301      	movls	r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	f040 80a0 	bne.w	80049de <HAL_I2C_Init+0x216>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800489e:	4b57      	ldr	r3, [pc, #348]	; (80049fc <HAL_I2C_Init+0x234>)
 80048a0:	fba3 2300 	umull	r2, r3, r3, r0
 80048a4:	0c9b      	lsrs	r3, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048a6:	6821      	ldr	r1, [r4, #0]
 80048a8:	684a      	ldr	r2, [r1, #4]
 80048aa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80048ae:	431a      	orrs	r2, r3
 80048b0:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048b2:	6825      	ldr	r5, [r4, #0]
 80048b4:	6a2a      	ldr	r2, [r5, #32]
 80048b6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80048ba:	6866      	ldr	r6, [r4, #4]
 80048bc:	494c      	ldr	r1, [pc, #304]	; (80049f0 <HAL_I2C_Init+0x228>)
 80048be:	428e      	cmp	r6, r1
 80048c0:	d861      	bhi.n	8004986 <HAL_I2C_Init+0x1be>
 80048c2:	3301      	adds	r3, #1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	622b      	str	r3, [r5, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048c8:	6825      	ldr	r5, [r4, #0]
 80048ca:	69e9      	ldr	r1, [r5, #28]
 80048cc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80048d0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80048d4:	6862      	ldr	r2, [r4, #4]
 80048d6:	4b46      	ldr	r3, [pc, #280]	; (80049f0 <HAL_I2C_Init+0x228>)
 80048d8:	429a      	cmp	r2, r3
 80048da:	d85e      	bhi.n	800499a <HAL_I2C_Init+0x1d2>
 80048dc:	3801      	subs	r0, #1
 80048de:	0053      	lsls	r3, r2, #1
 80048e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e4:	3301      	adds	r3, #1
 80048e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	bf38      	it	cc
 80048ee:	2304      	movcc	r3, #4
 80048f0:	430b      	orrs	r3, r1
 80048f2:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048f4:	6821      	ldr	r1, [r4, #0]
 80048f6:	680a      	ldr	r2, [r1, #0]
 80048f8:	69e3      	ldr	r3, [r4, #28]
 80048fa:	6a20      	ldr	r0, [r4, #32]
 80048fc:	4303      	orrs	r3, r0
 80048fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004906:	6821      	ldr	r1, [r4, #0]
 8004908:	688a      	ldr	r2, [r1, #8]
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	68e0      	ldr	r0, [r4, #12]
 800490e:	4303      	orrs	r3, r0
 8004910:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8004914:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800491c:	6821      	ldr	r1, [r4, #0]
 800491e:	68ca      	ldr	r2, [r1, #12]
 8004920:	6963      	ldr	r3, [r4, #20]
 8004922:	69a0      	ldr	r0, [r4, #24]
 8004924:	4303      	orrs	r3, r0
 8004926:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800492a:	4313      	orrs	r3, r2
 800492c:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	6813      	ldr	r3, [r2, #0]
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004938:	2000      	movs	r0, #0
 800493a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800493c:	2320      	movs	r3, #32
 800493e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004942:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004944:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 8004948:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800494a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800494e:	4826      	ldr	r0, [pc, #152]	; (80049e8 <HAL_I2C_Init+0x220>)
 8004950:	f7fd f88a 	bl	8001a68 <assert_failed>
 8004954:	e750      	b.n	80047f8 <HAL_I2C_Init+0x30>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004956:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800495a:	4823      	ldr	r0, [pc, #140]	; (80049e8 <HAL_I2C_Init+0x220>)
 800495c:	f7fd f884 	bl	8001a68 <assert_failed>
 8004960:	e75b      	b.n	800481a <HAL_I2C_Init+0x52>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004962:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8004966:	4820      	ldr	r0, [pc, #128]	; (80049e8 <HAL_I2C_Init+0x220>)
 8004968:	f7fd f87e 	bl	8001a68 <assert_failed>
 800496c:	e764      	b.n	8004838 <HAL_I2C_Init+0x70>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800496e:	f240 11d3 	movw	r1, #467	; 0x1d3
 8004972:	481d      	ldr	r0, [pc, #116]	; (80049e8 <HAL_I2C_Init+0x220>)
 8004974:	f7fd f878 	bl	8001a68 <assert_failed>
 8004978:	e763      	b.n	8004842 <HAL_I2C_Init+0x7a>
    hi2c->Lock = HAL_UNLOCKED;
 800497a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800497e:	4620      	mov	r0, r4
 8004980:	f7fc fd74 	bl	800146c <HAL_I2C_MspInit>
 8004984:	e774      	b.n	8004870 <HAL_I2C_Init+0xa8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004986:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	491c      	ldr	r1, [pc, #112]	; (8004a00 <HAL_I2C_Init+0x238>)
 8004990:	fba1 1303 	umull	r1, r3, r1, r3
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	3301      	adds	r3, #1
 8004998:	e794      	b.n	80048c4 <HAL_I2C_Init+0xfc>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800499a:	68a3      	ldr	r3, [r4, #8]
 800499c:	b953      	cbnz	r3, 80049b4 <HAL_I2C_Init+0x1ec>
 800499e:	3801      	subs	r0, #1
 80049a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80049a4:	fbb0 f2f2 	udiv	r2, r0, r2
 80049a8:	3201      	adds	r2, #1
 80049aa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80049ae:	b97a      	cbnz	r2, 80049d0 <HAL_I2C_Init+0x208>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e79d      	b.n	80048f0 <HAL_I2C_Init+0x128>
 80049b4:	3801      	subs	r0, #1
 80049b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80049ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80049be:	fbb0 f2f2 	udiv	r2, r0, r2
 80049c2:	3201      	adds	r2, #1
 80049c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80049c8:	b12a      	cbz	r2, 80049d6 <HAL_I2C_Init+0x20e>
 80049ca:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80049ce:	e78f      	b.n	80048f0 <HAL_I2C_Init+0x128>
 80049d0:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80049d4:	e78c      	b.n	80048f0 <HAL_I2C_Init+0x128>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e78a      	b.n	80048f0 <HAL_I2C_Init+0x128>
    return HAL_ERROR;
 80049da:	2001      	movs	r0, #1
}
 80049dc:	4770      	bx	lr
    return HAL_ERROR;
 80049de:	2001      	movs	r0, #1
 80049e0:	e7b2      	b.n	8004948 <HAL_I2C_Init+0x180>
 80049e2:	bf00      	nop
 80049e4:	40005400 	.word	0x40005400
 80049e8:	0800af18 	.word	0x0800af18
 80049ec:	00061a7f 	.word	0x00061a7f
 80049f0:	000186a0 	.word	0x000186a0
 80049f4:	001e847f 	.word	0x001e847f
 80049f8:	003d08ff 	.word	0x003d08ff
 80049fc:	431bde83 	.word	0x431bde83
 8004a00:	10624dd3 	.word	0x10624dd3

08004a04 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a04:	2800      	cmp	r0, #0
 8004a06:	f000 8286 	beq.w	8004f16 <HAL_RCC_OscConfig+0x512>
{
 8004a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004a12:	6803      	ldr	r3, [r0, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80d6 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x1c2>
 8004a1a:	f013 0f0f 	tst.w	r3, #15
 8004a1e:	d029      	beq.n	8004a74 <HAL_RCC_OscConfig+0x70>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	f013 0f01 	tst.w	r3, #1
 8004a26:	d03f      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8004a2e:	d002      	beq.n	8004a36 <HAL_RCC_OscConfig+0x32>
 8004a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a34:	d124      	bne.n	8004a80 <HAL_RCC_OscConfig+0x7c>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a36:	4baa      	ldr	r3, [pc, #680]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d029      	beq.n	8004a96 <HAL_RCC_OscConfig+0x92>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a42:	4ba7      	ldr	r3, [pc, #668]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d01e      	beq.n	8004a8c <HAL_RCC_OscConfig+0x88>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a54:	d055      	beq.n	8004b02 <HAL_RCC_OscConfig+0xfe>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d169      	bne.n	8004b2e <HAL_RCC_OscConfig+0x12a>
 8004a5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a5e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e04b      	b.n	8004b0c <HAL_RCC_OscConfig+0x108>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004a74:	f240 1167 	movw	r1, #359	; 0x167
 8004a78:	489a      	ldr	r0, [pc, #616]	; (8004ce4 <HAL_RCC_OscConfig+0x2e0>)
 8004a7a:	f7fc fff5 	bl	8001a68 <assert_failed>
 8004a7e:	e7cf      	b.n	8004a20 <HAL_RCC_OscConfig+0x1c>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004a80:	f240 116d 	movw	r1, #365	; 0x16d
 8004a84:	4897      	ldr	r0, [pc, #604]	; (8004ce4 <HAL_RCC_OscConfig+0x2e0>)
 8004a86:	f7fc ffef 	bl	8001a68 <assert_failed>
 8004a8a:	e7d4      	b.n	8004a36 <HAL_RCC_OscConfig+0x32>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a8c:	4b94      	ldr	r3, [pc, #592]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004a94:	d0db      	beq.n	8004a4e <HAL_RCC_OscConfig+0x4a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a96:	4b92      	ldr	r3, [pc, #584]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a9e:	d003      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xa4>
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8239 	beq.w	8004f1a <HAL_RCC_OscConfig+0x516>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	f013 0f02 	tst.w	r3, #2
 8004aae:	f000 808a 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d863      	bhi.n	8004b80 <HAL_RCC_OscConfig+0x17c>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004ab8:	6963      	ldr	r3, [r4, #20]
 8004aba:	2b1f      	cmp	r3, #31
 8004abc:	d866      	bhi.n	8004b8c <HAL_RCC_OscConfig+0x188>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004abe:	4b88      	ldr	r3, [pc, #544]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f013 0f0c 	tst.w	r3, #12
 8004ac6:	d06c      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x19e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ac8:	4b85      	ldr	r3, [pc, #532]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d061      	beq.n	8004b98 <HAL_RCC_OscConfig+0x194>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ad4:	6923      	ldr	r3, [r4, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 809a 	beq.w	8004c10 <HAL_RCC_OscConfig+0x20c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004adc:	4b82      	ldr	r3, [pc, #520]	; (8004ce8 <HAL_RCC_OscConfig+0x2e4>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae2:	f7fe fe6d 	bl	80037c0 <HAL_GetTick>
 8004ae6:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae8:	4d7d      	ldr	r5, [pc, #500]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004aea:	682b      	ldr	r3, [r5, #0]
 8004aec:	f013 0f02 	tst.w	r3, #2
 8004af0:	f040 8085 	bne.w	8004bfe <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af4:	f7fe fe64 	bl	80037c0 <HAL_GetTick>
 8004af8:	1b80      	subs	r0, r0, r6
 8004afa:	2802      	cmp	r0, #2
 8004afc:	d9f5      	bls.n	8004aea <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8004afe:	2003      	movs	r0, #3
 8004b00:	e20e      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b02:	4a77      	ldr	r2, [pc, #476]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004b04:	6813      	ldr	r3, [r2, #0]
 8004b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	b343      	cbz	r3, 8004b62 <HAL_RCC_OscConfig+0x15e>
        tickstart = HAL_GetTick();
 8004b10:	f7fe fe56 	bl	80037c0 <HAL_GetTick>
 8004b14:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b16:	4d72      	ldr	r5, [pc, #456]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b1e:	d1c3      	bne.n	8004aa8 <HAL_RCC_OscConfig+0xa4>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fe fe4e 	bl	80037c0 <HAL_GetTick>
 8004b24:	1b80      	subs	r0, r0, r6
 8004b26:	2864      	cmp	r0, #100	; 0x64
 8004b28:	d9f6      	bls.n	8004b18 <HAL_RCC_OscConfig+0x114>
            return HAL_TIMEOUT;
 8004b2a:	2003      	movs	r0, #3
 8004b2c:	e1f8      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b32:	d009      	beq.n	8004b48 <HAL_RCC_OscConfig+0x144>
 8004b34:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e7e1      	b.n	8004b0c <HAL_RCC_OscConfig+0x108>
 8004b48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b4c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e7d4      	b.n	8004b0c <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 8004b62:	f7fe fe2d 	bl	80037c0 <HAL_GetTick>
 8004b66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b68:	4d5d      	ldr	r5, [pc, #372]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b70:	d09a      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xa4>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b72:	f7fe fe25 	bl	80037c0 <HAL_GetTick>
 8004b76:	1b80      	subs	r0, r0, r6
 8004b78:	2864      	cmp	r0, #100	; 0x64
 8004b7a:	d9f6      	bls.n	8004b6a <HAL_RCC_OscConfig+0x166>
            return HAL_TIMEOUT;
 8004b7c:	2003      	movs	r0, #3
 8004b7e:	e1cf      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004b80:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004b84:	4857      	ldr	r0, [pc, #348]	; (8004ce4 <HAL_RCC_OscConfig+0x2e0>)
 8004b86:	f7fc ff6f 	bl	8001a68 <assert_failed>
 8004b8a:	e795      	b.n	8004ab8 <HAL_RCC_OscConfig+0xb4>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004b8c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004b90:	4854      	ldr	r0, [pc, #336]	; (8004ce4 <HAL_RCC_OscConfig+0x2e0>)
 8004b92:	f7fc ff69 	bl	8001a68 <assert_failed>
 8004b96:	e792      	b.n	8004abe <HAL_RCC_OscConfig+0xba>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b98:	4b51      	ldr	r3, [pc, #324]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004ba0:	d198      	bne.n	8004ad4 <HAL_RCC_OscConfig+0xd0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba2:	4b4f      	ldr	r3, [pc, #316]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f013 0f02 	tst.w	r3, #2
 8004baa:	d004      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x1b2>
 8004bac:	6923      	ldr	r3, [r4, #16]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d001      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x1b2>
        return HAL_ERROR;
 8004bb2:	2001      	movs	r0, #1
 8004bb4:	e1b4      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb6:	4a4a      	ldr	r2, [pc, #296]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004bb8:	6813      	ldr	r3, [r2, #0]
 8004bba:	6961      	ldr	r1, [r4, #20]
 8004bbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004bc0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004bc4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	f013 0f08 	tst.w	r3, #8
 8004bcc:	d045      	beq.n	8004c5a <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004bce:	69a3      	ldr	r3, [r4, #24]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d82f      	bhi.n	8004c34 <HAL_RCC_OscConfig+0x230>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd4:	69a3      	ldr	r3, [r4, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d070      	beq.n	8004cbc <HAL_RCC_OscConfig+0x2b8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b44      	ldr	r3, [pc, #272]	; (8004cec <HAL_RCC_OscConfig+0x2e8>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be0:	f7fe fdee 	bl	80037c0 <HAL_GetTick>
 8004be4:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	4d3e      	ldr	r5, [pc, #248]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004be8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004bea:	f013 0f02 	tst.w	r3, #2
 8004bee:	d127      	bne.n	8004c40 <HAL_RCC_OscConfig+0x23c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf0:	f7fe fde6 	bl	80037c0 <HAL_GetTick>
 8004bf4:	1b80      	subs	r0, r0, r6
 8004bf6:	2802      	cmp	r0, #2
 8004bf8:	d9f6      	bls.n	8004be8 <HAL_RCC_OscConfig+0x1e4>
        {
          return HAL_TIMEOUT;
 8004bfa:	2003      	movs	r0, #3
 8004bfc:	e190      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfe:	4a38      	ldr	r2, [pc, #224]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004c00:	6813      	ldr	r3, [r2, #0]
 8004c02:	6961      	ldr	r1, [r4, #20]
 8004c04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c08:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e7da      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_DISABLE();
 8004c10:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <HAL_RCC_OscConfig+0x2e4>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c16:	f7fe fdd3 	bl	80037c0 <HAL_GetTick>
 8004c1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1c:	4d30      	ldr	r5, [pc, #192]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004c1e:	682b      	ldr	r3, [r5, #0]
 8004c20:	f013 0f02 	tst.w	r3, #2
 8004c24:	d0cf      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c26:	f7fe fdcb 	bl	80037c0 <HAL_GetTick>
 8004c2a:	1b80      	subs	r0, r0, r6
 8004c2c:	2802      	cmp	r0, #2
 8004c2e:	d9f6      	bls.n	8004c1e <HAL_RCC_OscConfig+0x21a>
            return HAL_TIMEOUT;
 8004c30:	2003      	movs	r0, #3
 8004c32:	e175      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004c34:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004c38:	482a      	ldr	r0, [pc, #168]	; (8004ce4 <HAL_RCC_OscConfig+0x2e0>)
 8004c3a:	f7fc ff15 	bl	8001a68 <assert_failed>
 8004c3e:	e7c9      	b.n	8004bd4 <HAL_RCC_OscConfig+0x1d0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_OscConfig+0x2ec>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2b      	ldr	r2, [pc, #172]	; (8004cf4 <HAL_RCC_OscConfig+0x2f0>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	0a5b      	lsrs	r3, r3, #9
 8004c4c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004c4e:	bf00      	nop
  }
  while (Delay --);
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	1e5a      	subs	r2, r3, #1
 8004c54:	9201      	str	r2, [sp, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f9      	bne.n	8004c4e <HAL_RCC_OscConfig+0x24a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	f013 0f04 	tst.w	r3, #4
 8004c60:	f000 80ab 	beq.w	8004dba <HAL_RCC_OscConfig+0x3b6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004c64:	68e3      	ldr	r3, [r4, #12]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x26a>
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	d146      	bne.n	8004cfc <HAL_RCC_OscConfig+0x2f8>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004c76:	d147      	bne.n	8004d08 <HAL_RCC_OscConfig+0x304>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c80:	61da      	str	r2, [r3, #28]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8004c8c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCC_OscConfig+0x2f4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c96:	d039      	beq.n	8004d0c <HAL_RCC_OscConfig+0x308>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c98:	68e3      	ldr	r3, [r4, #12]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d04a      	beq.n	8004d34 <HAL_RCC_OscConfig+0x330>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d161      	bne.n	8004d66 <HAL_RCC_OscConfig+0x362>
 8004ca2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ca6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	621a      	str	r2, [r3, #32]
 8004cb2:	6a1a      	ldr	r2, [r3, #32]
 8004cb4:	f022 0204 	bic.w	r2, r2, #4
 8004cb8:	621a      	str	r2, [r3, #32]
 8004cba:	e040      	b.n	8004d3e <HAL_RCC_OscConfig+0x33a>
      __HAL_RCC_LSI_DISABLE();
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_OscConfig+0x2e8>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004cc2:	f7fe fd7d 	bl	80037c0 <HAL_GetTick>
 8004cc6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc8:	4d05      	ldr	r5, [pc, #20]	; (8004ce0 <HAL_RCC_OscConfig+0x2dc>)
 8004cca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ccc:	f013 0f02 	tst.w	r3, #2
 8004cd0:	d0c3      	beq.n	8004c5a <HAL_RCC_OscConfig+0x256>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd2:	f7fe fd75 	bl	80037c0 <HAL_GetTick>
 8004cd6:	1b80      	subs	r0, r0, r6
 8004cd8:	2802      	cmp	r0, #2
 8004cda:	d9f6      	bls.n	8004cca <HAL_RCC_OscConfig+0x2c6>
          return HAL_TIMEOUT;
 8004cdc:	2003      	movs	r0, #3
 8004cde:	e11f      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	0800af50 	.word	0x0800af50
 8004ce8:	42420000 	.word	0x42420000
 8004cec:	42420480 	.word	0x42420480
 8004cf0:	20000028 	.word	0x20000028
 8004cf4:	10624dd3 	.word	0x10624dd3
 8004cf8:	40007000 	.word	0x40007000
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004cfc:	f240 2111 	movw	r1, #529	; 0x211
 8004d00:	488a      	ldr	r0, [pc, #552]	; (8004f2c <HAL_RCC_OscConfig+0x528>)
 8004d02:	f7fc feb1 	bl	8001a68 <assert_failed>
 8004d06:	e7b2      	b.n	8004c6e <HAL_RCC_OscConfig+0x26a>
    FlagStatus       pwrclkchanged = RESET;
 8004d08:	2500      	movs	r5, #0
 8004d0a:	e7c0      	b.n	8004c8e <HAL_RCC_OscConfig+0x28a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d0c:	4a88      	ldr	r2, [pc, #544]	; (8004f30 <HAL_RCC_OscConfig+0x52c>)
 8004d0e:	6813      	ldr	r3, [r2, #0]
 8004d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d14:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004d16:	f7fe fd53 	bl	80037c0 <HAL_GetTick>
 8004d1a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	4e84      	ldr	r6, [pc, #528]	; (8004f30 <HAL_RCC_OscConfig+0x52c>)
 8004d1e:	6833      	ldr	r3, [r6, #0]
 8004d20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d24:	d1b8      	bne.n	8004c98 <HAL_RCC_OscConfig+0x294>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d26:	f7fe fd4b 	bl	80037c0 <HAL_GetTick>
 8004d2a:	1bc0      	subs	r0, r0, r7
 8004d2c:	2864      	cmp	r0, #100	; 0x64
 8004d2e:	d9f6      	bls.n	8004d1e <HAL_RCC_OscConfig+0x31a>
          return HAL_TIMEOUT;
 8004d30:	2003      	movs	r0, #3
 8004d32:	e0f5      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d34:	4a7f      	ldr	r2, [pc, #508]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004d36:	6a13      	ldr	r3, [r2, #32]
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d3e:	68e3      	ldr	r3, [r4, #12]
 8004d40:	b33b      	cbz	r3, 8004d92 <HAL_RCC_OscConfig+0x38e>
      tickstart = HAL_GetTick();
 8004d42:	f7fe fd3d 	bl	80037c0 <HAL_GetTick>
 8004d46:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d48:	4e7a      	ldr	r6, [pc, #488]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4a:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4e:	6a33      	ldr	r3, [r6, #32]
 8004d50:	f013 0f02 	tst.w	r3, #2
 8004d54:	d12f      	bne.n	8004db6 <HAL_RCC_OscConfig+0x3b2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d56:	f7fe fd33 	bl	80037c0 <HAL_GetTick>
 8004d5a:	eba0 0008 	sub.w	r0, r0, r8
 8004d5e:	42b8      	cmp	r0, r7
 8004d60:	d9f5      	bls.n	8004d4e <HAL_RCC_OscConfig+0x34a>
          return HAL_TIMEOUT;
 8004d62:	2003      	movs	r0, #3
 8004d64:	e0dc      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d66:	2b05      	cmp	r3, #5
 8004d68:	d009      	beq.n	8004d7e <HAL_RCC_OscConfig+0x37a>
 8004d6a:	4b72      	ldr	r3, [pc, #456]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004d6c:	6a1a      	ldr	r2, [r3, #32]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	621a      	str	r2, [r3, #32]
 8004d74:	6a1a      	ldr	r2, [r3, #32]
 8004d76:	f022 0204 	bic.w	r2, r2, #4
 8004d7a:	621a      	str	r2, [r3, #32]
 8004d7c:	e7df      	b.n	8004d3e <HAL_RCC_OscConfig+0x33a>
 8004d7e:	4b6d      	ldr	r3, [pc, #436]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004d80:	6a1a      	ldr	r2, [r3, #32]
 8004d82:	f042 0204 	orr.w	r2, r2, #4
 8004d86:	621a      	str	r2, [r3, #32]
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	621a      	str	r2, [r3, #32]
 8004d90:	e7d5      	b.n	8004d3e <HAL_RCC_OscConfig+0x33a>
      tickstart = HAL_GetTick();
 8004d92:	f7fe fd15 	bl	80037c0 <HAL_GetTick>
 8004d96:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d98:	4e66      	ldr	r6, [pc, #408]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9a:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d9e:	6a33      	ldr	r3, [r6, #32]
 8004da0:	f013 0f02 	tst.w	r3, #2
 8004da4:	d007      	beq.n	8004db6 <HAL_RCC_OscConfig+0x3b2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fe fd0b 	bl	80037c0 <HAL_GetTick>
 8004daa:	eba0 0008 	sub.w	r0, r0, r8
 8004dae:	42b8      	cmp	r0, r7
 8004db0:	d9f5      	bls.n	8004d9e <HAL_RCC_OscConfig+0x39a>
          return HAL_TIMEOUT;
 8004db2:	2003      	movs	r0, #3
 8004db4:	e0b4      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
    if (pwrclkchanged == SET)
 8004db6:	2d00      	cmp	r5, #0
 8004db8:	d143      	bne.n	8004e42 <HAL_RCC_OscConfig+0x43e>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004dba:	69e3      	ldr	r3, [r4, #28]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d846      	bhi.n	8004e4e <HAL_RCC_OscConfig+0x44a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dc0:	69e3      	ldr	r3, [r4, #28]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80ab 	beq.w	8004f1e <HAL_RCC_OscConfig+0x51a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc8:	4a5a      	ldr	r2, [pc, #360]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004dca:	6852      	ldr	r2, [r2, #4]
 8004dcc:	f002 020c 	and.w	r2, r2, #12
 8004dd0:	2a08      	cmp	r2, #8
 8004dd2:	f000 808e 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d177      	bne.n	8004eca <HAL_RCC_OscConfig+0x4c6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004dda:	6a23      	ldr	r3, [r4, #32]
 8004ddc:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8004de0:	d004      	beq.n	8004dec <HAL_RCC_OscConfig+0x3e8>
 8004de2:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8004de6:	4851      	ldr	r0, [pc, #324]	; (8004f2c <HAL_RCC_OscConfig+0x528>)
 8004de8:	f7fc fe3e 	bl	8001a68 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dee:	f433 2280 	bics.w	r2, r3, #262144	; 0x40000
 8004df2:	d014      	beq.n	8004e1e <HAL_RCC_OscConfig+0x41a>
 8004df4:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8004df8:	d011      	beq.n	8004e1e <HAL_RCC_OscConfig+0x41a>
 8004dfa:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004dfe:	d00e      	beq.n	8004e1e <HAL_RCC_OscConfig+0x41a>
 8004e00:	f5b2 1fc0 	cmp.w	r2, #1572864	; 0x180000
 8004e04:	d00b      	beq.n	8004e1e <HAL_RCC_OscConfig+0x41a>
 8004e06:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCC_OscConfig+0x41a>
 8004e0c:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
 8004e10:	d005      	beq.n	8004e1e <HAL_RCC_OscConfig+0x41a>
 8004e12:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8004e16:	d002      	beq.n	8004e1e <HAL_RCC_OscConfig+0x41a>
 8004e18:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004e1c:	d11d      	bne.n	8004e5a <HAL_RCC_OscConfig+0x456>
        __HAL_RCC_PLL_DISABLE();
 8004e1e:	4b46      	ldr	r3, [pc, #280]	; (8004f38 <HAL_RCC_OscConfig+0x534>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004e24:	f7fe fccc 	bl	80037c0 <HAL_GetTick>
 8004e28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e2a:	4d42      	ldr	r5, [pc, #264]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e32:	d018      	beq.n	8004e66 <HAL_RCC_OscConfig+0x462>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fe fcc4 	bl	80037c0 <HAL_GetTick>
 8004e38:	1b80      	subs	r0, r0, r6
 8004e3a:	2802      	cmp	r0, #2
 8004e3c:	d9f6      	bls.n	8004e2c <HAL_RCC_OscConfig+0x428>
            return HAL_TIMEOUT;
 8004e3e:	2003      	movs	r0, #3
 8004e40:	e06e      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e42:	4a3c      	ldr	r2, [pc, #240]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004e44:	69d3      	ldr	r3, [r2, #28]
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	61d3      	str	r3, [r2, #28]
 8004e4c:	e7b5      	b.n	8004dba <HAL_RCC_OscConfig+0x3b6>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004e4e:	f240 21af 	movw	r1, #687	; 0x2af
 8004e52:	4836      	ldr	r0, [pc, #216]	; (8004f2c <HAL_RCC_OscConfig+0x528>)
 8004e54:	f7fc fe08 	bl	8001a68 <assert_failed>
 8004e58:	e7b2      	b.n	8004dc0 <HAL_RCC_OscConfig+0x3bc>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004e5a:	f240 21b9 	movw	r1, #697	; 0x2b9
 8004e5e:	4833      	ldr	r0, [pc, #204]	; (8004f2c <HAL_RCC_OscConfig+0x528>)
 8004e60:	f7fc fe02 	bl	8001a68 <assert_failed>
 8004e64:	e7db      	b.n	8004e1e <HAL_RCC_OscConfig+0x41a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e66:	6a23      	ldr	r3, [r4, #32]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d01a      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e6e:	4931      	ldr	r1, [pc, #196]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004e70:	684a      	ldr	r2, [r1, #4]
 8004e72:	6a23      	ldr	r3, [r4, #32]
 8004e74:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e76:	4303      	orrs	r3, r0
 8004e78:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8004e80:	4b2d      	ldr	r3, [pc, #180]	; (8004f38 <HAL_RCC_OscConfig+0x534>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004e86:	f7fe fc9b 	bl	80037c0 <HAL_GetTick>
 8004e8a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e8c:	4c29      	ldr	r4, [pc, #164]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e94:	d117      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x4c2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e96:	f7fe fc93 	bl	80037c0 <HAL_GetTick>
 8004e9a:	1b40      	subs	r0, r0, r5
 8004e9c:	2802      	cmp	r0, #2
 8004e9e:	d9f6      	bls.n	8004e8e <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	e03d      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004ea4:	68a3      	ldr	r3, [r4, #8]
 8004ea6:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8004eaa:	d004      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x4b2>
 8004eac:	f240 21cf 	movw	r1, #719	; 0x2cf
 8004eb0:	481e      	ldr	r0, [pc, #120]	; (8004f2c <HAL_RCC_OscConfig+0x528>)
 8004eb2:	f7fc fdd9 	bl	8001a68 <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004eb6:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004eb8:	6853      	ldr	r3, [r2, #4]
 8004eba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ebe:	68a1      	ldr	r1, [r4, #8]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6053      	str	r3, [r2, #4]
 8004ec4:	e7d3      	b.n	8004e6e <HAL_RCC_OscConfig+0x46a>
  return HAL_OK;
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	e02a      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
        __HAL_RCC_PLL_DISABLE();
 8004eca:	4b1b      	ldr	r3, [pc, #108]	; (8004f38 <HAL_RCC_OscConfig+0x534>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004ed0:	f7fe fc76 	bl	80037c0 <HAL_GetTick>
 8004ed4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed6:	4c17      	ldr	r4, [pc, #92]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004ede:	d006      	beq.n	8004eee <HAL_RCC_OscConfig+0x4ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fe fc6e 	bl	80037c0 <HAL_GetTick>
 8004ee4:	1b40      	subs	r0, r0, r5
 8004ee6:	2802      	cmp	r0, #2
 8004ee8:	d9f6      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 8004eea:	2003      	movs	r0, #3
 8004eec:	e018      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
  return HAL_OK;
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e016      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d017      	beq.n	8004f26 <HAL_RCC_OscConfig+0x522>
        pll_config = RCC->CFGR;
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_RCC_OscConfig+0x530>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efa:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004efe:	6a22      	ldr	r2, [r4, #32]
 8004f00:	4291      	cmp	r1, r2
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_OscConfig+0x504>
          return HAL_ERROR;
 8004f04:	2001      	movs	r0, #1
 8004f06:	e00b      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8004f0e:	1a18      	subs	r0, r3, r0
 8004f10:	bf18      	it	ne
 8004f12:	2001      	movne	r0, #1
 8004f14:	e004      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
 8004f16:	2001      	movs	r0, #1
}
 8004f18:	4770      	bx	lr
        return HAL_ERROR;
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	e000      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
  return HAL_OK;
 8004f1e:	2000      	movs	r0, #0
}
 8004f20:	b002      	add	sp, #8
 8004f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8004f26:	2001      	movs	r0, #1
 8004f28:	e7fa      	b.n	8004f20 <HAL_RCC_OscConfig+0x51c>
 8004f2a:	bf00      	nop
 8004f2c:	0800af50 	.word	0x0800af50
 8004f30:	40007000 	.word	0x40007000
 8004f34:	40021000 	.word	0x40021000
 8004f38:	42420060 	.word	0x42420060

08004f3c <HAL_RCC_GetSysClockFreq>:
{
 8004f3c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f3e:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x60>)
 8004f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f42:	f10d 0c18 	add.w	ip, sp, #24
 8004f46:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f88d 3004 	strb.w	r3, [sp, #4]
 8004f50:	2302      	movs	r3, #2
 8004f52:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8004f56:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x64>)
 8004f58:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004f5a:	f003 020c 	and.w	r2, r3, #12
 8004f5e:	2a08      	cmp	r2, #8
 8004f60:	d119      	bne.n	8004f96 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f62:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004f66:	4462      	add	r2, ip
 8004f68:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004f70:	d104      	bne.n	8004f7c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f72:	480c      	ldr	r0, [pc, #48]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x68>)
 8004f74:	fb00 f002 	mul.w	r0, r0, r2
}
 8004f78:	b006      	add	sp, #24
 8004f7a:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f7c:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x64>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f80:	4809      	ldr	r0, [pc, #36]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004f82:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f86:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004f8a:	4463      	add	r3, ip
 8004f8c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f90:	fbb0 f0f3 	udiv	r0, r0, r3
 8004f94:	e7f0      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8004f96:	4804      	ldr	r0, [pc, #16]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8004f98:	e7ee      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x3c>
 8004f9a:	bf00      	nop
 8004f9c:	0800aae0 	.word	0x0800aae0
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	003d0900 	.word	0x003d0900
 8004fa8:	007a1200 	.word	0x007a1200

08004fac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f000 80fc 	beq.w	80051aa <HAL_RCC_ClockConfig+0x1fe>
{
 8004fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004fba:	6803      	ldr	r3, [r0, #0]
 8004fbc:	f013 0f0f 	tst.w	r3, #15
 8004fc0:	d015      	beq.n	8004fee <HAL_RCC_ClockConfig+0x42>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004fc2:	2d02      	cmp	r5, #2
 8004fc4:	d819      	bhi.n	8004ffa <HAL_RCC_ClockConfig+0x4e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc6:	4b7b      	ldr	r3, [pc, #492]	; (80051b4 <HAL_RCC_ClockConfig+0x208>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	42ab      	cmp	r3, r5
 8004fd0:	d219      	bcs.n	8005006 <HAL_RCC_ClockConfig+0x5a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd2:	4a78      	ldr	r2, [pc, #480]	; (80051b4 <HAL_RCC_ClockConfig+0x208>)
 8004fd4:	6813      	ldr	r3, [r2, #0]
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	432b      	orrs	r3, r5
 8004fdc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	42ab      	cmp	r3, r5
 8004fe6:	d00e      	beq.n	8005006 <HAL_RCC_ClockConfig+0x5a>
    return HAL_ERROR;
 8004fe8:	2001      	movs	r0, #1
}
 8004fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004fee:	f44f 714e 	mov.w	r1, #824	; 0x338
 8004ff2:	4871      	ldr	r0, [pc, #452]	; (80051b8 <HAL_RCC_ClockConfig+0x20c>)
 8004ff4:	f7fc fd38 	bl	8001a68 <assert_failed>
 8004ff8:	e7e3      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x16>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004ffa:	f240 3139 	movw	r1, #825	; 0x339
 8004ffe:	486e      	ldr	r0, [pc, #440]	; (80051b8 <HAL_RCC_ClockConfig+0x20c>)
 8005000:	f7fc fd32 	bl	8001a68 <assert_failed>
 8005004:	e7df      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	f013 0f02 	tst.w	r3, #2
 800500c:	d029      	beq.n	8005062 <HAL_RCC_ClockConfig+0xb6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500e:	f013 0f04 	tst.w	r3, #4
 8005012:	d004      	beq.n	800501e <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005014:	4a69      	ldr	r2, [pc, #420]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
 8005016:	6853      	ldr	r3, [r2, #4]
 8005018:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800501c:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	f013 0f08 	tst.w	r3, #8
 8005024:	d004      	beq.n	8005030 <HAL_RCC_ClockConfig+0x84>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005026:	4a65      	ldr	r2, [pc, #404]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
 8005028:	6853      	ldr	r3, [r2, #4]
 800502a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800502e:	6053      	str	r3, [r2, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005030:	68a3      	ldr	r3, [r4, #8]
 8005032:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8005036:	d00d      	beq.n	8005054 <HAL_RCC_ClockConfig+0xa8>
 8005038:	f023 0220 	bic.w	r2, r3, #32
 800503c:	2a90      	cmp	r2, #144	; 0x90
 800503e:	d009      	beq.n	8005054 <HAL_RCC_ClockConfig+0xa8>
 8005040:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005044:	2aa0      	cmp	r2, #160	; 0xa0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0xa8>
 8005048:	f023 0210 	bic.w	r2, r3, #16
 800504c:	2ac0      	cmp	r2, #192	; 0xc0
 800504e:	d001      	beq.n	8005054 <HAL_RCC_ClockConfig+0xa8>
 8005050:	2bf0      	cmp	r3, #240	; 0xf0
 8005052:	d133      	bne.n	80050bc <HAL_RCC_ClockConfig+0x110>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005054:	4a59      	ldr	r2, [pc, #356]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
 8005056:	6853      	ldr	r3, [r2, #4]
 8005058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800505c:	68a1      	ldr	r1, [r4, #8]
 800505e:	430b      	orrs	r3, r1
 8005060:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	f013 0f01 	tst.w	r3, #1
 8005068:	d042      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x144>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800506a:	6863      	ldr	r3, [r4, #4]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d82b      	bhi.n	80050c8 <HAL_RCC_ClockConfig+0x11c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005070:	6862      	ldr	r2, [r4, #4]
 8005072:	2a01      	cmp	r2, #1
 8005074:	d02e      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005076:	2a02      	cmp	r2, #2
 8005078:	d033      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	4b50      	ldr	r3, [pc, #320]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f013 0f02 	tst.w	r3, #2
 8005082:	f000 8094 	beq.w	80051ae <HAL_RCC_ClockConfig+0x202>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005086:	494d      	ldr	r1, [pc, #308]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
 8005088:	684b      	ldr	r3, [r1, #4]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	4313      	orrs	r3, r2
 8005090:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8005092:	f7fe fb95 	bl	80037c0 <HAL_GetTick>
 8005096:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005098:	4e48      	ldr	r6, [pc, #288]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509a:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509e:	6873      	ldr	r3, [r6, #4]
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	6862      	ldr	r2, [r4, #4]
 80050a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80050aa:	d021      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x144>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ac:	f7fe fb88 	bl	80037c0 <HAL_GetTick>
 80050b0:	eba0 0008 	sub.w	r0, r0, r8
 80050b4:	42b8      	cmp	r0, r7
 80050b6:	d9f2      	bls.n	800509e <HAL_RCC_ClockConfig+0xf2>
        return HAL_TIMEOUT;
 80050b8:	2003      	movs	r0, #3
 80050ba:	e796      	b.n	8004fea <HAL_RCC_ClockConfig+0x3e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80050bc:	f240 315f 	movw	r1, #863	; 0x35f
 80050c0:	483d      	ldr	r0, [pc, #244]	; (80051b8 <HAL_RCC_ClockConfig+0x20c>)
 80050c2:	f7fc fcd1 	bl	8001a68 <assert_failed>
 80050c6:	e7c5      	b.n	8005054 <HAL_RCC_ClockConfig+0xa8>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80050c8:	f240 3166 	movw	r1, #870	; 0x366
 80050cc:	483a      	ldr	r0, [pc, #232]	; (80051b8 <HAL_RCC_ClockConfig+0x20c>)
 80050ce:	f7fc fccb 	bl	8001a68 <assert_failed>
 80050d2:	e7cd      	b.n	8005070 <HAL_RCC_ClockConfig+0xc4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d4:	4b39      	ldr	r3, [pc, #228]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80050dc:	d1d3      	bne.n	8005086 <HAL_RCC_ClockConfig+0xda>
        return HAL_ERROR;
 80050de:	2001      	movs	r0, #1
 80050e0:	e783      	b.n	8004fea <HAL_RCC_ClockConfig+0x3e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e2:	4b36      	ldr	r3, [pc, #216]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80050ea:	d1cc      	bne.n	8005086 <HAL_RCC_ClockConfig+0xda>
        return HAL_ERROR;
 80050ec:	2001      	movs	r0, #1
 80050ee:	e77c      	b.n	8004fea <HAL_RCC_ClockConfig+0x3e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050f0:	4b30      	ldr	r3, [pc, #192]	; (80051b4 <HAL_RCC_ClockConfig+0x208>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	42ab      	cmp	r3, r5
 80050fa:	d90c      	bls.n	8005116 <HAL_RCC_ClockConfig+0x16a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fc:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <HAL_RCC_ClockConfig+0x208>)
 80050fe:	6813      	ldr	r3, [r2, #0]
 8005100:	f023 0307 	bic.w	r3, r3, #7
 8005104:	432b      	orrs	r3, r5
 8005106:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005108:	6813      	ldr	r3, [r2, #0]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	42ab      	cmp	r3, r5
 8005110:	d001      	beq.n	8005116 <HAL_RCC_ClockConfig+0x16a>
    return HAL_ERROR;
 8005112:	2001      	movs	r0, #1
 8005114:	e769      	b.n	8004fea <HAL_RCC_ClockConfig+0x3e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	f013 0f04 	tst.w	r3, #4
 800511c:	d017      	beq.n	800514e <HAL_RCC_ClockConfig+0x1a2>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800511e:	68e3      	ldr	r3, [r4, #12]
 8005120:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8005124:	d00c      	beq.n	8005140 <HAL_RCC_ClockConfig+0x194>
 8005126:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800512a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800512e:	d007      	beq.n	8005140 <HAL_RCC_ClockConfig+0x194>
 8005130:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005134:	d004      	beq.n	8005140 <HAL_RCC_ClockConfig+0x194>
 8005136:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800513a:	481f      	ldr	r0, [pc, #124]	; (80051b8 <HAL_RCC_ClockConfig+0x20c>)
 800513c:	f7fc fc94 	bl	8001a68 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005140:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
 8005142:	6853      	ldr	r3, [r2, #4]
 8005144:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005148:	68e1      	ldr	r1, [r4, #12]
 800514a:	430b      	orrs	r3, r1
 800514c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	f013 0f08 	tst.w	r3, #8
 8005154:	d018      	beq.n	8005188 <HAL_RCC_ClockConfig+0x1dc>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800515c:	d00c      	beq.n	8005178 <HAL_RCC_ClockConfig+0x1cc>
 800515e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005162:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8005166:	d007      	beq.n	8005178 <HAL_RCC_ClockConfig+0x1cc>
 8005168:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800516c:	d004      	beq.n	8005178 <HAL_RCC_ClockConfig+0x1cc>
 800516e:	f240 31ab 	movw	r1, #939	; 0x3ab
 8005172:	4811      	ldr	r0, [pc, #68]	; (80051b8 <HAL_RCC_ClockConfig+0x20c>)
 8005174:	f7fc fc78 	bl	8001a68 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005178:	4a10      	ldr	r2, [pc, #64]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
 800517a:	6853      	ldr	r3, [r2, #4]
 800517c:	6921      	ldr	r1, [r4, #16]
 800517e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005182:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005186:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005188:	f7ff fed8 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_RCC_ClockConfig+0x210>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005194:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <HAL_RCC_ClockConfig+0x214>)
 8005196:	5cd3      	ldrb	r3, [r2, r3]
 8005198:	40d8      	lsrs	r0, r3
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <HAL_RCC_ClockConfig+0x218>)
 800519c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <HAL_RCC_ClockConfig+0x21c>)
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	f7fe fac9 	bl	8003738 <HAL_InitTick>
  return HAL_OK;
 80051a6:	2000      	movs	r0, #0
 80051a8:	e71f      	b.n	8004fea <HAL_RCC_ClockConfig+0x3e>
    return HAL_ERROR;
 80051aa:	2001      	movs	r0, #1
}
 80051ac:	4770      	bx	lr
        return HAL_ERROR;
 80051ae:	2001      	movs	r0, #1
 80051b0:	e71b      	b.n	8004fea <HAL_RCC_ClockConfig+0x3e>
 80051b2:	bf00      	nop
 80051b4:	40022000 	.word	0x40022000
 80051b8:	0800af50 	.word	0x0800af50
 80051bc:	40021000 	.word	0x40021000
 80051c0:	0800acd4 	.word	0x0800acd4
 80051c4:	20000028 	.word	0x20000028
 80051c8:	20000030 	.word	0x20000030

080051cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051cc:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80051d4:	4a03      	ldr	r2, [pc, #12]	; (80051e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80051d6:	5cd3      	ldrb	r3, [r2, r3]
 80051d8:	4a03      	ldr	r2, [pc, #12]	; (80051e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80051da:	6810      	ldr	r0, [r2, #0]
}
 80051dc:	40d8      	lsrs	r0, r3
 80051de:	4770      	bx	lr
 80051e0:	40021000 	.word	0x40021000
 80051e4:	0800ace4 	.word	0x0800ace4
 80051e8:	20000028 	.word	0x20000028

080051ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <HAL_RCC_GetPCLK2Freq+0x14>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80051f4:	4a03      	ldr	r2, [pc, #12]	; (8005204 <HAL_RCC_GetPCLK2Freq+0x18>)
 80051f6:	5cd3      	ldrb	r3, [r2, r3]
 80051f8:	4a03      	ldr	r2, [pc, #12]	; (8005208 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80051fa:	6810      	ldr	r0, [r2, #0]
}
 80051fc:	40d8      	lsrs	r0, r3
 80051fe:	4770      	bx	lr
 8005200:	40021000 	.word	0x40021000
 8005204:	0800ace4 	.word	0x0800ace4
 8005208:	20000028 	.word	0x20000028

0800520c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800520c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	4604      	mov	r4, r0
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005214:	6803      	ldr	r3, [r0, #0]
 8005216:	f013 0f13 	tst.w	r3, #19
 800521a:	d06c      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xea>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	f013 0f01 	tst.w	r3, #1
 8005222:	d03f      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005224:	6863      	ldr	r3, [r4, #4]
 8005226:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800522a:	d006      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x2e>
 800522c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005230:	d003      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8005232:	2172      	movs	r1, #114	; 0x72
 8005234:	484e      	ldr	r0, [pc, #312]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005236:	f7fc fc17 	bl	8001a68 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523a:	4b4e      	ldr	r3, [pc, #312]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005242:	d15d      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005244:	4b4b      	ldr	r3, [pc, #300]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800524c:	61da      	str	r2, [r3, #28]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005258:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b47      	ldr	r3, [pc, #284]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005262:	d04f      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005264:	4b43      	ldr	r3, [pc, #268]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005266:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005268:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800526c:	d011      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x86>
 800526e:	6862      	ldr	r2, [r4, #4]
 8005270:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005274:	429a      	cmp	r2, r3
 8005276:	d00c      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005278:	4a3e      	ldr	r2, [pc, #248]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800527a:	6a13      	ldr	r3, [r2, #32]
 800527c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005280:	493e      	ldr	r1, [pc, #248]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8005282:	2601      	movs	r6, #1
 8005284:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005286:	2600      	movs	r6, #0
 8005288:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800528a:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800528c:	f013 0f01 	tst.w	r3, #1
 8005290:	d14c      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005292:	4a38      	ldr	r2, [pc, #224]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005294:	6a13      	ldr	r3, [r2, #32]
 8005296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529a:	6861      	ldr	r1, [r4, #4]
 800529c:	430b      	orrs	r3, r1
 800529e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052a0:	2d00      	cmp	r5, #0
 80052a2:	d158      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	f013 0f02 	tst.w	r3, #2
 80052aa:	d011      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80052ac:	68a3      	ldr	r3, [r4, #8]
 80052ae:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80052b2:	d006      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 80052b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b8:	d003      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 80052ba:	21b9      	movs	r1, #185	; 0xb9
 80052bc:	482c      	ldr	r0, [pc, #176]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052be:	f7fc fbd3 	bl	8001a68 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052c2:	4a2c      	ldr	r2, [pc, #176]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052c4:	6853      	ldr	r3, [r2, #4]
 80052c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80052ca:	68a1      	ldr	r1, [r4, #8]
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	f013 0f10 	tst.w	r3, #16
 80052d6:	d049      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80052d8:	68e3      	ldr	r3, [r4, #12]
 80052da:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80052de:	d13f      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x154>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052e0:	4a24      	ldr	r2, [pc, #144]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052e2:	6853      	ldr	r3, [r2, #4]
 80052e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80052e8:	68e1      	ldr	r1, [r4, #12]
 80052ea:	430b      	orrs	r3, r1
 80052ec:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80052ee:	2000      	movs	r0, #0
}
 80052f0:	b002      	add	sp, #8
 80052f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80052f6:	216c      	movs	r1, #108	; 0x6c
 80052f8:	481d      	ldr	r0, [pc, #116]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052fa:	f7fc fbb5 	bl	8001a68 <assert_failed>
 80052fe:	e78d      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x10>
    FlagStatus       pwrclkchanged = RESET;
 8005300:	2500      	movs	r5, #0
 8005302:	e7aa      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005304:	4a1c      	ldr	r2, [pc, #112]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8005306:	6813      	ldr	r3, [r2, #0]
 8005308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800530c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800530e:	f7fe fa57 	bl	80037c0 <HAL_GetTick>
 8005312:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005314:	4e18      	ldr	r6, [pc, #96]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8005316:	6833      	ldr	r3, [r6, #0]
 8005318:	f413 7f80 	tst.w	r3, #256	; 0x100
 800531c:	d1a2      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x58>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531e:	f7fe fa4f 	bl	80037c0 <HAL_GetTick>
 8005322:	1bc0      	subs	r0, r0, r7
 8005324:	2864      	cmp	r0, #100	; 0x64
 8005326:	d9f6      	bls.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          return HAL_TIMEOUT;
 8005328:	2003      	movs	r0, #3
 800532a:	e7e1      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 800532c:	f7fe fa48 	bl	80037c0 <HAL_GetTick>
 8005330:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005332:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8005336:	f506 3604 	add.w	r6, r6, #135168	; 0x21000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533e:	6a33      	ldr	r3, [r6, #32]
 8005340:	f013 0f02 	tst.w	r3, #2
 8005344:	d1a5      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x86>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005346:	f7fe fa3b 	bl	80037c0 <HAL_GetTick>
 800534a:	eba0 0008 	sub.w	r0, r0, r8
 800534e:	42b8      	cmp	r0, r7
 8005350:	d9f5      	bls.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
 8005352:	2003      	movs	r0, #3
 8005354:	e7cc      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005356:	69d3      	ldr	r3, [r2, #28]
 8005358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535c:	61d3      	str	r3, [r2, #28]
 800535e:	e7a1      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8005360:	f240 1115 	movw	r1, #277	; 0x115
 8005364:	4802      	ldr	r0, [pc, #8]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005366:	f7fc fb7f 	bl	8001a68 <assert_failed>
 800536a:	e7b9      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  return HAL_OK;
 800536c:	2000      	movs	r0, #0
 800536e:	e7bf      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8005370:	0800af88 	.word	0x0800af88
 8005374:	40021000 	.word	0x40021000
 8005378:	40007000 	.word	0x40007000
 800537c:	42420440 	.word	0x42420440

08005380 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005380:	b510      	push	{r4, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005386:	4b3f      	ldr	r3, [pc, #252]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8005388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800538a:	f10d 0c18 	add.w	ip, sp, #24
 800538e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005392:	2301      	movs	r3, #1
 8005394:	f88d 3004 	strb.w	r3, [sp, #4]
 8005398:	2302      	movs	r3, #2
 800539a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 800539e:	f014 0f13 	tst.w	r4, #19
 80053a2:	d007      	beq.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34>

  switch (PeriphClk)
 80053a4:	2c02      	cmp	r4, #2
 80053a6:	d059      	beq.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80053a8:	2c10      	cmp	r4, #16
 80053aa:	d009      	beq.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80053ac:	2c01      	cmp	r4, #1
 80053ae:	d031      	beq.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 80053b0:	2000      	movs	r0, #0
 80053b2:	e05d      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80053b4:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80053b8:	4833      	ldr	r0, [pc, #204]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 80053ba:	f7fc fb55 	bl	8001a68 <assert_failed>
 80053be:	e7f1      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80053c0:	4b32      	ldr	r3, [pc, #200]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 80053c2:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80053ca:	d053      	beq.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053cc:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80053d0:	a906      	add	r1, sp, #24
 80053d2:	440b      	add	r3, r1
 80053d4:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053d8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80053dc:	d016      	beq.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053de:	4b2b      	ldr	r3, [pc, #172]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80053e6:	440b      	add	r3, r1
 80053e8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80053ec:	4b28      	ldr	r3, [pc, #160]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x110>)
 80053ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80053f2:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80053f6:	4b25      	ldr	r3, [pc, #148]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80053fe:	d137      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 8005400:	0040      	lsls	r0, r0, #1
 8005402:	4b24      	ldr	r3, [pc, #144]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x114>)
 8005404:	fba3 3000 	umull	r3, r0, r3, r0
 8005408:	0840      	lsrs	r0, r0, #1
 800540a:	e031      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800540c:	4b22      	ldr	r3, [pc, #136]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x118>)
 800540e:	fb03 f000 	mul.w	r0, r3, r0
 8005412:	e7f0      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8005416:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005418:	f240 3202 	movw	r2, #770	; 0x302
 800541c:	401a      	ands	r2, r3
 800541e:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8005422:	d029      	beq.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542c:	d00c      	beq.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800542e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005432:	d124      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
      {
        frequency = HSE_VALUE / 128U;
 800543c:	2b00      	cmp	r3, #0
 800543e:	f24f 4024 	movw	r0, #62500	; 0xf424
 8005442:	bf08      	it	eq
 8005444:	2000      	moveq	r0, #0
 8005446:	e013      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005448:	4b10      	ldr	r3, [pc, #64]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	f003 0302 	and.w	r3, r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;
 8005450:	2b00      	cmp	r3, #0
 8005452:	f649 4040 	movw	r0, #40000	; 0x9c40
 8005456:	bf08      	it	eq
 8005458:	2000      	moveq	r0, #0
 800545a:	e009      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800545c:	f7ff fec6 	bl	80051ec <HAL_RCC_GetPCLK2Freq>
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8005468:	3301      	adds	r3, #1
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return (frequency);
}
 8005470:	b006      	add	sp, #24
 8005472:	bd10      	pop	{r4, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 8005474:	2000      	movs	r0, #0
 8005476:	e7fb      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        frequency = LSE_VALUE;
 8005478:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800547c:	e7f8      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  uint32_t temp_reg = 0U, frequency = 0U;
 800547e:	2000      	movs	r0, #0
 8005480:	e7f6      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005482:	bf00      	nop
 8005484:	0800aaf0 	.word	0x0800aaf0
 8005488:	0800af88 	.word	0x0800af88
 800548c:	40021000 	.word	0x40021000
 8005490:	007a1200 	.word	0x007a1200
 8005494:	aaaaaaab 	.word	0xaaaaaaab
 8005498:	003d0900 	.word	0x003d0900

0800549c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	4607      	mov	r7, r0
 80054a0:	460e      	mov	r6, r1
 80054a2:	4615      	mov	r5, r2
 80054a4:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	6893      	ldr	r3, [r2, #8]
 80054aa:	ea36 0303 	bics.w	r3, r6, r3
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	42ab      	cmp	r3, r5
 80054b6:	d037      	beq.n	8005528 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80054bc:	d0f4      	beq.n	80054a8 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80054be:	f7fe f97f 	bl	80037c0 <HAL_GetTick>
 80054c2:	9b06      	ldr	r3, [sp, #24]
 80054c4:	1ac0      	subs	r0, r0, r3
 80054c6:	42a0      	cmp	r0, r4
 80054c8:	d201      	bcs.n	80054ce <SPI_WaitFlagStateUntilTimeout+0x32>
 80054ca:	2c00      	cmp	r4, #0
 80054cc:	d1eb      	bne.n	80054a6 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	6853      	ldr	r3, [r2, #4]
 80054d2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80054d6:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054de:	d00b      	beq.n	80054f8 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e6:	d014      	beq.n	8005512 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ee:	2300      	movs	r3, #0
 80054f0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

        return HAL_TIMEOUT;
 80054f4:	2003      	movs	r0, #3
 80054f6:	e018      	b.n	800552a <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fe:	d002      	beq.n	8005506 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005504:	d1ec      	bne.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	6813      	ldr	r3, [r2, #0]
 800550a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	e7e6      	b.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	6813      	ldr	r3, [r2, #0]
 8005516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	6813      	ldr	r3, [r2, #0]
 8005520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e7df      	b.n	80054e8 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8005528:	2000      	movs	r0, #0
}
 800552a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800552c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800552c:	b510      	push	{r4, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005532:	9200      	str	r2, [sp, #0]
 8005534:	460b      	mov	r3, r1
 8005536:	2200      	movs	r2, #0
 8005538:	2180      	movs	r1, #128	; 0x80
 800553a:	f7ff ffaf 	bl	800549c <SPI_WaitFlagStateUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	b910      	cbnz	r0, 8005548 <SPI_EndRxTxTransaction+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8005542:	4618      	mov	r0, r3
 8005544:	b002      	add	sp, #8
 8005546:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005548:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800554a:	f043 0320 	orr.w	r3, r3, #32
 800554e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e7f6      	b.n	8005542 <SPI_EndRxTxTransaction+0x16>

08005554 <SPI_EndRxTransaction>:
{
 8005554:	b510      	push	{r4, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800555a:	6840      	ldr	r0, [r0, #4]
 800555c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8005560:	d00b      	beq.n	800557a <SPI_EndRxTransaction+0x26>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005562:	9200      	str	r2, [sp, #0]
 8005564:	460b      	mov	r3, r1
 8005566:	2200      	movs	r2, #0
 8005568:	2180      	movs	r1, #128	; 0x80
 800556a:	4620      	mov	r0, r4
 800556c:	f7ff ff96 	bl	800549c <SPI_WaitFlagStateUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	bb30      	cbnz	r0, 80055c2 <SPI_EndRxTransaction+0x6e>
}
 8005574:	4618      	mov	r0, r3
 8005576:	b002      	add	sp, #8
 8005578:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557a:	68a3      	ldr	r3, [r4, #8]
 800557c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005580:	d002      	beq.n	8005588 <SPI_EndRxTransaction+0x34>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005586:	d1ec      	bne.n	8005562 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	6803      	ldr	r3, [r0, #0]
 800558c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005590:	6003      	str	r3, [r0, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005592:	6863      	ldr	r3, [r4, #4]
 8005594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005598:	d1e3      	bne.n	8005562 <SPI_EndRxTransaction+0xe>
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a0:	d1df      	bne.n	8005562 <SPI_EndRxTransaction+0xe>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055a2:	9200      	str	r2, [sp, #0]
 80055a4:	460b      	mov	r3, r1
 80055a6:	2200      	movs	r2, #0
 80055a8:	2101      	movs	r1, #1
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff ff76 	bl	800549c <SPI_WaitFlagStateUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d0de      	beq.n	8005574 <SPI_EndRxTransaction+0x20>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055b8:	f043 0320 	orr.w	r3, r3, #32
 80055bc:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e7d8      	b.n	8005574 <SPI_EndRxTransaction+0x20>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055c4:	f043 0320 	orr.w	r3, r3, #32
 80055c8:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e7d2      	b.n	8005574 <SPI_EndRxTransaction+0x20>
	...

080055d0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80055d0:	2800      	cmp	r0, #0
 80055d2:	f000 80ab 	beq.w	800572c <HAL_SPI_Init+0x15c>
{
 80055d6:	b510      	push	{r4, lr}
 80055d8:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80055da:	6803      	ldr	r3, [r0, #0]
 80055dc:	4a54      	ldr	r2, [pc, #336]	; (8005730 <HAL_SPI_Init+0x160>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d008      	beq.n	80055f4 <HAL_SPI_Init+0x24>
 80055e2:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_SPI_Init+0x24>
 80055ea:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80055ee:	4851      	ldr	r0, [pc, #324]	; (8005734 <HAL_SPI_Init+0x164>)
 80055f0:	f7fc fa3a 	bl	8001a68 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80055f4:	6863      	ldr	r3, [r4, #4]
 80055f6:	b113      	cbz	r3, 80055fe <HAL_SPI_Init+0x2e>
 80055f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055fc:	d13d      	bne.n	800567a <HAL_SPI_Init+0xaa>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80055fe:	68a3      	ldr	r3, [r4, #8]
 8005600:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8005604:	d002      	beq.n	800560c <HAL_SPI_Init+0x3c>
 8005606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560a:	d13c      	bne.n	8005686 <HAL_SPI_Init+0xb6>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800560c:	68e3      	ldr	r3, [r4, #12]
 800560e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8005612:	d13e      	bne.n	8005692 <HAL_SPI_Init+0xc2>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005614:	69a3      	ldr	r3, [r4, #24]
 8005616:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800561a:	d002      	beq.n	8005622 <HAL_SPI_Init+0x52>
 800561c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005620:	d13d      	bne.n	800569e <HAL_SPI_Init+0xce>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005622:	69e3      	ldr	r3, [r4, #28]
 8005624:	f033 0308 	bics.w	r3, r3, #8
 8005628:	d00a      	beq.n	8005640 <HAL_SPI_Init+0x70>
 800562a:	2b10      	cmp	r3, #16
 800562c:	d008      	beq.n	8005640 <HAL_SPI_Init+0x70>
 800562e:	2b20      	cmp	r3, #32
 8005630:	d006      	beq.n	8005640 <HAL_SPI_Init+0x70>
 8005632:	2b30      	cmp	r3, #48	; 0x30
 8005634:	d004      	beq.n	8005640 <HAL_SPI_Init+0x70>
 8005636:	f240 115d 	movw	r1, #349	; 0x15d
 800563a:	483e      	ldr	r0, [pc, #248]	; (8005734 <HAL_SPI_Init+0x164>)
 800563c:	f7fc fa14 	bl	8001a68 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005640:	6a23      	ldr	r3, [r4, #32]
 8005642:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8005646:	d004      	beq.n	8005652 <HAL_SPI_Init+0x82>
 8005648:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800564c:	4839      	ldr	r0, [pc, #228]	; (8005734 <HAL_SPI_Init+0x164>)
 800564e:	f7fc fa0b 	bl	8001a68 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005654:	bb4b      	cbnz	r3, 80056aa <HAL_SPI_Init+0xda>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005656:	6923      	ldr	r3, [r4, #16]
 8005658:	f033 0302 	bics.w	r3, r3, #2
 800565c:	d004      	beq.n	8005668 <HAL_SPI_Init+0x98>
 800565e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8005662:	4834      	ldr	r0, [pc, #208]	; (8005734 <HAL_SPI_Init+0x164>)
 8005664:	f7fc fa00 	bl	8001a68 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005668:	6963      	ldr	r3, [r4, #20]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d925      	bls.n	80056ba <HAL_SPI_Init+0xea>
 800566e:	f240 1165 	movw	r1, #357	; 0x165
 8005672:	4830      	ldr	r0, [pc, #192]	; (8005734 <HAL_SPI_Init+0x164>)
 8005674:	f7fc f9f8 	bl	8001a68 <assert_failed>
 8005678:	e01f      	b.n	80056ba <HAL_SPI_Init+0xea>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800567a:	f240 1159 	movw	r1, #345	; 0x159
 800567e:	482d      	ldr	r0, [pc, #180]	; (8005734 <HAL_SPI_Init+0x164>)
 8005680:	f7fc f9f2 	bl	8001a68 <assert_failed>
 8005684:	e7bb      	b.n	80055fe <HAL_SPI_Init+0x2e>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005686:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800568a:	482a      	ldr	r0, [pc, #168]	; (8005734 <HAL_SPI_Init+0x164>)
 800568c:	f7fc f9ec 	bl	8001a68 <assert_failed>
 8005690:	e7bc      	b.n	800560c <HAL_SPI_Init+0x3c>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005692:	f240 115b 	movw	r1, #347	; 0x15b
 8005696:	4827      	ldr	r0, [pc, #156]	; (8005734 <HAL_SPI_Init+0x164>)
 8005698:	f7fc f9e6 	bl	8001a68 <assert_failed>
 800569c:	e7ba      	b.n	8005614 <HAL_SPI_Init+0x44>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800569e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80056a2:	4824      	ldr	r0, [pc, #144]	; (8005734 <HAL_SPI_Init+0x164>)
 80056a4:	f7fc f9e0 	bl	8001a68 <assert_failed>
 80056a8:	e7bb      	b.n	8005622 <HAL_SPI_Init+0x52>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80056aa:	f240 1161 	movw	r1, #353	; 0x161
 80056ae:	4821      	ldr	r0, [pc, #132]	; (8005734 <HAL_SPI_Init+0x164>)
 80056b0:	f7fc f9da 	bl	8001a68 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0cd      	beq.n	8005656 <HAL_SPI_Init+0x86>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80056be:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02c      	beq.n	8005720 <HAL_SPI_Init+0x150>
  hspi->State = HAL_SPI_STATE_BUSY;
 80056c6:	2302      	movs	r3, #2
 80056c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	6813      	ldr	r3, [r2, #0]
 80056d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80056d6:	6822      	ldr	r2, [r4, #0]
 80056d8:	6863      	ldr	r3, [r4, #4]
 80056da:	68a1      	ldr	r1, [r4, #8]
 80056dc:	430b      	orrs	r3, r1
 80056de:	68e1      	ldr	r1, [r4, #12]
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6921      	ldr	r1, [r4, #16]
 80056e4:	430b      	orrs	r3, r1
 80056e6:	6961      	ldr	r1, [r4, #20]
 80056e8:	430b      	orrs	r3, r1
 80056ea:	69e1      	ldr	r1, [r4, #28]
 80056ec:	430b      	orrs	r3, r1
 80056ee:	6a21      	ldr	r1, [r4, #32]
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80056f4:	430b      	orrs	r3, r1
 80056f6:	69a1      	ldr	r1, [r4, #24]
 80056f8:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	8b63      	ldrh	r3, [r4, #26]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	69d3      	ldr	r3, [r2, #28]
 800570e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005712:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005714:	2000      	movs	r0, #0
 8005716:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005718:	2301      	movs	r3, #1
 800571a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800571e:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005720:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005724:	4620      	mov	r0, r4
 8005726:	f7fc fe6b 	bl	8002400 <HAL_SPI_MspInit>
 800572a:	e7cc      	b.n	80056c6 <HAL_SPI_Init+0xf6>
    return HAL_ERROR;
 800572c:	2001      	movs	r0, #1
}
 800572e:	4770      	bx	lr
 8005730:	40013000 	.word	0x40013000
 8005734:	0800afc4 	.word	0x0800afc4

08005738 <HAL_SPI_Transmit>:
{
 8005738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	4604      	mov	r4, r0
 8005740:	4688      	mov	r8, r1
 8005742:	4617      	mov	r7, r2
 8005744:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005746:	6883      	ldr	r3, [r0, #8]
 8005748:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800574c:	d004      	beq.n	8005758 <HAL_SPI_Transmit+0x20>
 800574e:	f240 310a 	movw	r1, #778	; 0x30a
 8005752:	4864      	ldr	r0, [pc, #400]	; (80058e4 <HAL_SPI_Transmit+0x1ac>)
 8005754:	f7fc f988 	bl	8001a68 <assert_failed>
  __HAL_LOCK(hspi);
 8005758:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800575c:	2b01      	cmp	r3, #1
 800575e:	f000 80be 	beq.w	80058de <HAL_SPI_Transmit+0x1a6>
 8005762:	2301      	movs	r3, #1
 8005764:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005768:	f7fe f82a 	bl	80037c0 <HAL_GetTick>
 800576c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800576e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d009      	beq.n	800578c <HAL_SPI_Transmit+0x54>
    errorcode = HAL_BUSY;
 8005778:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800577a:	2301      	movs	r3, #1
 800577c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005780:	2300      	movs	r3, #0
 8005782:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005786:	b002      	add	sp, #8
 8005788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800578c:	f1b8 0f00 	cmp.w	r8, #0
 8005790:	f000 809d 	beq.w	80058ce <HAL_SPI_Transmit+0x196>
 8005794:	2f00      	cmp	r7, #0
 8005796:	f000 809c 	beq.w	80058d2 <HAL_SPI_Transmit+0x19a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800579a:	2303      	movs	r3, #3
 800579c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057a4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80057a8:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80057aa:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057ac:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80057ae:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80057b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80057b2:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80057b4:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b6:	68a3      	ldr	r3, [r4, #8]
 80057b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057bc:	d01c      	beq.n	80057f8 <HAL_SPI_Transmit+0xc0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80057c6:	d103      	bne.n	80057d0 <HAL_SPI_Transmit+0x98>
    __HAL_SPI_ENABLE(hspi);
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ce:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057d0:	68e3      	ldr	r3, [r4, #12]
 80057d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d6:	d015      	beq.n	8005804 <HAL_SPI_Transmit+0xcc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	b10b      	cbz	r3, 80057e0 <HAL_SPI_Transmit+0xa8>
 80057dc:	2f01      	cmp	r7, #1
 80057de:	d149      	bne.n	8005874 <HAL_SPI_Transmit+0x13c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80057e4:	7812      	ldrb	r2, [r2, #0]
 80057e6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057ea:	3301      	adds	r3, #1
 80057ec:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80057ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80057f6:	e03d      	b.n	8005874 <HAL_SPI_Transmit+0x13c>
    SPI_1LINE_TX(hspi);
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	6813      	ldr	r3, [r2, #0]
 80057fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e7dc      	b.n	80057be <HAL_SPI_Transmit+0x86>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005804:	6863      	ldr	r3, [r4, #4]
 8005806:	b10b      	cbz	r3, 800580c <HAL_SPI_Transmit+0xd4>
 8005808:	2f01      	cmp	r7, #1
 800580a:	d113      	bne.n	8005834 <HAL_SPI_Transmit+0xfc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005810:	8812      	ldrh	r2, [r2, #0]
 8005812:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005814:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005816:	3302      	adds	r3, #2
 8005818:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800581a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800581c:	3b01      	subs	r3, #1
 800581e:	b29b      	uxth	r3, r3
 8005820:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005822:	e007      	b.n	8005834 <HAL_SPI_Transmit+0xfc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005824:	f7fd ffcc 	bl	80037c0 <HAL_GetTick>
 8005828:	1b80      	subs	r0, r0, r6
 800582a:	42a8      	cmp	r0, r5
 800582c:	d316      	bcc.n	800585c <HAL_SPI_Transmit+0x124>
 800582e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005832:	d150      	bne.n	80058d6 <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 8005834:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d032      	beq.n	80058a2 <HAL_SPI_Transmit+0x16a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	f012 0f02 	tst.w	r2, #2
 8005844:	d0ee      	beq.n	8005824 <HAL_SPI_Transmit+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005846:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005848:	8812      	ldrh	r2, [r2, #0]
 800584a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800584c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800584e:	3302      	adds	r3, #2
 8005850:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005852:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005854:	3b01      	subs	r3, #1
 8005856:	b29b      	uxth	r3, r3
 8005858:	86e3      	strh	r3, [r4, #54]	; 0x36
 800585a:	e7eb      	b.n	8005834 <HAL_SPI_Transmit+0xfc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800585c:	2d00      	cmp	r5, #0
 800585e:	d1e9      	bne.n	8005834 <HAL_SPI_Transmit+0xfc>
          errorcode = HAL_TIMEOUT;
 8005860:	2003      	movs	r0, #3
 8005862:	e78a      	b.n	800577a <HAL_SPI_Transmit+0x42>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005864:	f7fd ffac 	bl	80037c0 <HAL_GetTick>
 8005868:	1b80      	subs	r0, r0, r6
 800586a:	42a8      	cmp	r0, r5
 800586c:	d315      	bcc.n	800589a <HAL_SPI_Transmit+0x162>
 800586e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005872:	d132      	bne.n	80058da <HAL_SPI_Transmit+0x1a2>
    while (hspi->TxXferCount > 0U)
 8005874:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005876:	b29b      	uxth	r3, r3
 8005878:	b19b      	cbz	r3, 80058a2 <HAL_SPI_Transmit+0x16a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	f012 0f02 	tst.w	r2, #2
 8005882:	d0ef      	beq.n	8005864 <HAL_SPI_Transmit+0x12c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005884:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005886:	7812      	ldrb	r2, [r2, #0]
 8005888:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800588a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800588c:	3301      	adds	r3, #1
 800588e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005890:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005892:	3b01      	subs	r3, #1
 8005894:	b29b      	uxth	r3, r3
 8005896:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005898:	e7ec      	b.n	8005874 <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800589a:	2d00      	cmp	r5, #0
 800589c:	d1ea      	bne.n	8005874 <HAL_SPI_Transmit+0x13c>
          errorcode = HAL_TIMEOUT;
 800589e:	2003      	movs	r0, #3
 80058a0:	e76b      	b.n	800577a <HAL_SPI_Transmit+0x42>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a2:	4632      	mov	r2, r6
 80058a4:	4629      	mov	r1, r5
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff fe40 	bl	800552c <SPI_EndRxTxTransaction>
 80058ac:	b108      	cbz	r0, 80058b2 <HAL_SPI_Transmit+0x17a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ae:	2320      	movs	r3, #32
 80058b0:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058b2:	68a3      	ldr	r3, [r4, #8]
 80058b4:	b933      	cbnz	r3, 80058c4 <HAL_SPI_Transmit+0x18c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	9201      	str	r2, [sp, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80058c6:	3000      	adds	r0, #0
 80058c8:	bf18      	it	ne
 80058ca:	2001      	movne	r0, #1
error:
 80058cc:	e755      	b.n	800577a <HAL_SPI_Transmit+0x42>
    errorcode = HAL_ERROR;
 80058ce:	2001      	movs	r0, #1
 80058d0:	e753      	b.n	800577a <HAL_SPI_Transmit+0x42>
 80058d2:	2001      	movs	r0, #1
 80058d4:	e751      	b.n	800577a <HAL_SPI_Transmit+0x42>
          errorcode = HAL_TIMEOUT;
 80058d6:	2003      	movs	r0, #3
 80058d8:	e74f      	b.n	800577a <HAL_SPI_Transmit+0x42>
          errorcode = HAL_TIMEOUT;
 80058da:	2003      	movs	r0, #3
 80058dc:	e74d      	b.n	800577a <HAL_SPI_Transmit+0x42>
  __HAL_LOCK(hspi);
 80058de:	2002      	movs	r0, #2
 80058e0:	e751      	b.n	8005786 <HAL_SPI_Transmit+0x4e>
 80058e2:	bf00      	nop
 80058e4:	0800afc4 	.word	0x0800afc4

080058e8 <HAL_SPI_TransmitReceive>:
{
 80058e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058ec:	b083      	sub	sp, #12
 80058ee:	4604      	mov	r4, r0
 80058f0:	460f      	mov	r7, r1
 80058f2:	4690      	mov	r8, r2
 80058f4:	461e      	mov	r6, r3
 80058f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80058f8:	6883      	ldr	r3, [r0, #8]
 80058fa:	b9f3      	cbnz	r3, 800593a <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 80058fc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005900:	2b01      	cmp	r3, #1
 8005902:	f000 8114 	beq.w	8005b2e <HAL_SPI_TransmitReceive+0x246>
 8005906:	2301      	movs	r3, #1
 8005908:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800590c:	f7fd ff58 	bl	80037c0 <HAL_GetTick>
 8005910:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8005912:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005916:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005918:	2b01      	cmp	r3, #1
 800591a:	d01c      	beq.n	8005956 <HAL_SPI_TransmitReceive+0x6e>
 800591c:	6862      	ldr	r2, [r4, #4]
 800591e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005922:	d010      	beq.n	8005946 <HAL_SPI_TransmitReceive+0x5e>
    errorcode = HAL_BUSY;
 8005924:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005926:	2201      	movs	r2, #1
 8005928:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800592c:	2200      	movs	r2, #0
 800592e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8005932:	4618      	mov	r0, r3
 8005934:	b003      	add	sp, #12
 8005936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800593a:	f240 4182 	movw	r1, #1154	; 0x482
 800593e:	487d      	ldr	r0, [pc, #500]	; (8005b34 <HAL_SPI_TransmitReceive+0x24c>)
 8005940:	f7fc f892 	bl	8001a68 <assert_failed>
 8005944:	e7da      	b.n	80058fc <HAL_SPI_TransmitReceive+0x14>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005946:	68a2      	ldr	r2, [r4, #8]
 8005948:	2a00      	cmp	r2, #0
 800594a:	f040 80e4 	bne.w	8005b16 <HAL_SPI_TransmitReceive+0x22e>
 800594e:	2b04      	cmp	r3, #4
 8005950:	d001      	beq.n	8005956 <HAL_SPI_TransmitReceive+0x6e>
    errorcode = HAL_BUSY;
 8005952:	2302      	movs	r3, #2
 8005954:	e7e7      	b.n	8005926 <HAL_SPI_TransmitReceive+0x3e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005956:	2f00      	cmp	r7, #0
 8005958:	f000 80df 	beq.w	8005b1a <HAL_SPI_TransmitReceive+0x232>
 800595c:	f1b8 0f00 	cmp.w	r8, #0
 8005960:	f000 80dd 	beq.w	8005b1e <HAL_SPI_TransmitReceive+0x236>
 8005964:	2e00      	cmp	r6, #0
 8005966:	f000 80dc 	beq.w	8005b22 <HAL_SPI_TransmitReceive+0x23a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800596a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005972:	bf1c      	itt	ne
 8005974:	2305      	movne	r3, #5
 8005976:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800597a:	2300      	movs	r3, #0
 800597c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800597e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005982:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005984:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005986:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005988:	86e6      	strh	r6, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800598a:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800598c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800598e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005998:	d103      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0xba>
    __HAL_SPI_ENABLE(hspi);
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059a2:	68e3      	ldr	r3, [r4, #12]
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a8:	d013      	beq.n	80059d2 <HAL_SPI_TransmitReceive+0xea>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059aa:	6863      	ldr	r3, [r4, #4]
 80059ac:	b10b      	cbz	r3, 80059b2 <HAL_SPI_TransmitReceive+0xca>
 80059ae:	2e01      	cmp	r6, #1
 80059b0:	d10a      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0xe0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80059bc:	3301      	adds	r3, #1
 80059be:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80059c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80059c8:	2601      	movs	r6, #1
        txallowed = 0U;
 80059ca:	f04f 0800 	mov.w	r8, #0
        txallowed = 1U;
 80059ce:	4637      	mov	r7, r6
 80059d0:	e069      	b.n	8005aa6 <HAL_SPI_TransmitReceive+0x1be>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d2:	6863      	ldr	r3, [r4, #4]
 80059d4:	b10b      	cbz	r3, 80059da <HAL_SPI_TransmitReceive+0xf2>
 80059d6:	2e01      	cmp	r6, #1
 80059d8:	d10a      	bne.n	80059f0 <HAL_SPI_TransmitReceive+0x108>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80059de:	8812      	ldrh	r2, [r2, #0]
 80059e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80059e4:	3302      	adds	r3, #2
 80059e6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80059e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80059f0:	2601      	movs	r6, #1
        txallowed = 0U;
 80059f2:	f04f 0800 	mov.w	r8, #0
        txallowed = 1U;
 80059f6:	4637      	mov	r7, r6
 80059f8:	e01b      	b.n	8005a32 <HAL_SPI_TransmitReceive+0x14a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	f012 0f01 	tst.w	r2, #1
 8005a02:	d00d      	beq.n	8005a20 <HAL_SPI_TransmitReceive+0x138>
 8005a04:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005a06:	b292      	uxth	r2, r2
 8005a08:	b152      	cbz	r2, 8005a20 <HAL_SPI_TransmitReceive+0x138>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a12:	3302      	adds	r3, #2
 8005a14:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005a16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005a1e:	463e      	mov	r6, r7
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a20:	f7fd fece 	bl	80037c0 <HAL_GetTick>
 8005a24:	eba0 0009 	sub.w	r0, r0, r9
 8005a28:	42a8      	cmp	r0, r5
 8005a2a:	d302      	bcc.n	8005a32 <HAL_SPI_TransmitReceive+0x14a>
 8005a2c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a30:	d179      	bne.n	8005b26 <HAL_SPI_TransmitReceive+0x23e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a32:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	b91b      	cbnz	r3, 8005a40 <HAL_SPI_TransmitReceive+0x158>
 8005a38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d053      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x200>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	f012 0f02 	tst.w	r2, #2
 8005a48:	d0d7      	beq.n	80059fa <HAL_SPI_TransmitReceive+0x112>
 8005a4a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005a4c:	b292      	uxth	r2, r2
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	d0d3      	beq.n	80059fa <HAL_SPI_TransmitReceive+0x112>
 8005a52:	2e00      	cmp	r6, #0
 8005a54:	d0d1      	beq.n	80059fa <HAL_SPI_TransmitReceive+0x112>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a5e:	3302      	adds	r3, #2
 8005a60:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005a62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005a6a:	4646      	mov	r6, r8
 8005a6c:	e7c5      	b.n	80059fa <HAL_SPI_TransmitReceive+0x112>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	f012 0f01 	tst.w	r2, #1
 8005a76:	d00d      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x1ac>
 8005a78:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005a7a:	b292      	uxth	r2, r2
 8005a7c:	b152      	cbz	r2, 8005a94 <HAL_SPI_TransmitReceive+0x1ac>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a86:	3301      	adds	r3, #1
 8005a88:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005a8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005a92:	463e      	mov	r6, r7
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a94:	f7fd fe94 	bl	80037c0 <HAL_GetTick>
 8005a98:	eba0 0009 	sub.w	r0, r0, r9
 8005a9c:	42a8      	cmp	r0, r5
 8005a9e:	d31f      	bcc.n	8005ae0 <HAL_SPI_TransmitReceive+0x1f8>
 8005aa0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005aa4:	d141      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x242>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aa6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	b913      	cbnz	r3, 8005ab2 <HAL_SPI_TransmitReceive+0x1ca>
 8005aac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	b1d3      	cbz	r3, 8005ae8 <HAL_SPI_TransmitReceive+0x200>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	f012 0f02 	tst.w	r2, #2
 8005aba:	d0d8      	beq.n	8005a6e <HAL_SPI_TransmitReceive+0x186>
 8005abc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005abe:	b292      	uxth	r2, r2
 8005ac0:	2a00      	cmp	r2, #0
 8005ac2:	d0d4      	beq.n	8005a6e <HAL_SPI_TransmitReceive+0x186>
 8005ac4:	2e01      	cmp	r6, #1
 8005ac6:	d1d2      	bne.n	8005a6e <HAL_SPI_TransmitReceive+0x186>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ac8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005ace:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005ad4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005adc:	4646      	mov	r6, r8
 8005ade:	e7c6      	b.n	8005a6e <HAL_SPI_TransmitReceive+0x186>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	d1e0      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0x1be>
        errorcode = HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e71e      	b.n	8005926 <HAL_SPI_TransmitReceive+0x3e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ae8:	464a      	mov	r2, r9
 8005aea:	4629      	mov	r1, r5
 8005aec:	4620      	mov	r0, r4
 8005aee:	f7ff fd1d 	bl	800552c <SPI_EndRxTxTransaction>
 8005af2:	4603      	mov	r3, r0
 8005af4:	b118      	cbz	r0, 8005afe <HAL_SPI_TransmitReceive+0x216>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005af6:	2320      	movs	r3, #32
 8005af8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
    goto error;
 8005afc:	e713      	b.n	8005926 <HAL_SPI_TransmitReceive+0x3e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005afe:	68a2      	ldr	r2, [r4, #8]
 8005b00:	2a00      	cmp	r2, #0
 8005b02:	f47f af10 	bne.w	8005926 <HAL_SPI_TransmitReceive+0x3e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b06:	9201      	str	r2, [sp, #4]
 8005b08:	6822      	ldr	r2, [r4, #0]
 8005b0a:	68d1      	ldr	r1, [r2, #12]
 8005b0c:	9101      	str	r1, [sp, #4]
 8005b0e:	6892      	ldr	r2, [r2, #8]
 8005b10:	9201      	str	r2, [sp, #4]
 8005b12:	9a01      	ldr	r2, [sp, #4]
 8005b14:	e707      	b.n	8005926 <HAL_SPI_TransmitReceive+0x3e>
    errorcode = HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
 8005b18:	e705      	b.n	8005926 <HAL_SPI_TransmitReceive+0x3e>
    errorcode = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e703      	b.n	8005926 <HAL_SPI_TransmitReceive+0x3e>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e701      	b.n	8005926 <HAL_SPI_TransmitReceive+0x3e>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e6ff      	b.n	8005926 <HAL_SPI_TransmitReceive+0x3e>
        errorcode = HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e6fd      	b.n	8005926 <HAL_SPI_TransmitReceive+0x3e>
        errorcode = HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e6fb      	b.n	8005926 <HAL_SPI_TransmitReceive+0x3e>
  __HAL_LOCK(hspi);
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e6ff      	b.n	8005932 <HAL_SPI_TransmitReceive+0x4a>
 8005b32:	bf00      	nop
 8005b34:	0800afc4 	.word	0x0800afc4

08005b38 <HAL_SPI_TransmitReceive_DMA>:
{
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	460e      	mov	r6, r1
 8005b3e:	4617      	mov	r7, r2
 8005b40:	461d      	mov	r5, r3
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8005b42:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005b44:	b1d3      	cbz	r3, 8005b7c <HAL_SPI_TransmitReceive_DMA+0x44>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8005b46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b48:	b1f3      	cbz	r3, 8005b88 <HAL_SPI_TransmitReceive_DMA+0x50>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005b4a:	68a3      	ldr	r3, [r4, #8]
 8005b4c:	bb13      	cbnz	r3, 8005b94 <HAL_SPI_TransmitReceive_DMA+0x5c>
  __HAL_LOCK(hspi);
 8005b4e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	f000 80a6 	beq.w	8005ca4 <HAL_SPI_TransmitReceive_DMA+0x16c>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8005b5e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005b62:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d022      	beq.n	8005bae <HAL_SPI_TransmitReceive_DMA+0x76>
 8005b68:	6862      	ldr	r2, [r4, #4]
 8005b6a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005b6e:	d017      	beq.n	8005ba0 <HAL_SPI_TransmitReceive_DMA+0x68>
    errorcode = HAL_BUSY;
 8005b70:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 8005b72:	2200      	movs	r2, #0
 8005b74:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8005b7c:	f240 7143 	movw	r1, #1859	; 0x743
 8005b80:	4849      	ldr	r0, [pc, #292]	; (8005ca8 <HAL_SPI_TransmitReceive_DMA+0x170>)
 8005b82:	f7fb ff71 	bl	8001a68 <assert_failed>
 8005b86:	e7de      	b.n	8005b46 <HAL_SPI_TransmitReceive_DMA+0xe>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8005b88:	f240 7144 	movw	r1, #1860	; 0x744
 8005b8c:	4846      	ldr	r0, [pc, #280]	; (8005ca8 <HAL_SPI_TransmitReceive_DMA+0x170>)
 8005b8e:	f7fb ff6b 	bl	8001a68 <assert_failed>
 8005b92:	e7da      	b.n	8005b4a <HAL_SPI_TransmitReceive_DMA+0x12>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005b94:	f240 7147 	movw	r1, #1863	; 0x747
 8005b98:	4843      	ldr	r0, [pc, #268]	; (8005ca8 <HAL_SPI_TransmitReceive_DMA+0x170>)
 8005b9a:	f7fb ff65 	bl	8001a68 <assert_failed>
 8005b9e:	e7d6      	b.n	8005b4e <HAL_SPI_TransmitReceive_DMA+0x16>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ba0:	68a2      	ldr	r2, [r4, #8]
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	d176      	bne.n	8005c94 <HAL_SPI_TransmitReceive_DMA+0x15c>
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d001      	beq.n	8005bae <HAL_SPI_TransmitReceive_DMA+0x76>
    errorcode = HAL_BUSY;
 8005baa:	2302      	movs	r3, #2
 8005bac:	e7e1      	b.n	8005b72 <HAL_SPI_TransmitReceive_DMA+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bae:	2e00      	cmp	r6, #0
 8005bb0:	d072      	beq.n	8005c98 <HAL_SPI_TransmitReceive_DMA+0x160>
 8005bb2:	2f00      	cmp	r7, #0
 8005bb4:	d072      	beq.n	8005c9c <HAL_SPI_TransmitReceive_DMA+0x164>
 8005bb6:	2d00      	cmp	r5, #0
 8005bb8:	d072      	beq.n	8005ca0 <HAL_SPI_TransmitReceive_DMA+0x168>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bba:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bc2:	bf1c      	itt	ne
 8005bc4:	2305      	movne	r3, #5
 8005bc6:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bce:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005bd0:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005bd2:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bd4:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005bd6:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005bd8:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005bda:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005bdc:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005bde:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d01b      	beq.n	8005c20 <HAL_SPI_TransmitReceive_DMA+0xe8>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005be8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005bea:	4a30      	ldr	r2, [pc, #192]	; (8005cac <HAL_SPI_TransmitReceive_DMA+0x174>)
 8005bec:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005bee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005bf0:	4a2f      	ldr	r2, [pc, #188]	; (8005cb0 <HAL_SPI_TransmitReceive_DMA+0x178>)
 8005bf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005bf4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005bf6:	4a2f      	ldr	r2, [pc, #188]	; (8005cb4 <HAL_SPI_TransmitReceive_DMA+0x17c>)
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8005bfa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	635a      	str	r2, [r3, #52]	; 0x34
                                 hspi->RxXferCount))
 8005c00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c02:	6821      	ldr	r1, [r4, #0]
 8005c04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c06:	310c      	adds	r1, #12
 8005c08:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005c0a:	f7fe fad3 	bl	80041b4 <HAL_DMA_Start_IT>
 8005c0e:	b170      	cbz	r0, 8005c2e <HAL_SPI_TransmitReceive_DMA+0xf6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c12:	f043 0310 	orr.w	r3, r3, #16
 8005c16:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8005c1e:	e7a8      	b.n	8005b72 <HAL_SPI_TransmitReceive_DMA+0x3a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005c20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005c22:	4a25      	ldr	r2, [pc, #148]	; (8005cb8 <HAL_SPI_TransmitReceive_DMA+0x180>)
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005c26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005c28:	4a24      	ldr	r2, [pc, #144]	; (8005cbc <HAL_SPI_TransmitReceive_DMA+0x184>)
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c2c:	e7e2      	b.n	8005bf4 <HAL_SPI_TransmitReceive_DMA+0xbc>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	6853      	ldr	r3, [r2, #4]
 8005c32:	f043 0301 	orr.w	r3, r3, #1
 8005c36:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005c38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005c3e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005c40:	6293      	str	r3, [r2, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005c42:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005c44:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005c46:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005c48:	6353      	str	r3, [r2, #52]	; 0x34
                                 hspi->TxXferCount))
 8005c4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c4c:	6822      	ldr	r2, [r4, #0]
 8005c4e:	320c      	adds	r2, #12
 8005c50:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c52:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005c54:	f7fe faae 	bl	80041b4 <HAL_DMA_Start_IT>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	b138      	cbz	r0, 8005c6c <HAL_SPI_TransmitReceive_DMA+0x134>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c5e:	f043 0310 	orr.w	r3, r3, #16
 8005c62:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8005c6a:	e782      	b.n	8005b72 <HAL_SPI_TransmitReceive_DMA+0x3a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	6811      	ldr	r1, [r2, #0]
 8005c70:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005c74:	d103      	bne.n	8005c7e <HAL_SPI_TransmitReceive_DMA+0x146>
    __HAL_SPI_ENABLE(hspi);
 8005c76:	6811      	ldr	r1, [r2, #0]
 8005c78:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005c7c:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c7e:	6821      	ldr	r1, [r4, #0]
 8005c80:	684a      	ldr	r2, [r1, #4]
 8005c82:	f042 0220 	orr.w	r2, r2, #32
 8005c86:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c88:	6821      	ldr	r1, [r4, #0]
 8005c8a:	684a      	ldr	r2, [r1, #4]
 8005c8c:	f042 0202 	orr.w	r2, r2, #2
 8005c90:	604a      	str	r2, [r1, #4]
 8005c92:	e76e      	b.n	8005b72 <HAL_SPI_TransmitReceive_DMA+0x3a>
    errorcode = HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
 8005c96:	e76c      	b.n	8005b72 <HAL_SPI_TransmitReceive_DMA+0x3a>
    errorcode = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e76a      	b.n	8005b72 <HAL_SPI_TransmitReceive_DMA+0x3a>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e768      	b.n	8005b72 <HAL_SPI_TransmitReceive_DMA+0x3a>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e766      	b.n	8005b72 <HAL_SPI_TransmitReceive_DMA+0x3a>
  __HAL_LOCK(hspi);
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e767      	b.n	8005b78 <HAL_SPI_TransmitReceive_DMA+0x40>
 8005ca8:	0800afc4 	.word	0x0800afc4
 8005cac:	08005cd3 	.word	0x08005cd3
 8005cb0:	08005d57 	.word	0x08005d57
 8005cb4:	08005cdf 	.word	0x08005cdf
 8005cb8:	08005cc7 	.word	0x08005cc7
 8005cbc:	08005d01 	.word	0x08005d01

08005cc0 <HAL_SPI_RxCpltCallback>:
}
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_SPI_TxRxCpltCallback>:
}
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_SPI_RxHalfCpltCallback>:
}
 8005cc4:	4770      	bx	lr

08005cc6 <SPI_DMAHalfReceiveCplt>:
{
 8005cc6:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005cc8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005cca:	f7ff fffb 	bl	8005cc4 <HAL_SPI_RxHalfCpltCallback>
}
 8005cce:	bd08      	pop	{r3, pc}

08005cd0 <HAL_SPI_TxRxHalfCpltCallback>:
}
 8005cd0:	4770      	bx	lr

08005cd2 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8005cd2:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005cd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005cd6:	f7ff fffb 	bl	8005cd0 <HAL_SPI_TxRxHalfCpltCallback>
}
 8005cda:	bd08      	pop	{r3, pc}

08005cdc <HAL_SPI_ErrorCallback>:
}
 8005cdc:	4770      	bx	lr

08005cde <SPI_DMAError>:
{
 8005cde:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ce0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ce2:	6802      	ldr	r2, [r0, #0]
 8005ce4:	6853      	ldr	r3, [r2, #4]
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cec:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005cee:	f043 0310 	orr.w	r3, r3, #16
 8005cf2:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8005cfa:	f7ff ffef 	bl	8005cdc <HAL_SPI_ErrorCallback>
}
 8005cfe:	bd08      	pop	{r3, pc}

08005d00 <SPI_DMAReceiveCplt>:
{
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d04:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8005d06:	f7fd fd5b 	bl	80037c0 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f013 0f20 	tst.w	r3, #32
 8005d12:	d118      	bne.n	8005d46 <SPI_DMAReceiveCplt+0x46>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	6853      	ldr	r3, [r2, #4]
 8005d18:	f023 0320 	bic.w	r3, r3, #32
 8005d1c:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	6853      	ldr	r3, [r2, #4]
 8005d22:	f023 0303 	bic.w	r3, r3, #3
 8005d26:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d28:	4602      	mov	r2, r0
 8005d2a:	2164      	movs	r1, #100	; 0x64
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff fc11 	bl	8005554 <SPI_EndRxTransaction>
 8005d32:	b108      	cbz	r0, 8005d38 <SPI_DMAReceiveCplt+0x38>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d34:	2320      	movs	r3, #32
 8005d36:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d44:	b91b      	cbnz	r3, 8005d4e <SPI_DMAReceiveCplt+0x4e>
  HAL_SPI_RxCpltCallback(hspi);
 8005d46:	4620      	mov	r0, r4
 8005d48:	f7ff ffba 	bl	8005cc0 <HAL_SPI_RxCpltCallback>
}
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f7ff ffc4 	bl	8005cdc <HAL_SPI_ErrorCallback>
      return;
 8005d54:	e7fa      	b.n	8005d4c <SPI_DMAReceiveCplt+0x4c>

08005d56 <SPI_DMATransmitReceiveCplt>:
{
 8005d56:	b538      	push	{r3, r4, r5, lr}
 8005d58:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d5a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8005d5c:	f7fd fd30 	bl	80037c0 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f013 0f20 	tst.w	r3, #32
 8005d68:	d11b      	bne.n	8005da2 <SPI_DMATransmitReceiveCplt+0x4c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	6853      	ldr	r3, [r2, #4]
 8005d6e:	f023 0320 	bic.w	r3, r3, #32
 8005d72:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d74:	4602      	mov	r2, r0
 8005d76:	2164      	movs	r1, #100	; 0x64
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f7ff fbd7 	bl	800552c <SPI_EndRxTxTransaction>
 8005d7e:	b118      	cbz	r0, 8005d88 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d82:	f043 0320 	orr.w	r3, r3, #32
 8005d86:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	6853      	ldr	r3, [r2, #4]
 8005d8c:	f023 0303 	bic.w	r3, r3, #3
 8005d90:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005d96:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005da0:	b91b      	cbnz	r3, 8005daa <SPI_DMATransmitReceiveCplt+0x54>
  HAL_SPI_TxRxCpltCallback(hspi);
 8005da2:	4620      	mov	r0, r4
 8005da4:	f7ff ff8d 	bl	8005cc2 <HAL_SPI_TxRxCpltCallback>
}
 8005da8:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8005daa:	4620      	mov	r0, r4
 8005dac:	f7ff ff96 	bl	8005cdc <HAL_SPI_ErrorCallback>
      return;
 8005db0:	e7fa      	b.n	8005da8 <SPI_DMATransmitReceiveCplt+0x52>

08005db2 <HAL_SPI_GetState>:
  return hspi->State;
 8005db2:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8005db6:	4770      	bx	lr

08005db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	460f      	mov	r7, r1
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc0:	6a03      	ldr	r3, [r0, #32]
 8005dc2:	f023 0301 	bic.w	r3, r3, #1
 8005dc6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc8:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dca:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dce:	6986      	ldr	r6, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dd0:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd4:	680b      	ldr	r3, [r1, #0]
 8005dd6:	431e      	orrs	r6, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dd8:	f025 0502 	bic.w	r5, r5, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ddc:	688b      	ldr	r3, [r1, #8]
 8005dde:	431d      	orrs	r5, r3

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de0:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <TIM_OC1_SetConfig+0x94>)
 8005de2:	4298      	cmp	r0, r3
 8005de4:	d007      	beq.n	8005df6 <TIM_OC1_SetConfig+0x3e>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de6:	f8c4 8004 	str.w	r8, [r4, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dea:	61a6      	str	r6, [r4, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6363      	str	r3, [r4, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df0:	6225      	str	r5, [r4, #32]
}
 8005df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005df6:	68cb      	ldr	r3, [r1, #12]
 8005df8:	f033 0308 	bics.w	r3, r3, #8
 8005dfc:	d004      	beq.n	8005e08 <TIM_OC1_SetConfig+0x50>
 8005dfe:	f241 7101 	movw	r1, #5889	; 0x1701
 8005e02:	4813      	ldr	r0, [pc, #76]	; (8005e50 <TIM_OC1_SetConfig+0x98>)
 8005e04:	f7fb fe30 	bl	8001a68 <assert_failed>
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e08:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	431d      	orrs	r5, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e10:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8005e1a:	d10b      	bne.n	8005e34 <TIM_OC1_SetConfig+0x7c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8005e22:	d10d      	bne.n	8005e40 <TIM_OC1_SetConfig+0x88>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e24:	f428 7840 	bic.w	r8, r8, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	ea43 0808 	orr.w	r8, r3, r8
 8005e32:	e7d8      	b.n	8005de6 <TIM_OC1_SetConfig+0x2e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005e34:	f241 710e 	movw	r1, #5902	; 0x170e
 8005e38:	4805      	ldr	r0, [pc, #20]	; (8005e50 <TIM_OC1_SetConfig+0x98>)
 8005e3a:	f7fb fe15 	bl	8001a68 <assert_failed>
 8005e3e:	e7ed      	b.n	8005e1c <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005e40:	f241 710f 	movw	r1, #5903	; 0x170f
 8005e44:	4802      	ldr	r0, [pc, #8]	; (8005e50 <TIM_OC1_SetConfig+0x98>)
 8005e46:	f7fb fe0f 	bl	8001a68 <assert_failed>
 8005e4a:	e7eb      	b.n	8005e24 <TIM_OC1_SetConfig+0x6c>
 8005e4c:	40012c00 	.word	0x40012c00
 8005e50:	0800affc 	.word	0x0800affc

08005e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e58:	4604      	mov	r4, r0
 8005e5a:	460f      	mov	r7, r1
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e5c:	6a03      	ldr	r3, [r0, #32]
 8005e5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e62:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e64:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e66:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e6a:	69c6      	ldr	r6, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e6c:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e70:	680b      	ldr	r3, [r1, #0]
 8005e72:	431e      	orrs	r6, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e74:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e78:	688b      	ldr	r3, [r1, #8]
 8005e7a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e7e:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <TIM_OC3_SetConfig+0x98>)
 8005e80:	4298      	cmp	r0, r3
 8005e82:	d007      	beq.n	8005e94 <TIM_OC3_SetConfig+0x40>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e84:	f8c4 8004 	str.w	r8, [r4, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e88:	61e6      	str	r6, [r4, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	63e3      	str	r3, [r4, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8e:	6225      	str	r5, [r4, #32]
}
 8005e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005e94:	68cb      	ldr	r3, [r1, #12]
 8005e96:	f033 0308 	bics.w	r3, r3, #8
 8005e9a:	d004      	beq.n	8005ea6 <TIM_OC3_SetConfig+0x52>
 8005e9c:	f241 7197 	movw	r1, #6039	; 0x1797
 8005ea0:	4813      	ldr	r0, [pc, #76]	; (8005ef0 <TIM_OC3_SetConfig+0x9c>)
 8005ea2:	f7fb fde1 	bl	8001a68 <assert_failed>
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ea6:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eb0:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8005eba:	d10b      	bne.n	8005ed4 <TIM_OC3_SetConfig+0x80>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8005ec2:	d10d      	bne.n	8005ee0 <TIM_OC3_SetConfig+0x8c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ec4:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ec8:	697b      	ldr	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
 8005ed2:	e7d7      	b.n	8005e84 <TIM_OC3_SetConfig+0x30>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005ed4:	f241 71a4 	movw	r1, #6052	; 0x17a4
 8005ed8:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <TIM_OC3_SetConfig+0x9c>)
 8005eda:	f7fb fdc5 	bl	8001a68 <assert_failed>
 8005ede:	e7ed      	b.n	8005ebc <TIM_OC3_SetConfig+0x68>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005ee0:	f241 71a5 	movw	r1, #6053	; 0x17a5
 8005ee4:	4802      	ldr	r0, [pc, #8]	; (8005ef0 <TIM_OC3_SetConfig+0x9c>)
 8005ee6:	f7fb fdbf 	bl	8001a68 <assert_failed>
 8005eea:	e7eb      	b.n	8005ec4 <TIM_OC3_SetConfig+0x70>
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	0800affc 	.word	0x0800affc

08005ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef8:	4604      	mov	r4, r0
 8005efa:	460f      	mov	r7, r1
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005efc:	6a03      	ldr	r3, [r0, #32]
 8005efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f02:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f04:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f06:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f0a:	69c6      	ldr	r6, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f0c:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f10:	680b      	ldr	r3, [r1, #0]
 8005f12:	ea46 2603 	orr.w	r6, r6, r3, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f16:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f1a:	688b      	ldr	r3, [r1, #8]
 8005f1c:	ea45 3503 	orr.w	r5, r5, r3, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <TIM_OC4_SetConfig+0x64>)
 8005f22:	4298      	cmp	r0, r3
 8005f24:	d007      	beq.n	8005f36 <TIM_OC4_SetConfig+0x42>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f26:	f8c4 8004 	str.w	r8, [r4, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f2a:	61e6      	str	r6, [r4, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f30:	6225      	str	r5, [r4, #32]
}
 8005f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005f36:	694b      	ldr	r3, [r1, #20]
 8005f38:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8005f3c:	d105      	bne.n	8005f4a <TIM_OC4_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f3e:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
 8005f48:	e7ed      	b.n	8005f26 <TIM_OC4_SetConfig+0x32>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005f4a:	f241 71e3 	movw	r1, #6115	; 0x17e3
 8005f4e:	4803      	ldr	r0, [pc, #12]	; (8005f5c <TIM_OC4_SetConfig+0x68>)
 8005f50:	f7fb fd8a 	bl	8001a68 <assert_failed>
 8005f54:	e7f3      	b.n	8005f3e <TIM_OC4_SetConfig+0x4a>
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	0800affc 	.word	0x0800affc

08005f60 <HAL_TIM_PWM_MspInit>:
}
 8005f60:	4770      	bx	lr

08005f62 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005f62:	4770      	bx	lr

08005f64 <TIM_DMADelayPulseCplt>:
{
 8005f64:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f66:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f70:	4283      	cmp	r3, r0
 8005f72:	d010      	beq.n	8005f96 <TIM_DMADelayPulseCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f76:	4283      	cmp	r3, r0
 8005f78:	d010      	beq.n	8005f9c <TIM_DMADelayPulseCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f7c:	4283      	cmp	r3, r0
 8005f7e:	d010      	beq.n	8005fa2 <TIM_DMADelayPulseCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f82:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f84:	bf04      	itt	eq
 8005f86:	2308      	moveq	r3, #8
 8005f88:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f7ff ffe9 	bl	8005f62 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f90:	2300      	movs	r3, #0
 8005f92:	7723      	strb	r3, [r4, #28]
}
 8005f94:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f96:	2301      	movs	r3, #1
 8005f98:	7723      	strb	r3, [r4, #28]
 8005f9a:	e7f6      	b.n	8005f8a <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	7723      	strb	r3, [r4, #28]
 8005fa0:	e7f3      	b.n	8005f8a <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	7723      	strb	r3, [r4, #28]
 8005fa6:	e7f0      	b.n	8005f8a <TIM_DMADelayPulseCplt+0x26>

08005fa8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 8005fa8:	4770      	bx	lr

08005faa <TIM_DMADelayPulseHalfCplt>:
{
 8005faa:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fac:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fb6:	4283      	cmp	r3, r0
 8005fb8:	d010      	beq.n	8005fdc <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fbc:	4283      	cmp	r3, r0
 8005fbe:	d010      	beq.n	8005fe2 <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005fc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	d010      	beq.n	8005fe8 <TIM_DMADelayPulseHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005fc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fc8:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fca:	bf04      	itt	eq
 8005fcc:	2308      	moveq	r3, #8
 8005fce:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff ffe9 	bl	8005fa8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	7723      	strb	r3, [r4, #28]
}
 8005fda:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	7723      	strb	r3, [r4, #28]
 8005fe0:	e7f6      	b.n	8005fd0 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	7723      	strb	r3, [r4, #28]
 8005fe6:	e7f3      	b.n	8005fd0 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe8:	2304      	movs	r3, #4
 8005fea:	7723      	strb	r3, [r4, #28]
 8005fec:	e7f0      	b.n	8005fd0 <TIM_DMADelayPulseHalfCplt+0x26>

08005fee <HAL_TIM_ErrorCallback>:
}
 8005fee:	4770      	bx	lr

08005ff0 <TIM_DMAError>:
{
 8005ff0:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8005ffa:	f7ff fff8 	bl	8005fee <HAL_TIM_ErrorCallback>
}
 8005ffe:	bd08      	pop	{r3, pc}

08006000 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006000:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006002:	4a20      	ldr	r2, [pc, #128]	; (8006084 <TIM_Base_SetConfig+0x84>)
 8006004:	4290      	cmp	r0, r2
 8006006:	d014      	beq.n	8006032 <TIM_Base_SetConfig+0x32>
 8006008:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800600c:	d02a      	beq.n	8006064 <TIM_Base_SetConfig+0x64>
 800600e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006012:	4290      	cmp	r0, r2
 8006014:	d02b      	beq.n	800606e <TIM_Base_SetConfig+0x6e>
 8006016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800601a:	4290      	cmp	r0, r2
 800601c:	d02c      	beq.n	8006078 <TIM_Base_SetConfig+0x78>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800601e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006022:	694a      	ldr	r2, [r1, #20]
 8006024:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006026:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006028:	688b      	ldr	r3, [r1, #8]
 800602a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800602c:	680b      	ldr	r3, [r1, #0]
 800602e:	6283      	str	r3, [r0, #40]	; 0x28
 8006030:	e015      	b.n	800605e <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006036:	684a      	ldr	r2, [r1, #4]
 8006038:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603e:	68ca      	ldr	r2, [r1, #12]
 8006040:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006046:	694a      	ldr	r2, [r1, #20]
 8006048:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800604a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800604c:	688b      	ldr	r3, [r1, #8]
 800604e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006050:	680b      	ldr	r3, [r1, #0]
 8006052:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <TIM_Base_SetConfig+0x84>)
 8006056:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8006058:	bf04      	itt	eq
 800605a:	690a      	ldreq	r2, [r1, #16]
 800605c:	631a      	streq	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800605e:	2301      	movs	r3, #1
 8006060:	6143      	str	r3, [r0, #20]
}
 8006062:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006068:	684a      	ldr	r2, [r1, #4]
 800606a:	4313      	orrs	r3, r2
 800606c:	e7e5      	b.n	800603a <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800606e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006072:	684a      	ldr	r2, [r1, #4]
 8006074:	4313      	orrs	r3, r2
 8006076:	e7e0      	b.n	800603a <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800607c:	684a      	ldr	r2, [r1, #4]
 800607e:	4313      	orrs	r3, r2
 8006080:	e7db      	b.n	800603a <TIM_Base_SetConfig+0x3a>
 8006082:	bf00      	nop
 8006084:	40012c00 	.word	0x40012c00

08006088 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006088:	2800      	cmp	r0, #0
 800608a:	d04f      	beq.n	800612c <HAL_TIM_Base_Init+0xa4>
{
 800608c:	b510      	push	{r4, lr}
 800608e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006090:	6803      	ldr	r3, [r0, #0]
 8006092:	4a27      	ldr	r2, [pc, #156]	; (8006130 <HAL_TIM_Base_Init+0xa8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00f      	beq.n	80060b8 <HAL_TIM_Base_Init+0x30>
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609c:	d00c      	beq.n	80060b8 <HAL_TIM_Base_Init+0x30>
 800609e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d008      	beq.n	80060b8 <HAL_TIM_Base_Init+0x30>
 80060a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <HAL_TIM_Base_Init+0x30>
 80060ae:	f44f 7189 	mov.w	r1, #274	; 0x112
 80060b2:	4820      	ldr	r0, [pc, #128]	; (8006134 <HAL_TIM_Base_Init+0xac>)
 80060b4:	f7fb fcd8 	bl	8001a68 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80060b8:	68a3      	ldr	r3, [r4, #8]
 80060ba:	f033 0210 	bics.w	r2, r3, #16
 80060be:	d00a      	beq.n	80060d6 <HAL_TIM_Base_Init+0x4e>
 80060c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80060c4:	2a20      	cmp	r2, #32
 80060c6:	d006      	beq.n	80060d6 <HAL_TIM_Base_Init+0x4e>
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d004      	beq.n	80060d6 <HAL_TIM_Base_Init+0x4e>
 80060cc:	f240 1113 	movw	r1, #275	; 0x113
 80060d0:	4818      	ldr	r0, [pc, #96]	; (8006134 <HAL_TIM_Base_Init+0xac>)
 80060d2:	f7fb fcc9 	bl	8001a68 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80060dc:	d002      	beq.n	80060e4 <HAL_TIM_Base_Init+0x5c>
 80060de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e2:	d117      	bne.n	8006114 <HAL_TIM_Base_Init+0x8c>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80060e4:	69a3      	ldr	r3, [r4, #24]
 80060e6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80060ea:	d004      	beq.n	80060f6 <HAL_TIM_Base_Init+0x6e>
 80060ec:	f240 1115 	movw	r1, #277	; 0x115
 80060f0:	4810      	ldr	r0, [pc, #64]	; (8006134 <HAL_TIM_Base_Init+0xac>)
 80060f2:	f7fb fcb9 	bl	8001a68 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80060f6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80060fa:	b18b      	cbz	r3, 8006120 <HAL_TIM_Base_Init+0x98>
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	2302      	movs	r3, #2
 80060fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006102:	1d21      	adds	r1, r4, #4
 8006104:	6820      	ldr	r0, [r4, #0]
 8006106:	f7ff ff7b 	bl	8006000 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800610a:	2301      	movs	r3, #1
 800610c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006110:	2000      	movs	r0, #0
}
 8006112:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006114:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006118:	4806      	ldr	r0, [pc, #24]	; (8006134 <HAL_TIM_Base_Init+0xac>)
 800611a:	f7fb fca5 	bl	8001a68 <assert_failed>
 800611e:	e7e1      	b.n	80060e4 <HAL_TIM_Base_Init+0x5c>
    htim->Lock = HAL_UNLOCKED;
 8006120:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006124:	4620      	mov	r0, r4
 8006126:	f7fc facf 	bl	80026c8 <HAL_TIM_Base_MspInit>
 800612a:	e7e7      	b.n	80060fc <HAL_TIM_Base_Init+0x74>
    return HAL_ERROR;
 800612c:	2001      	movs	r0, #1
}
 800612e:	4770      	bx	lr
 8006130:	40012c00 	.word	0x40012c00
 8006134:	0800affc 	.word	0x0800affc

08006138 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006138:	2800      	cmp	r0, #0
 800613a:	d04f      	beq.n	80061dc <HAL_TIM_PWM_Init+0xa4>
{
 800613c:	b510      	push	{r4, lr}
 800613e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006140:	6803      	ldr	r3, [r0, #0]
 8006142:	4a27      	ldr	r2, [pc, #156]	; (80061e0 <HAL_TIM_PWM_Init+0xa8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00f      	beq.n	8006168 <HAL_TIM_PWM_Init+0x30>
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d00c      	beq.n	8006168 <HAL_TIM_PWM_Init+0x30>
 800614e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006152:	4293      	cmp	r3, r2
 8006154:	d008      	beq.n	8006168 <HAL_TIM_PWM_Init+0x30>
 8006156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_TIM_PWM_Init+0x30>
 800615e:	f240 419b 	movw	r1, #1179	; 0x49b
 8006162:	4820      	ldr	r0, [pc, #128]	; (80061e4 <HAL_TIM_PWM_Init+0xac>)
 8006164:	f7fb fc80 	bl	8001a68 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006168:	68a3      	ldr	r3, [r4, #8]
 800616a:	f033 0210 	bics.w	r2, r3, #16
 800616e:	d00a      	beq.n	8006186 <HAL_TIM_PWM_Init+0x4e>
 8006170:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006174:	2a20      	cmp	r2, #32
 8006176:	d006      	beq.n	8006186 <HAL_TIM_PWM_Init+0x4e>
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	d004      	beq.n	8006186 <HAL_TIM_PWM_Init+0x4e>
 800617c:	f240 419c 	movw	r1, #1180	; 0x49c
 8006180:	4818      	ldr	r0, [pc, #96]	; (80061e4 <HAL_TIM_PWM_Init+0xac>)
 8006182:	f7fb fc71 	bl	8001a68 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800618c:	d002      	beq.n	8006194 <HAL_TIM_PWM_Init+0x5c>
 800618e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006192:	d117      	bne.n	80061c4 <HAL_TIM_PWM_Init+0x8c>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006194:	69a3      	ldr	r3, [r4, #24]
 8006196:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800619a:	d004      	beq.n	80061a6 <HAL_TIM_PWM_Init+0x6e>
 800619c:	f240 419e 	movw	r1, #1182	; 0x49e
 80061a0:	4810      	ldr	r0, [pc, #64]	; (80061e4 <HAL_TIM_PWM_Init+0xac>)
 80061a2:	f7fb fc61 	bl	8001a68 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80061a6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80061aa:	b18b      	cbz	r3, 80061d0 <HAL_TIM_PWM_Init+0x98>
  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	2302      	movs	r3, #2
 80061ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b2:	1d21      	adds	r1, r4, #4
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	f7ff ff23 	bl	8006000 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80061c0:	2000      	movs	r0, #0
}
 80061c2:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80061c4:	f240 419d 	movw	r1, #1181	; 0x49d
 80061c8:	4806      	ldr	r0, [pc, #24]	; (80061e4 <HAL_TIM_PWM_Init+0xac>)
 80061ca:	f7fb fc4d 	bl	8001a68 <assert_failed>
 80061ce:	e7e1      	b.n	8006194 <HAL_TIM_PWM_Init+0x5c>
    htim->Lock = HAL_UNLOCKED;
 80061d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80061d4:	4620      	mov	r0, r4
 80061d6:	f7ff fec3 	bl	8005f60 <HAL_TIM_PWM_MspInit>
 80061da:	e7e7      	b.n	80061ac <HAL_TIM_PWM_Init+0x74>
    return HAL_ERROR;
 80061dc:	2001      	movs	r0, #1
}
 80061de:	4770      	bx	lr
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	0800affc 	.word	0x0800affc

080061e8 <TIM_OC2_SetConfig>:
{
 80061e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ec:	4604      	mov	r4, r0
 80061ee:	460f      	mov	r7, r1
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f0:	6a03      	ldr	r3, [r0, #32]
 80061f2:	f023 0310 	bic.w	r3, r3, #16
 80061f6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80061f8:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80061fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80061fe:	6986      	ldr	r6, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006200:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006204:	680b      	ldr	r3, [r1, #0]
 8006206:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800620a:	f025 0520 	bic.w	r5, r5, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800620e:	688b      	ldr	r3, [r1, #8]
 8006210:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <TIM_OC2_SetConfig+0x9c>)
 8006216:	4298      	cmp	r0, r3
 8006218:	d007      	beq.n	800622a <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 800621a:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800621e:	61a6      	str	r6, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006224:	6225      	str	r5, [r4, #32]
}
 8006226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800622a:	68cb      	ldr	r3, [r1, #12]
 800622c:	f033 0308 	bics.w	r3, r3, #8
 8006230:	d004      	beq.n	800623c <TIM_OC2_SetConfig+0x54>
 8006232:	f241 714c 	movw	r1, #5964	; 0x174c
 8006236:	4814      	ldr	r0, [pc, #80]	; (8006288 <TIM_OC2_SetConfig+0xa0>)
 8006238:	f7fb fc16 	bl	8001a68 <assert_failed>
    tmpccer &= ~TIM_CCER_CC2NP;
 800623c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006246:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8006250:	d10b      	bne.n	800626a <TIM_OC2_SetConfig+0x82>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8006258:	d10d      	bne.n	8006276 <TIM_OC2_SetConfig+0x8e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800625a:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800625e:	697b      	ldr	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4313      	orrs	r3, r2
 8006264:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
 8006268:	e7d7      	b.n	800621a <TIM_OC2_SetConfig+0x32>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800626a:	f241 715a 	movw	r1, #5978	; 0x175a
 800626e:	4806      	ldr	r0, [pc, #24]	; (8006288 <TIM_OC2_SetConfig+0xa0>)
 8006270:	f7fb fbfa 	bl	8001a68 <assert_failed>
 8006274:	e7ed      	b.n	8006252 <TIM_OC2_SetConfig+0x6a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006276:	f241 715b 	movw	r1, #5979	; 0x175b
 800627a:	4803      	ldr	r0, [pc, #12]	; (8006288 <TIM_OC2_SetConfig+0xa0>)
 800627c:	f7fb fbf4 	bl	8001a68 <assert_failed>
 8006280:	e7eb      	b.n	800625a <TIM_OC2_SetConfig+0x72>
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00
 8006288:	0800affc 	.word	0x0800affc

0800628c <HAL_TIM_PWM_ConfigChannel>:
{
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	4604      	mov	r4, r0
 8006290:	460d      	mov	r5, r1
 8006292:	4616      	mov	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 8006294:	f032 0304 	bics.w	r3, r2, #4
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x16>
 800629a:	2b08      	cmp	r3, #8
 800629c:	d001      	beq.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x16>
 800629e:	2a3c      	cmp	r2, #60	; 0x3c
 80062a0:	d131      	bne.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x7a>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80062a2:	682b      	ldr	r3, [r5, #0]
 80062a4:	f023 0310 	bic.w	r3, r3, #16
 80062a8:	2b60      	cmp	r3, #96	; 0x60
 80062aa:	d004      	beq.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80062ac:	f640 51ec 	movw	r1, #3564	; 0xdec
 80062b0:	486d      	ldr	r0, [pc, #436]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 80062b2:	f7fb fbd9 	bl	8001a68 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80062b6:	68ab      	ldr	r3, [r5, #8]
 80062b8:	f033 0302 	bics.w	r3, r3, #2
 80062bc:	d004      	beq.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x3c>
 80062be:	f640 51ed 	movw	r1, #3565	; 0xded
 80062c2:	4869      	ldr	r0, [pc, #420]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 80062c4:	f7fb fbd0 	bl	8001a68 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80062c8:	692b      	ldr	r3, [r5, #16]
 80062ca:	f033 0304 	bics.w	r3, r3, #4
 80062ce:	d004      	beq.n	80062da <HAL_TIM_PWM_ConfigChannel+0x4e>
 80062d0:	f640 51ee 	movw	r1, #3566	; 0xdee
 80062d4:	4864      	ldr	r0, [pc, #400]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 80062d6:	f7fb fbc7 	bl	8001a68 <assert_failed>
  __HAL_LOCK(htim);
 80062da:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80062de:	2b01      	cmp	r3, #1
 80062e0:	f000 80bf 	beq.w	8006462 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80062e4:	2301      	movs	r3, #1
 80062e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80062ea:	2302      	movs	r3, #2
 80062ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 80062f0:	2e0c      	cmp	r6, #12
 80062f2:	d835      	bhi.n	8006360 <HAL_TIM_PWM_ConfigChannel+0xd4>
 80062f4:	e8df f006 	tbb	[pc, r6]
 80062f8:	3434340d 	.word	0x3434340d
 80062fc:	3434343b 	.word	0x3434343b
 8006300:	34343464 	.word	0x34343464
 8006304:	8c          	.byte	0x8c
 8006305:	00          	.byte	0x00
  assert_param(IS_TIM_CHANNELS(Channel));
 8006306:	f640 51eb 	movw	r1, #3563	; 0xdeb
 800630a:	4857      	ldr	r0, [pc, #348]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 800630c:	f7fb fbac 	bl	8001a68 <assert_failed>
 8006310:	e7c7      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x16>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	4a55      	ldr	r2, [pc, #340]	; (800646c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00f      	beq.n	800633a <HAL_TIM_PWM_ConfigChannel+0xae>
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631e:	d00c      	beq.n	800633a <HAL_TIM_PWM_ConfigChannel+0xae>
 8006320:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006324:	4293      	cmp	r3, r2
 8006326:	d008      	beq.n	800633a <HAL_TIM_PWM_ConfigChannel+0xae>
 8006328:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800632c:	4293      	cmp	r3, r2
 800632e:	d004      	beq.n	800633a <HAL_TIM_PWM_ConfigChannel+0xae>
 8006330:	f640 51fa 	movw	r1, #3578	; 0xdfa
 8006334:	484c      	ldr	r0, [pc, #304]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 8006336:	f7fb fb97 	bl	8001a68 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800633a:	4629      	mov	r1, r5
 800633c:	6820      	ldr	r0, [r4, #0]
 800633e:	f7ff fd3b 	bl	8005db8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	6993      	ldr	r3, [r2, #24]
 8006346:	f043 0308 	orr.w	r3, r3, #8
 800634a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800634c:	6822      	ldr	r2, [r4, #0]
 800634e:	6993      	ldr	r3, [r2, #24]
 8006350:	f023 0304 	bic.w	r3, r3, #4
 8006354:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	6993      	ldr	r3, [r2, #24]
 800635a:	6929      	ldr	r1, [r5, #16]
 800635c:	430b      	orrs	r3, r1
 800635e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8006360:	2301      	movs	r3, #1
 8006362:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006366:	2000      	movs	r0, #0
 8006368:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800636c:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	4a3e      	ldr	r2, [pc, #248]	; (800646c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00f      	beq.n	8006396 <HAL_TIM_PWM_ConfigChannel+0x10a>
 8006376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637a:	d00c      	beq.n	8006396 <HAL_TIM_PWM_ConfigChannel+0x10a>
 800637c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006380:	4293      	cmp	r3, r2
 8006382:	d008      	beq.n	8006396 <HAL_TIM_PWM_ConfigChannel+0x10a>
 8006384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <HAL_TIM_PWM_ConfigChannel+0x10a>
 800638c:	f640 610b 	movw	r1, #3595	; 0xe0b
 8006390:	4835      	ldr	r0, [pc, #212]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 8006392:	f7fb fb69 	bl	8001a68 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006396:	4629      	mov	r1, r5
 8006398:	6820      	ldr	r0, [r4, #0]
 800639a:	f7ff ff25 	bl	80061e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	6993      	ldr	r3, [r2, #24]
 80063a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a8:	6822      	ldr	r2, [r4, #0]
 80063aa:	6993      	ldr	r3, [r2, #24]
 80063ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063b0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b2:	6822      	ldr	r2, [r4, #0]
 80063b4:	6993      	ldr	r3, [r2, #24]
 80063b6:	6929      	ldr	r1, [r5, #16]
 80063b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80063bc:	6193      	str	r3, [r2, #24]
      break;
 80063be:	e7cf      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0xd4>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	4a2a      	ldr	r2, [pc, #168]	; (800646c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00f      	beq.n	80063e8 <HAL_TIM_PWM_ConfigChannel+0x15c>
 80063c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063cc:	d00c      	beq.n	80063e8 <HAL_TIM_PWM_ConfigChannel+0x15c>
 80063ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d008      	beq.n	80063e8 <HAL_TIM_PWM_ConfigChannel+0x15c>
 80063d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <HAL_TIM_PWM_ConfigChannel+0x15c>
 80063de:	f640 611c 	movw	r1, #3612	; 0xe1c
 80063e2:	4821      	ldr	r0, [pc, #132]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 80063e4:	f7fb fb40 	bl	8001a68 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063e8:	4629      	mov	r1, r5
 80063ea:	6820      	ldr	r0, [r4, #0]
 80063ec:	f7ff fd32 	bl	8005e54 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063f0:	6822      	ldr	r2, [r4, #0]
 80063f2:	69d3      	ldr	r3, [r2, #28]
 80063f4:	f043 0308 	orr.w	r3, r3, #8
 80063f8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063fa:	6822      	ldr	r2, [r4, #0]
 80063fc:	69d3      	ldr	r3, [r2, #28]
 80063fe:	f023 0304 	bic.w	r3, r3, #4
 8006402:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006404:	6822      	ldr	r2, [r4, #0]
 8006406:	69d3      	ldr	r3, [r2, #28]
 8006408:	6929      	ldr	r1, [r5, #16]
 800640a:	430b      	orrs	r3, r1
 800640c:	61d3      	str	r3, [r2, #28]
      break;
 800640e:	e7a7      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0xd4>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	4a16      	ldr	r2, [pc, #88]	; (800646c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00f      	beq.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8006418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641c:	d00c      	beq.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800641e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006422:	4293      	cmp	r3, r2
 8006424:	d008      	beq.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8006426:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800642e:	f640 612d 	movw	r1, #3629	; 0xe2d
 8006432:	480d      	ldr	r0, [pc, #52]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 8006434:	f7fb fb18 	bl	8001a68 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006438:	4629      	mov	r1, r5
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	f7ff fd5a 	bl	8005ef4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006440:	6822      	ldr	r2, [r4, #0]
 8006442:	69d3      	ldr	r3, [r2, #28]
 8006444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006448:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800644a:	6822      	ldr	r2, [r4, #0]
 800644c:	69d3      	ldr	r3, [r2, #28]
 800644e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006452:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006454:	6822      	ldr	r2, [r4, #0]
 8006456:	69d3      	ldr	r3, [r2, #28]
 8006458:	6929      	ldr	r1, [r5, #16]
 800645a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800645e:	61d3      	str	r3, [r2, #28]
      break;
 8006460:	e77e      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0xd4>
  __HAL_LOCK(htim);
 8006462:	2002      	movs	r0, #2
 8006464:	e782      	b.n	800636c <HAL_TIM_PWM_ConfigChannel+0xe0>
 8006466:	bf00      	nop
 8006468:	0800affc 	.word	0x0800affc
 800646c:	40012c00 	.word	0x40012c00

08006470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006470:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006472:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006474:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006478:	430a      	orrs	r2, r1
 800647a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800647e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006480:	6083      	str	r3, [r0, #8]
}
 8006482:	bc10      	pop	{r4}
 8006484:	4770      	bx	lr
	...

08006488 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006488:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800648c:	2b01      	cmp	r3, #1
 800648e:	f000 81e1 	beq.w	8006854 <HAL_TIM_ConfigClockSource+0x3cc>
{
 8006492:	b570      	push	{r4, r5, r6, lr}
 8006494:	460d      	mov	r5, r1
 8006496:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006498:	2301      	movs	r3, #1
 800649a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800649e:	2302      	movs	r3, #2
 80064a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80064a4:	680b      	ldr	r3, [r1, #0]
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064aa:	d010      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x46>
 80064ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b0:	d00d      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x46>
 80064b2:	f033 0310 	bics.w	r3, r3, #16
 80064b6:	d00a      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x46>
 80064b8:	2b20      	cmp	r3, #32
 80064ba:	d008      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x46>
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d006      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x46>
 80064c0:	2b60      	cmp	r3, #96	; 0x60
 80064c2:	d004      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x46>
 80064c4:	f241 118a 	movw	r1, #4490	; 0x118a
 80064c8:	48b4      	ldr	r0, [pc, #720]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 80064ca:	f7fb facd 	bl	8001a68 <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80064da:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	f000 8172 	beq.w	80067c8 <HAL_TIM_ConfigClockSource+0x340>
 80064e4:	d946      	bls.n	8006574 <HAL_TIM_ConfigClockSource+0xec>
 80064e6:	2b70      	cmp	r3, #112	; 0x70
 80064e8:	f000 80c1 	beq.w	800666e <HAL_TIM_ConfigClockSource+0x1e6>
 80064ec:	d86b      	bhi.n	80065c6 <HAL_TIM_ConfigClockSource+0x13e>
 80064ee:	2b50      	cmp	r3, #80	; 0x50
 80064f0:	f000 8113 	beq.w	800671a <HAL_TIM_ConfigClockSource+0x292>
 80064f4:	2b60      	cmp	r3, #96	; 0x60
 80064f6:	f040 80f1 	bne.w	80066dc <HAL_TIM_ConfigClockSource+0x254>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	4aa8      	ldr	r2, [pc, #672]	; (80067a0 <HAL_TIM_ConfigClockSource+0x318>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00f      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x9a>
 8006502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006506:	d00c      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x9a>
 8006508:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800650c:	4293      	cmp	r3, r2
 800650e:	d008      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x9a>
 8006510:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006514:	4293      	cmp	r3, r2
 8006516:	d004      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x9a>
 8006518:	f241 11d9 	movw	r1, #4569	; 0x11d9
 800651c:	489f      	ldr	r0, [pc, #636]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 800651e:	f7fb faa3 	bl	8001a68 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006522:	686b      	ldr	r3, [r5, #4]
 8006524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006528:	d005      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0xae>
 800652a:	f033 0202 	bics.w	r2, r3, #2
 800652e:	d002      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0xae>
 8006530:	2b0a      	cmp	r3, #10
 8006532:	f040 813d 	bne.w	80067b0 <HAL_TIM_ConfigClockSource+0x328>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006536:	68eb      	ldr	r3, [r5, #12]
 8006538:	2b0f      	cmp	r3, #15
 800653a:	f200 813f 	bhi.w	80067bc <HAL_TIM_ConfigClockSource+0x334>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	686e      	ldr	r6, [r5, #4]
 8006542:	68ed      	ldr	r5, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006544:	6a18      	ldr	r0, [r3, #32]
 8006546:	f020 0010 	bic.w	r0, r0, #16
 800654a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800654e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006550:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006554:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006558:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800655c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006560:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8006562:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006564:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8006566:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800656c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006570:	6093      	str	r3, [r2, #8]
 8006572:	e0b3      	b.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
  switch (sClockSourceConfig->ClockSource)
 8006574:	2b10      	cmp	r3, #16
 8006576:	d008      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x102>
 8006578:	d904      	bls.n	8006584 <HAL_TIM_ConfigClockSource+0xfc>
 800657a:	2b20      	cmp	r3, #32
 800657c:	d005      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x102>
 800657e:	2b30      	cmp	r3, #48	; 0x30
 8006580:	d003      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x102>
 8006582:	e0ab      	b.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 80a9 	bne.w	80066dc <HAL_TIM_ConfigClockSource+0x254>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	4a84      	ldr	r2, [pc, #528]	; (80067a0 <HAL_TIM_ConfigClockSource+0x318>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00f      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0x12a>
 8006592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006596:	d00c      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0x12a>
 8006598:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800659c:	4293      	cmp	r3, r2
 800659e:	d008      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0x12a>
 80065a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d004      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0x12a>
 80065a8:	f241 11fc 	movw	r1, #4604	; 0x11fc
 80065ac:	487b      	ldr	r0, [pc, #492]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 80065ae:	f7fb fa5b 	bl	8001a68 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065b2:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80065b4:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ba:	682b      	ldr	r3, [r5, #0]
 80065bc:	f043 0307 	orr.w	r3, r3, #7
 80065c0:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80065c2:	608b      	str	r3, [r1, #8]
 80065c4:	e08a      	b.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
  switch (sClockSourceConfig->ClockSource)
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ca:	d03b      	beq.n	8006644 <HAL_TIM_ConfigClockSource+0x1bc>
 80065cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d0:	f040 8084 	bne.w	80066dc <HAL_TIM_ConfigClockSource+0x254>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	4a72      	ldr	r2, [pc, #456]	; (80067a0 <HAL_TIM_ConfigClockSource+0x318>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00f      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0x174>
 80065dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e0:	d00c      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0x174>
 80065e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d008      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0x174>
 80065ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0x174>
 80065f2:	f241 11b5 	movw	r1, #4533	; 0x11b5
 80065f6:	4869      	ldr	r0, [pc, #420]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 80065f8:	f7fb fa36 	bl	8001a68 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80065fc:	68ab      	ldr	r3, [r5, #8]
 80065fe:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8006602:	d007      	beq.n	8006614 <HAL_TIM_ConfigClockSource+0x18c>
 8006604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006608:	d004      	beq.n	8006614 <HAL_TIM_ConfigClockSource+0x18c>
 800660a:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800660e:	4863      	ldr	r0, [pc, #396]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 8006610:	f7fb fa2a 	bl	8001a68 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006614:	686b      	ldr	r3, [r5, #4]
 8006616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800661a:	d004      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0x19e>
 800661c:	f033 0202 	bics.w	r2, r3, #2
 8006620:	d001      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0x19e>
 8006622:	2b0a      	cmp	r3, #10
 8006624:	d16d      	bne.n	8006702 <HAL_TIM_ConfigClockSource+0x27a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006626:	68eb      	ldr	r3, [r5, #12]
 8006628:	2b0f      	cmp	r3, #15
 800662a:	d870      	bhi.n	800670e <HAL_TIM_ConfigClockSource+0x286>
      TIM_ETR_SetConfig(htim->Instance,
 800662c:	68eb      	ldr	r3, [r5, #12]
 800662e:	686a      	ldr	r2, [r5, #4]
 8006630:	68a9      	ldr	r1, [r5, #8]
 8006632:	6820      	ldr	r0, [r4, #0]
 8006634:	f7ff ff1c 	bl	8006470 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	6893      	ldr	r3, [r2, #8]
 800663c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006640:	6093      	str	r3, [r2, #8]
      break;
 8006642:	e04b      	b.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	4a56      	ldr	r2, [pc, #344]	; (80067a0 <HAL_TIM_ConfigClockSource+0x318>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d047      	beq.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
 800664c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006650:	d044      	beq.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
 8006652:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006656:	4293      	cmp	r3, r2
 8006658:	d040      	beq.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
 800665a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800665e:	4293      	cmp	r3, r2
 8006660:	d03c      	beq.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
 8006662:	f241 1196 	movw	r1, #4502	; 0x1196
 8006666:	484d      	ldr	r0, [pc, #308]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 8006668:	f7fb f9fe 	bl	8001a68 <assert_failed>
 800666c:	e036      	b.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	4a4b      	ldr	r2, [pc, #300]	; (80067a0 <HAL_TIM_ConfigClockSource+0x318>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00f      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x20e>
 8006676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667a:	d00c      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x20e>
 800667c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006680:	4293      	cmp	r3, r2
 8006682:	d008      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x20e>
 8006684:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x20e>
 800668c:	f241 119d 	movw	r1, #4509	; 0x119d
 8006690:	4842      	ldr	r0, [pc, #264]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 8006692:	f7fb f9e9 	bl	8001a68 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006696:	68ab      	ldr	r3, [r5, #8]
 8006698:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800669c:	d007      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0x226>
 800669e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a2:	d004      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0x226>
 80066a4:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 80066a8:	483c      	ldr	r0, [pc, #240]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 80066aa:	f7fb f9dd 	bl	8001a68 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80066ae:	686b      	ldr	r3, [r5, #4]
 80066b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b4:	d004      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x238>
 80066b6:	f033 0202 	bics.w	r2, r3, #2
 80066ba:	d001      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x238>
 80066bc:	2b0a      	cmp	r3, #10
 80066be:	d114      	bne.n	80066ea <HAL_TIM_ConfigClockSource+0x262>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80066c0:	68eb      	ldr	r3, [r5, #12]
 80066c2:	2b0f      	cmp	r3, #15
 80066c4:	d817      	bhi.n	80066f6 <HAL_TIM_ConfigClockSource+0x26e>
      TIM_ETR_SetConfig(htim->Instance,
 80066c6:	68eb      	ldr	r3, [r5, #12]
 80066c8:	686a      	ldr	r2, [r5, #4]
 80066ca:	68a9      	ldr	r1, [r5, #8]
 80066cc:	6820      	ldr	r0, [r4, #0]
 80066ce:	f7ff fecf 	bl	8006470 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066d2:	6822      	ldr	r2, [r4, #0]
 80066d4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80066da:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80066dc:	2301      	movs	r3, #1
 80066de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80066e2:	2000      	movs	r0, #0
 80066e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80066e8:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80066ea:	f241 11a1 	movw	r1, #4513	; 0x11a1
 80066ee:	482b      	ldr	r0, [pc, #172]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 80066f0:	f7fb f9ba 	bl	8001a68 <assert_failed>
 80066f4:	e7e4      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x238>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80066f6:	f241 11a2 	movw	r1, #4514	; 0x11a2
 80066fa:	4828      	ldr	r0, [pc, #160]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 80066fc:	f7fb f9b4 	bl	8001a68 <assert_failed>
 8006700:	e7e1      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x23e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006702:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8006706:	4825      	ldr	r0, [pc, #148]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 8006708:	f7fb f9ae 	bl	8001a68 <assert_failed>
 800670c:	e78b      	b.n	8006626 <HAL_TIM_ConfigClockSource+0x19e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800670e:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8006712:	4822      	ldr	r0, [pc, #136]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 8006714:	f7fb f9a8 	bl	8001a68 <assert_failed>
 8006718:	e788      	b.n	800662c <HAL_TIM_ConfigClockSource+0x1a4>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	4a20      	ldr	r2, [pc, #128]	; (80067a0 <HAL_TIM_ConfigClockSource+0x318>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00f      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x2ba>
 8006722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006726:	d00c      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x2ba>
 8006728:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800672c:	4293      	cmp	r3, r2
 800672e:	d008      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x2ba>
 8006730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x2ba>
 8006738:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800673c:	4817      	ldr	r0, [pc, #92]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 800673e:	f7fb f993 	bl	8001a68 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006742:	686b      	ldr	r3, [r5, #4]
 8006744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006748:	d004      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0x2cc>
 800674a:	f033 0202 	bics.w	r2, r3, #2
 800674e:	d001      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0x2cc>
 8006750:	2b0a      	cmp	r3, #10
 8006752:	d11c      	bne.n	800678e <HAL_TIM_ConfigClockSource+0x306>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006754:	68eb      	ldr	r3, [r5, #12]
 8006756:	2b0f      	cmp	r3, #15
 8006758:	d824      	bhi.n	80067a4 <HAL_TIM_ConfigClockSource+0x31c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	6869      	ldr	r1, [r5, #4]
 800675e:	68ee      	ldr	r6, [r5, #12]
  tmpccer = TIMx->CCER;
 8006760:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006762:	6a1d      	ldr	r5, [r3, #32]
 8006764:	f025 0501 	bic.w	r5, r5, #1
 8006768:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800676a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800676c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006770:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006774:	f020 000a 	bic.w	r0, r0, #10
  tmpccer |= TIM_ICPolarity;
 8006778:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800677a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800677c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800677e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8006780:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006786:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800678a:	6093      	str	r3, [r2, #8]
 800678c:	e7a6      	b.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800678e:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8006792:	4802      	ldr	r0, [pc, #8]	; (800679c <HAL_TIM_ConfigClockSource+0x314>)
 8006794:	f7fb f968 	bl	8001a68 <assert_failed>
 8006798:	e7dc      	b.n	8006754 <HAL_TIM_ConfigClockSource+0x2cc>
 800679a:	bf00      	nop
 800679c:	0800affc 	.word	0x0800affc
 80067a0:	40012c00 	.word	0x40012c00
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80067a4:	f241 11cd 	movw	r1, #4557	; 0x11cd
 80067a8:	482b      	ldr	r0, [pc, #172]	; (8006858 <HAL_TIM_ConfigClockSource+0x3d0>)
 80067aa:	f7fb f95d 	bl	8001a68 <assert_failed>
 80067ae:	e7d4      	b.n	800675a <HAL_TIM_ConfigClockSource+0x2d2>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80067b0:	f241 11dc 	movw	r1, #4572	; 0x11dc
 80067b4:	4828      	ldr	r0, [pc, #160]	; (8006858 <HAL_TIM_ConfigClockSource+0x3d0>)
 80067b6:	f7fb f957 	bl	8001a68 <assert_failed>
 80067ba:	e6bc      	b.n	8006536 <HAL_TIM_ConfigClockSource+0xae>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80067bc:	f241 11dd 	movw	r1, #4573	; 0x11dd
 80067c0:	4825      	ldr	r0, [pc, #148]	; (8006858 <HAL_TIM_ConfigClockSource+0x3d0>)
 80067c2:	f7fb f951 	bl	8001a68 <assert_failed>
 80067c6:	e6ba      	b.n	800653e <HAL_TIM_ConfigClockSource+0xb6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	4a24      	ldr	r2, [pc, #144]	; (800685c <HAL_TIM_ConfigClockSource+0x3d4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00f      	beq.n	80067f0 <HAL_TIM_ConfigClockSource+0x368>
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d4:	d00c      	beq.n	80067f0 <HAL_TIM_ConfigClockSource+0x368>
 80067d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80067da:	4293      	cmp	r3, r2
 80067dc:	d008      	beq.n	80067f0 <HAL_TIM_ConfigClockSource+0x368>
 80067de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d004      	beq.n	80067f0 <HAL_TIM_ConfigClockSource+0x368>
 80067e6:	f241 11e9 	movw	r1, #4585	; 0x11e9
 80067ea:	481b      	ldr	r0, [pc, #108]	; (8006858 <HAL_TIM_ConfigClockSource+0x3d0>)
 80067ec:	f7fb f93c 	bl	8001a68 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80067f0:	686b      	ldr	r3, [r5, #4]
 80067f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f6:	d004      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x37a>
 80067f8:	f033 0202 	bics.w	r2, r3, #2
 80067fc:	d001      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x37a>
 80067fe:	2b0a      	cmp	r3, #10
 8006800:	d11c      	bne.n	800683c <HAL_TIM_ConfigClockSource+0x3b4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006802:	68eb      	ldr	r3, [r5, #12]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d81f      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x3c0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	6869      	ldr	r1, [r5, #4]
 800680c:	68ee      	ldr	r6, [r5, #12]
  tmpccer = TIMx->CCER;
 800680e:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006810:	6a1d      	ldr	r5, [r3, #32]
 8006812:	f025 0501 	bic.w	r5, r5, #1
 8006816:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006818:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800681a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800681e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006822:	f020 000a 	bic.w	r0, r0, #10
  tmpccer |= TIM_ICPolarity;
 8006826:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8006828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800682a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800682c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800682e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006834:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006838:	6093      	str	r3, [r2, #8]
 800683a:	e74f      	b.n	80066dc <HAL_TIM_ConfigClockSource+0x254>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800683c:	f241 11ec 	movw	r1, #4588	; 0x11ec
 8006840:	4805      	ldr	r0, [pc, #20]	; (8006858 <HAL_TIM_ConfigClockSource+0x3d0>)
 8006842:	f7fb f911 	bl	8001a68 <assert_failed>
 8006846:	e7dc      	b.n	8006802 <HAL_TIM_ConfigClockSource+0x37a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006848:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800684c:	4802      	ldr	r0, [pc, #8]	; (8006858 <HAL_TIM_ConfigClockSource+0x3d0>)
 800684e:	f7fb f90b 	bl	8001a68 <assert_failed>
 8006852:	e7d9      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x380>
  __HAL_LOCK(htim);
 8006854:	2002      	movs	r0, #2
}
 8006856:	4770      	bx	lr
 8006858:	0800affc 	.word	0x0800affc
 800685c:	40012c00 	.word	0x40012c00

08006860 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	4604      	mov	r4, r0
 8006864:	460d      	mov	r5, r1
 8006866:	4616      	mov	r6, r2
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006868:	4b16      	ldr	r3, [pc, #88]	; (80068c4 <TIM_CCxChannelCmd+0x64>)
 800686a:	4298      	cmp	r0, r3
 800686c:	d00f      	beq.n	800688e <TIM_CCxChannelCmd+0x2e>
 800686e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006872:	d00c      	beq.n	800688e <TIM_CCxChannelCmd+0x2e>
 8006874:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8006878:	4298      	cmp	r0, r3
 800687a:	d008      	beq.n	800688e <TIM_CCxChannelCmd+0x2e>
 800687c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006880:	4298      	cmp	r0, r3
 8006882:	d004      	beq.n	800688e <TIM_CCxChannelCmd+0x2e>
 8006884:	f641 11c9 	movw	r1, #6601	; 0x19c9
 8006888:	480f      	ldr	r0, [pc, #60]	; (80068c8 <TIM_CCxChannelCmd+0x68>)
 800688a:	f7fb f8ed 	bl	8001a68 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800688e:	f035 0304 	bics.w	r3, r5, #4
 8006892:	d008      	beq.n	80068a6 <TIM_CCxChannelCmd+0x46>
 8006894:	2b08      	cmp	r3, #8
 8006896:	d006      	beq.n	80068a6 <TIM_CCxChannelCmd+0x46>
 8006898:	2d3c      	cmp	r5, #60	; 0x3c
 800689a:	d004      	beq.n	80068a6 <TIM_CCxChannelCmd+0x46>
 800689c:	f641 11ca 	movw	r1, #6602	; 0x19ca
 80068a0:	4809      	ldr	r0, [pc, #36]	; (80068c8 <TIM_CCxChannelCmd+0x68>)
 80068a2:	f7fb f8e1 	bl	8001a68 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068a6:	f005 051f 	and.w	r5, r5, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068aa:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068ac:	2201      	movs	r2, #1
 80068ae:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 80068b0:	ea23 0302 	bic.w	r3, r3, r2
 80068b4:	6223      	str	r3, [r4, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068b6:	6a23      	ldr	r3, [r4, #32]
 80068b8:	fa06 f505 	lsl.w	r5, r6, r5
 80068bc:	431d      	orrs	r5, r3
 80068be:	6225      	str	r5, [r4, #32]
}
 80068c0:	bd70      	pop	{r4, r5, r6, pc}
 80068c2:	bf00      	nop
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	0800affc 	.word	0x0800affc

080068cc <HAL_TIM_PWM_Start_DMA>:
{
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	4604      	mov	r4, r0
 80068d0:	460d      	mov	r5, r1
 80068d2:	4616      	mov	r6, r2
 80068d4:	461f      	mov	r7, r3
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80068d6:	6803      	ldr	r3, [r0, #0]
 80068d8:	4a5d      	ldr	r2, [pc, #372]	; (8006a50 <HAL_TIM_PWM_Start_DMA+0x184>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d025      	beq.n	800692a <HAL_TIM_PWM_Start_DMA+0x5e>
 80068de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e2:	d022      	beq.n	800692a <HAL_TIM_PWM_Start_DMA+0x5e>
 80068e4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d01e      	beq.n	800692a <HAL_TIM_PWM_Start_DMA+0x5e>
 80068ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d01a      	beq.n	800692a <HAL_TIM_PWM_Start_DMA+0x5e>
 80068f4:	f240 51e7 	movw	r1, #1511	; 0x5e7
 80068f8:	4856      	ldr	r0, [pc, #344]	; (8006a54 <HAL_TIM_PWM_Start_DMA+0x188>)
 80068fa:	f7fb f8b5 	bl	8001a68 <assert_failed>
  if (htim->State == HAL_TIM_STATE_BUSY)
 80068fe:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	f000 8097 	beq.w	8006a38 <HAL_TIM_PWM_Start_DMA+0x16c>
  else if (htim->State == HAL_TIM_STATE_READY)
 800690a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	d010      	beq.n	8006936 <HAL_TIM_PWM_Start_DMA+0x6a>
  switch (Channel)
 8006914:	2d0c      	cmp	r5, #12
 8006916:	d82e      	bhi.n	8006976 <HAL_TIM_PWM_Start_DMA+0xaa>
 8006918:	e8df f005 	tbb	[pc, r5]
 800691c:	2d2d2d16 	.word	0x2d2d2d16
 8006920:	2d2d2d42 	.word	0x2d2d2d42
 8006924:	2d2d2d5a 	.word	0x2d2d2d5a
 8006928:	71          	.byte	0x71
 8006929:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800692a:	f035 0304 	bics.w	r3, r5, #4
 800692e:	d0e6      	beq.n	80068fe <HAL_TIM_PWM_Start_DMA+0x32>
 8006930:	2b08      	cmp	r3, #8
 8006932:	d1df      	bne.n	80068f4 <HAL_TIM_PWM_Start_DMA+0x28>
 8006934:	e7e3      	b.n	80068fe <HAL_TIM_PWM_Start_DMA+0x32>
    if ((pData == NULL) && (Length > 0U))
 8006936:	b11e      	cbz	r6, 8006940 <HAL_TIM_PWM_Start_DMA+0x74>
      htim->State = HAL_TIM_STATE_BUSY;
 8006938:	2302      	movs	r3, #2
 800693a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800693e:	e7e9      	b.n	8006914 <HAL_TIM_PWM_Start_DMA+0x48>
    if ((pData == NULL) && (Length > 0U))
 8006940:	2f00      	cmp	r7, #0
 8006942:	d0f9      	beq.n	8006938 <HAL_TIM_PWM_Start_DMA+0x6c>
      return HAL_ERROR;
 8006944:	2001      	movs	r0, #1
 8006946:	e02a      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0xd2>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800694a:	4a43      	ldr	r2, [pc, #268]	; (8006a58 <HAL_TIM_PWM_Start_DMA+0x18c>)
 800694c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800694e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006950:	4a42      	ldr	r2, [pc, #264]	; (8006a5c <HAL_TIM_PWM_Start_DMA+0x190>)
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006956:	4a42      	ldr	r2, [pc, #264]	; (8006a60 <HAL_TIM_PWM_Start_DMA+0x194>)
 8006958:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800695a:	6822      	ldr	r2, [r4, #0]
 800695c:	463b      	mov	r3, r7
 800695e:	3234      	adds	r2, #52	; 0x34
 8006960:	4631      	mov	r1, r6
 8006962:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006964:	f7fd fc26 	bl	80041b4 <HAL_DMA_Start_IT>
 8006968:	2800      	cmp	r0, #0
 800696a:	d167      	bne.n	8006a3c <HAL_TIM_PWM_Start_DMA+0x170>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	68d3      	ldr	r3, [r2, #12]
 8006970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006974:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006976:	2201      	movs	r2, #1
 8006978:	4629      	mov	r1, r5
 800697a:	6820      	ldr	r0, [r4, #0]
 800697c:	f7ff ff70 	bl	8006860 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	4b33      	ldr	r3, [pc, #204]	; (8006a50 <HAL_TIM_PWM_Start_DMA+0x184>)
 8006984:	429a      	cmp	r2, r3
 8006986:	d051      	beq.n	8006a2c <HAL_TIM_PWM_Start_DMA+0x160>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	6893      	ldr	r3, [r2, #8]
 800698c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006990:	2b06      	cmp	r3, #6
 8006992:	d05b      	beq.n	8006a4c <HAL_TIM_PWM_Start_DMA+0x180>
    __HAL_TIM_ENABLE(htim);
 8006994:	6813      	ldr	r3, [r2, #0]
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800699c:	2000      	movs	r0, #0
}
 800699e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069a2:	4a2d      	ldr	r2, [pc, #180]	; (8006a58 <HAL_TIM_PWM_Start_DMA+0x18c>)
 80069a4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80069a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069a8:	4a2c      	ldr	r2, [pc, #176]	; (8006a5c <HAL_TIM_PWM_Start_DMA+0x190>)
 80069aa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80069ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069ae:	4a2c      	ldr	r2, [pc, #176]	; (8006a60 <HAL_TIM_PWM_Start_DMA+0x194>)
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	463b      	mov	r3, r7
 80069b6:	3238      	adds	r2, #56	; 0x38
 80069b8:	4631      	mov	r1, r6
 80069ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80069bc:	f7fd fbfa 	bl	80041b4 <HAL_DMA_Start_IT>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d13d      	bne.n	8006a40 <HAL_TIM_PWM_Start_DMA+0x174>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80069c4:	6822      	ldr	r2, [r4, #0]
 80069c6:	68d3      	ldr	r3, [r2, #12]
 80069c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069cc:	60d3      	str	r3, [r2, #12]
      break;
 80069ce:	e7d2      	b.n	8006976 <HAL_TIM_PWM_Start_DMA+0xaa>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069d2:	4a21      	ldr	r2, [pc, #132]	; (8006a58 <HAL_TIM_PWM_Start_DMA+0x18c>)
 80069d4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80069d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069d8:	4a20      	ldr	r2, [pc, #128]	; (8006a5c <HAL_TIM_PWM_Start_DMA+0x190>)
 80069da:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80069dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069de:	4a20      	ldr	r2, [pc, #128]	; (8006a60 <HAL_TIM_PWM_Start_DMA+0x194>)
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	463b      	mov	r3, r7
 80069e6:	323c      	adds	r2, #60	; 0x3c
 80069e8:	4631      	mov	r1, r6
 80069ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80069ec:	f7fd fbe2 	bl	80041b4 <HAL_DMA_Start_IT>
 80069f0:	bb40      	cbnz	r0, 8006a44 <HAL_TIM_PWM_Start_DMA+0x178>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	68d3      	ldr	r3, [r2, #12]
 80069f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069fa:	60d3      	str	r3, [r2, #12]
      break;
 80069fc:	e7bb      	b.n	8006976 <HAL_TIM_PWM_Start_DMA+0xaa>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a00:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <HAL_TIM_PWM_Start_DMA+0x18c>)
 8006a02:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a06:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <HAL_TIM_PWM_Start_DMA+0x190>)
 8006a08:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006a0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a0c:	4a14      	ldr	r2, [pc, #80]	; (8006a60 <HAL_TIM_PWM_Start_DMA+0x194>)
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8006a10:	6822      	ldr	r2, [r4, #0]
 8006a12:	463b      	mov	r3, r7
 8006a14:	3240      	adds	r2, #64	; 0x40
 8006a16:	4631      	mov	r1, r6
 8006a18:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006a1a:	f7fd fbcb 	bl	80041b4 <HAL_DMA_Start_IT>
 8006a1e:	b998      	cbnz	r0, 8006a48 <HAL_TIM_PWM_Start_DMA+0x17c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006a20:	6822      	ldr	r2, [r4, #0]
 8006a22:	68d3      	ldr	r3, [r2, #12]
 8006a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a28:	60d3      	str	r3, [r2, #12]
      break;
 8006a2a:	e7a4      	b.n	8006976 <HAL_TIM_PWM_Start_DMA+0xaa>
    __HAL_TIM_MOE_ENABLE(htim);
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a34:	6453      	str	r3, [r2, #68]	; 0x44
 8006a36:	e7a7      	b.n	8006988 <HAL_TIM_PWM_Start_DMA+0xbc>
    return HAL_BUSY;
 8006a38:	2002      	movs	r0, #2
 8006a3a:	e7b0      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0xd2>
        return HAL_ERROR;
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	e7ae      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0xd2>
        return HAL_ERROR;
 8006a40:	2001      	movs	r0, #1
 8006a42:	e7ac      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0xd2>
        return HAL_ERROR;
 8006a44:	2001      	movs	r0, #1
 8006a46:	e7aa      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0xd2>
        return HAL_ERROR;
 8006a48:	2001      	movs	r0, #1
 8006a4a:	e7a8      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0xd2>
  return HAL_OK;
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e7a6      	b.n	800699e <HAL_TIM_PWM_Start_DMA+0xd2>
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	0800affc 	.word	0x0800affc
 8006a58:	08005f65 	.word	0x08005f65
 8006a5c:	08005fab 	.word	0x08005fab
 8006a60:	08005ff1 	.word	0x08005ff1

08006a64 <HAL_TIM_PWM_Stop_DMA>:
{
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4604      	mov	r4, r0
 8006a68:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006a6a:	6803      	ldr	r3, [r0, #0]
 8006a6c:	4a3a      	ldr	r2, [pc, #232]	; (8006b58 <HAL_TIM_PWM_Stop_DMA+0xf4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d01a      	beq.n	8006aa8 <HAL_TIM_PWM_Stop_DMA+0x44>
 8006a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a76:	d017      	beq.n	8006aa8 <HAL_TIM_PWM_Stop_DMA+0x44>
 8006a78:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d013      	beq.n	8006aa8 <HAL_TIM_PWM_Stop_DMA+0x44>
 8006a80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00f      	beq.n	8006aa8 <HAL_TIM_PWM_Stop_DMA+0x44>
 8006a88:	f240 6172 	movw	r1, #1650	; 0x672
 8006a8c:	4833      	ldr	r0, [pc, #204]	; (8006b5c <HAL_TIM_PWM_Stop_DMA+0xf8>)
 8006a8e:	f7fa ffeb 	bl	8001a68 <assert_failed>
  switch (Channel)
 8006a92:	2d0c      	cmp	r5, #12
 8006a94:	d820      	bhi.n	8006ad8 <HAL_TIM_PWM_Stop_DMA+0x74>
 8006a96:	e8df f005 	tbb	[pc, r5]
 8006a9a:	1f17      	.short	0x1f17
 8006a9c:	1f3c1f1f 	.word	0x1f3c1f1f
 8006aa0:	1f451f1f 	.word	0x1f451f1f
 8006aa4:	1f1f      	.short	0x1f1f
 8006aa6:	0e          	.byte	0x0e
 8006aa7:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006aa8:	b175      	cbz	r5, 8006ac8 <HAL_TIM_PWM_Stop_DMA+0x64>
 8006aaa:	2d04      	cmp	r5, #4
 8006aac:	d031      	beq.n	8006b12 <HAL_TIM_PWM_Stop_DMA+0xae>
 8006aae:	2d08      	cmp	r5, #8
 8006ab0:	d038      	beq.n	8006b24 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006ab2:	2d0c      	cmp	r5, #12
 8006ab4:	d1e8      	bne.n	8006a88 <HAL_TIM_PWM_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006ab6:	6822      	ldr	r2, [r4, #0]
 8006ab8:	68d3      	ldr	r3, [r2, #12]
 8006aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006abe:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006ac0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006ac2:	f7fd fbd1 	bl	8004268 <HAL_DMA_Abort_IT>
      break;
 8006ac6:	e007      	b.n	8006ad8 <HAL_TIM_PWM_Stop_DMA+0x74>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006ac8:	6822      	ldr	r2, [r4, #0]
 8006aca:	68d3      	ldr	r3, [r2, #12]
 8006acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ad0:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006ad2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ad4:	f7fd fbc8 	bl	8004268 <HAL_DMA_Abort_IT>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4629      	mov	r1, r5
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	f7ff febf 	bl	8006860 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	4b1c      	ldr	r3, [pc, #112]	; (8006b58 <HAL_TIM_PWM_Stop_DMA+0xf4>)
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d025      	beq.n	8006b36 <HAL_TIM_PWM_Stop_DMA+0xd2>
  __HAL_TIM_DISABLE(htim);
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	6a19      	ldr	r1, [r3, #32]
 8006aee:	f241 1211 	movw	r2, #4369	; 0x1111
 8006af2:	4211      	tst	r1, r2
 8006af4:	d108      	bne.n	8006b08 <HAL_TIM_PWM_Stop_DMA+0xa4>
 8006af6:	6a19      	ldr	r1, [r3, #32]
 8006af8:	f240 4244 	movw	r2, #1092	; 0x444
 8006afc:	4211      	tst	r1, r2
 8006afe:	d103      	bne.n	8006b08 <HAL_TIM_PWM_Stop_DMA+0xa4>
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	f022 0201 	bic.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006b0e:	2000      	movs	r0, #0
 8006b10:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	68d3      	ldr	r3, [r2, #12]
 8006b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b1a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006b1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006b1e:	f7fd fba3 	bl	8004268 <HAL_DMA_Abort_IT>
      break;
 8006b22:	e7d9      	b.n	8006ad8 <HAL_TIM_PWM_Stop_DMA+0x74>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006b24:	6822      	ldr	r2, [r4, #0]
 8006b26:	68d3      	ldr	r3, [r2, #12]
 8006b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b2c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006b2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006b30:	f7fd fb9a 	bl	8004268 <HAL_DMA_Abort_IT>
      break;
 8006b34:	e7d0      	b.n	8006ad8 <HAL_TIM_PWM_Stop_DMA+0x74>
    __HAL_TIM_MOE_DISABLE(htim);
 8006b36:	6a1a      	ldr	r2, [r3, #32]
 8006b38:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b3c:	421a      	tst	r2, r3
 8006b3e:	d1d4      	bne.n	8006aea <HAL_TIM_PWM_Stop_DMA+0x86>
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <HAL_TIM_PWM_Stop_DMA+0xf4>)
 8006b42:	6a1a      	ldr	r2, [r3, #32]
 8006b44:	f240 4344 	movw	r3, #1092	; 0x444
 8006b48:	421a      	tst	r2, r3
 8006b4a:	d1ce      	bne.n	8006aea <HAL_TIM_PWM_Stop_DMA+0x86>
 8006b4c:	4a02      	ldr	r2, [pc, #8]	; (8006b58 <HAL_TIM_PWM_Stop_DMA+0xf4>)
 8006b4e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006b50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b54:	6453      	str	r3, [r2, #68]	; 0x44
 8006b56:	e7c8      	b.n	8006aea <HAL_TIM_PWM_Stop_DMA+0x86>
 8006b58:	40012c00 	.word	0x40012c00
 8006b5c:	0800affc 	.word	0x0800affc

08006b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	4604      	mov	r4, r0
 8006b64:	460d      	mov	r5, r1
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8006b66:	6803      	ldr	r3, [r0, #0]
 8006b68:	4a25      	ldr	r2, [pc, #148]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00f      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8006b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b72:	d00c      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8006b74:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d008      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8006b7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d004      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8006b84:	f240 6164 	movw	r1, #1636	; 0x664
 8006b88:	481e      	ldr	r0, [pc, #120]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006b8a:	f7fa ff6d 	bl	8001a68 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006b8e:	682b      	ldr	r3, [r5, #0]
 8006b90:	f033 0310 	bics.w	r3, r3, #16
 8006b94:	d00a      	beq.n	8006bac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b96:	2b20      	cmp	r3, #32
 8006b98:	d008      	beq.n	8006bac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	d006      	beq.n	8006bac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b9e:	2b60      	cmp	r3, #96	; 0x60
 8006ba0:	d004      	beq.n	8006bac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ba2:	f240 6165 	movw	r1, #1637	; 0x665
 8006ba6:	4817      	ldr	r0, [pc, #92]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006ba8:	f7fa ff5e 	bl	8001a68 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006bac:	686b      	ldr	r3, [r5, #4]
 8006bae:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8006bb2:	d11d      	bne.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x90>

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d01f      	beq.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bc8:	6821      	ldr	r1, [r4, #0]
 8006bca:	684a      	ldr	r2, [r1, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bcc:	688b      	ldr	r3, [r1, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd2:	682e      	ldr	r6, [r5, #0]
 8006bd4:	4332      	orrs	r2, r6

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bda:	686d      	ldr	r5, [r5, #4]
 8006bdc:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bde:	604a      	str	r2, [r1, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006be0:	6822      	ldr	r2, [r4, #0]
 8006be2:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006be8:	2000      	movs	r0, #0
 8006bea:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006bf0:	f240 6166 	movw	r1, #1638	; 0x666
 8006bf4:	4803      	ldr	r0, [pc, #12]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006bf6:	f7fa ff37 	bl	8001a68 <assert_failed>
 8006bfa:	e7db      	b.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 8006bfc:	2002      	movs	r0, #2
 8006bfe:	e7f6      	b.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	0800b034 	.word	0x0800b034

08006c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	4604      	mov	r4, r0
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006c0c:	6842      	ldr	r2, [r0, #4]
 8006c0e:	4b40      	ldr	r3, [pc, #256]	; (8006d10 <UART_SetConfig+0x108>)
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d855      	bhi.n	8006cc0 <UART_SetConfig+0xb8>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006c14:	68e3      	ldr	r3, [r4, #12]
 8006c16:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8006c1a:	d004      	beq.n	8006c26 <UART_SetConfig+0x1e>
 8006c1c:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8006c20:	483c      	ldr	r0, [pc, #240]	; (8006d14 <UART_SetConfig+0x10c>)
 8006c22:	f7fa ff21 	bl	8001a68 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8006c2c:	d002      	beq.n	8006c34 <UART_SetConfig+0x2c>
 8006c2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c32:	d14b      	bne.n	8006ccc <UART_SetConfig+0xc4>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006c34:	6963      	ldr	r3, [r4, #20]
 8006c36:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8006c3a:	4213      	tst	r3, r2
 8006c3c:	d100      	bne.n	8006c40 <UART_SetConfig+0x38>
 8006c3e:	b923      	cbnz	r3, 8006c4a <UART_SetConfig+0x42>
 8006c40:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8006c44:	4833      	ldr	r0, [pc, #204]	; (8006d14 <UART_SetConfig+0x10c>)
 8006c46:	f7fa ff0f 	bl	8001a68 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	6913      	ldr	r3, [r2, #16]
 8006c4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c52:	68e1      	ldr	r1, [r4, #12]
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8006c58:	6821      	ldr	r1, [r4, #0]
 8006c5a:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c5c:	68a3      	ldr	r3, [r4, #8]
 8006c5e:	6920      	ldr	r0, [r4, #16]
 8006c60:	4303      	orrs	r3, r0
 8006c62:	6960      	ldr	r0, [r4, #20]
 8006c64:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8006c66:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8006c6a:	f022 020c 	bic.w	r2, r2, #12
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c72:	6822      	ldr	r2, [r4, #0]
 8006c74:	6953      	ldr	r3, [r2, #20]
 8006c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7a:	69a1      	ldr	r1, [r4, #24]
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006c80:	6822      	ldr	r2, [r4, #0]
 8006c82:	4b25      	ldr	r3, [pc, #148]	; (8006d18 <UART_SetConfig+0x110>)
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d027      	beq.n	8006cd8 <UART_SetConfig+0xd0>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c88:	f7fe faa0 	bl	80051cc <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c94:	6863      	ldr	r3, [r4, #4]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	fbb0 f0f3 	udiv	r0, r0, r3
 8006c9c:	6824      	ldr	r4, [r4, #0]
 8006c9e:	491f      	ldr	r1, [pc, #124]	; (8006d1c <UART_SetConfig+0x114>)
 8006ca0:	fba1 3200 	umull	r3, r2, r1, r0
 8006ca4:	0952      	lsrs	r2, r2, #5
 8006ca6:	2364      	movs	r3, #100	; 0x64
 8006ca8:	fb03 0312 	mls	r3, r3, r2, r0
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	3332      	adds	r3, #50	; 0x32
 8006cb0:	fba1 1303 	umull	r1, r3, r1, r3
 8006cb4:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8006cb8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006cbc:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8006cbe:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006cc0:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8006cc4:	4813      	ldr	r0, [pc, #76]	; (8006d14 <UART_SetConfig+0x10c>)
 8006cc6:	f7fa fecf 	bl	8001a68 <assert_failed>
 8006cca:	e7a3      	b.n	8006c14 <UART_SetConfig+0xc>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006ccc:	f640 31ff 	movw	r1, #3071	; 0xbff
 8006cd0:	4810      	ldr	r0, [pc, #64]	; (8006d14 <UART_SetConfig+0x10c>)
 8006cd2:	f7fa fec9 	bl	8001a68 <assert_failed>
 8006cd6:	e7ad      	b.n	8006c34 <UART_SetConfig+0x2c>
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cd8:	f7fe fa88 	bl	80051ec <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ce0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	fbb0 f0f3 	udiv	r0, r0, r3
 8006cec:	6824      	ldr	r4, [r4, #0]
 8006cee:	490b      	ldr	r1, [pc, #44]	; (8006d1c <UART_SetConfig+0x114>)
 8006cf0:	fba1 3200 	umull	r3, r2, r1, r0
 8006cf4:	0952      	lsrs	r2, r2, #5
 8006cf6:	2364      	movs	r3, #100	; 0x64
 8006cf8:	fb03 0312 	mls	r3, r3, r2, r0
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	3332      	adds	r3, #50	; 0x32
 8006d00:	fba1 1303 	umull	r1, r3, r1, r3
 8006d04:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8006d08:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	e7d6      	b.n	8006cbe <UART_SetConfig+0xb6>
 8006d10:	0044aa20 	.word	0x0044aa20
 8006d14:	0800b070 	.word	0x0800b070
 8006d18:	40013800 	.word	0x40013800
 8006d1c:	51eb851f 	.word	0x51eb851f

08006d20 <UART_WaitOnFlagUntilTimeout>:
{
 8006d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d24:	4607      	mov	r7, r0
 8006d26:	460e      	mov	r6, r1
 8006d28:	4615      	mov	r5, r2
 8006d2a:	4698      	mov	r8, r3
 8006d2c:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	6813      	ldr	r3, [r2, #0]
 8006d32:	ea36 0303 	bics.w	r3, r6, r3
 8006d36:	bf0c      	ite	eq
 8006d38:	2301      	moveq	r3, #1
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	42ab      	cmp	r3, r5
 8006d3e:	d11d      	bne.n	8006d7c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006d40:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006d44:	d0f4      	beq.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d46:	b12c      	cbz	r4, 8006d54 <UART_WaitOnFlagUntilTimeout+0x34>
 8006d48:	f7fc fd3a 	bl	80037c0 <HAL_GetTick>
 8006d4c:	eba0 0008 	sub.w	r0, r0, r8
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d9ec      	bls.n	8006d2e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	68d3      	ldr	r3, [r2, #12]
 8006d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d5c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	6953      	ldr	r3, [r2, #20]
 8006d62:	f023 0301 	bic.w	r3, r3, #1
 8006d66:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8006d68:	2320      	movs	r3, #32
 8006d6a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006d6e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8006d72:	2300      	movs	r3, #0
 8006d74:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 8006d78:	2003      	movs	r0, #3
 8006d7a:	e000      	b.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8006d7c:	2000      	movs	r0, #0
}
 8006d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006d84 <HAL_UART_Init>:
  if (huart == NULL)
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d06c      	beq.n	8006e62 <HAL_UART_Init+0xde>
{
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006d8c:	6983      	ldr	r3, [r0, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d04f      	beq.n	8006e32 <HAL_UART_Init+0xae>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006d92:	6802      	ldr	r2, [r0, #0]
 8006d94:	4934      	ldr	r1, [pc, #208]	; (8006e68 <HAL_UART_Init+0xe4>)
 8006d96:	428a      	cmp	r2, r1
 8006d98:	d03d      	beq.n	8006e16 <HAL_UART_Init+0x92>
 8006d9a:	f5a1 4174 	sub.w	r1, r1, #62464	; 0xf400
 8006d9e:	428a      	cmp	r2, r1
 8006da0:	d039      	beq.n	8006e16 <HAL_UART_Init+0x92>
 8006da2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006da6:	428a      	cmp	r2, r1
 8006da8:	d035      	beq.n	8006e16 <HAL_UART_Init+0x92>
 8006daa:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006dae:	482f      	ldr	r0, [pc, #188]	; (8006e6c <HAL_UART_Init+0xe8>)
 8006db0:	f7fa fe5a 	bl	8001a68 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006db4:	69a3      	ldr	r3, [r4, #24]
 8006db6:	bb73      	cbnz	r3, 8006e16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006db8:	68a3      	ldr	r3, [r4, #8]
 8006dba:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8006dbe:	d004      	beq.n	8006dca <HAL_UART_Init+0x46>
 8006dc0:	f240 114d 	movw	r1, #333	; 0x14d
 8006dc4:	4829      	ldr	r0, [pc, #164]	; (8006e6c <HAL_UART_Init+0xe8>)
 8006dc6:	f7fa fe4f 	bl	8001a68 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006dca:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d041      	beq.n	8006e56 <HAL_UART_Init+0xd2>
  huart->gState = HAL_UART_STATE_BUSY;
 8006dd2:	2324      	movs	r3, #36	; 0x24
 8006dd4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006dd8:	6822      	ldr	r2, [r4, #0]
 8006dda:	68d3      	ldr	r3, [r2, #12]
 8006ddc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006de0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006de2:	4620      	mov	r0, r4
 8006de4:	f7ff ff10 	bl	8006c08 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006de8:	6822      	ldr	r2, [r4, #0]
 8006dea:	6913      	ldr	r3, [r2, #16]
 8006dec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006df0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	6953      	ldr	r3, [r2, #20]
 8006df6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006dfa:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006dfc:	6822      	ldr	r2, [r4, #0]
 8006dfe:	68d3      	ldr	r3, [r2, #12]
 8006e00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e04:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e06:	2000      	movs	r0, #0
 8006e08:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006e0a:	2320      	movs	r3, #32
 8006e0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006e10:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006e14:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006e16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006e1a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006e1e:	d0cb      	beq.n	8006db8 <HAL_UART_Init+0x34>
 8006e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e24:	d0c8      	beq.n	8006db8 <HAL_UART_Init+0x34>
 8006e26:	f240 1147 	movw	r1, #327	; 0x147
 8006e2a:	4810      	ldr	r0, [pc, #64]	; (8006e6c <HAL_UART_Init+0xe8>)
 8006e2c:	f7fa fe1c 	bl	8001a68 <assert_failed>
 8006e30:	e7c2      	b.n	8006db8 <HAL_UART_Init+0x34>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006e32:	6803      	ldr	r3, [r0, #0]
 8006e34:	4a0c      	ldr	r2, [pc, #48]	; (8006e68 <HAL_UART_Init+0xe4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d0be      	beq.n	8006db8 <HAL_UART_Init+0x34>
 8006e3a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d0ba      	beq.n	8006db8 <HAL_UART_Init+0x34>
 8006e42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d0b6      	beq.n	8006db8 <HAL_UART_Init+0x34>
 8006e4a:	f240 114b 	movw	r1, #331	; 0x14b
 8006e4e:	4807      	ldr	r0, [pc, #28]	; (8006e6c <HAL_UART_Init+0xe8>)
 8006e50:	f7fa fe0a 	bl	8001a68 <assert_failed>
 8006e54:	e7b0      	b.n	8006db8 <HAL_UART_Init+0x34>
    huart->Lock = HAL_UNLOCKED;
 8006e56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7fb fd04 	bl	8002868 <HAL_UART_MspInit>
 8006e60:	e7b7      	b.n	8006dd2 <HAL_UART_Init+0x4e>
    return HAL_ERROR;
 8006e62:	2001      	movs	r0, #1
}
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40013800 	.word	0x40013800
 8006e6c:	0800b070 	.word	0x0800b070

08006e70 <HAL_UART_Transmit>:
{
 8006e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e74:	b083      	sub	sp, #12
 8006e76:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006e78:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d159      	bne.n	8006f36 <HAL_UART_Transmit+0xc6>
 8006e82:	4604      	mov	r4, r0
 8006e84:	460d      	mov	r5, r1
 8006e86:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006e88:	2900      	cmp	r1, #0
 8006e8a:	d059      	beq.n	8006f40 <HAL_UART_Transmit+0xd0>
 8006e8c:	2a00      	cmp	r2, #0
 8006e8e:	d059      	beq.n	8006f44 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8006e90:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d057      	beq.n	8006f48 <HAL_UART_Transmit+0xd8>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ea2:	2321      	movs	r3, #33	; 0x21
 8006ea4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8006ea8:	f7fc fc8a 	bl	80037c0 <HAL_GetTick>
 8006eac:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8006eae:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8006eb2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eb6:	f04f 0900 	mov.w	r9, #0
 8006eba:	f04f 0880 	mov.w	r8, #128	; 0x80
    while (huart->TxXferCount > 0U)
 8006ebe:	e010      	b.n	8006ee2 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ec0:	9600      	str	r6, [sp, #0]
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	464a      	mov	r2, r9
 8006ec6:	4641      	mov	r1, r8
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f7ff ff29 	bl	8006d20 <UART_WaitOnFlagUntilTimeout>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d13c      	bne.n	8006f4c <HAL_UART_Transmit+0xdc>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	882b      	ldrh	r3, [r5, #0]
 8006ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eda:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	b9c3      	cbnz	r3, 8006f12 <HAL_UART_Transmit+0xa2>
          pData += 2U;
 8006ee0:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8006ee2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	b1b3      	cbz	r3, 8006f16 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8006ee8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ef0:	68a3      	ldr	r3, [r4, #8]
 8006ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef6:	d0e3      	beq.n	8006ec0 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ef8:	9600      	str	r6, [sp, #0]
 8006efa:	463b      	mov	r3, r7
 8006efc:	464a      	mov	r2, r9
 8006efe:	4641      	mov	r1, r8
 8006f00:	4620      	mov	r0, r4
 8006f02:	f7ff ff0d 	bl	8006d20 <UART_WaitOnFlagUntilTimeout>
 8006f06:	bb18      	cbnz	r0, 8006f50 <HAL_UART_Transmit+0xe0>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	782a      	ldrb	r2, [r5, #0]
 8006f0c:	605a      	str	r2, [r3, #4]
 8006f0e:	3501      	adds	r5, #1
 8006f10:	e7e7      	b.n	8006ee2 <HAL_UART_Transmit+0x72>
          pData += 1U;
 8006f12:	3501      	adds	r5, #1
 8006f14:	e7e5      	b.n	8006ee2 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f16:	9600      	str	r6, [sp, #0]
 8006f18:	463b      	mov	r3, r7
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2140      	movs	r1, #64	; 0x40
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f7ff fefe 	bl	8006d20 <UART_WaitOnFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	b9a8      	cbnz	r0, 8006f54 <HAL_UART_Transmit+0xe4>
    huart->gState = HAL_UART_STATE_READY;
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8006f34:	e000      	b.n	8006f38 <HAL_UART_Transmit+0xc8>
    return HAL_BUSY;
 8006f36:	2302      	movs	r3, #2
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	b003      	add	sp, #12
 8006f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e7f9      	b.n	8006f38 <HAL_UART_Transmit+0xc8>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e7f7      	b.n	8006f38 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e7f5      	b.n	8006f38 <HAL_UART_Transmit+0xc8>
          return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e7f3      	b.n	8006f38 <HAL_UART_Transmit+0xc8>
          return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e7f1      	b.n	8006f38 <HAL_UART_Transmit+0xc8>
      return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e7ef      	b.n	8006f38 <HAL_UART_Transmit+0xc8>

08006f58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f58:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006f5a:	4903      	ldr	r1, [pc, #12]	; (8006f68 <MX_FATFS_Init+0x10>)
 8006f5c:	4803      	ldr	r0, [pc, #12]	; (8006f6c <MX_FATFS_Init+0x14>)
 8006f5e:	f001 fcdb 	bl	8008918 <FATFS_LinkDriver>
 8006f62:	4b03      	ldr	r3, [pc, #12]	; (8006f70 <MX_FATFS_Init+0x18>)
 8006f64:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006f66:	bd08      	pop	{r3, pc}
 8006f68:	20000c70 	.word	0x20000c70
 8006f6c:	20000034 	.word	0x20000034
 8006f70:	20000c74 	.word	0x20000c74

08006f74 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8006f74:	2000      	movs	r0, #0
 8006f76:	4770      	bx	lr

08006f78 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006f78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
	 return SD_disk_initialize (pdrv);
 8006f7a:	f7fb fe0b 	bl	8002b94 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8006f7e:	bd08      	pop	{r3, pc}

08006f80 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006f80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006f82:	f7fb fed1 	bl	8002d28 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8006f86:	bd08      	pop	{r3, pc}

08006f88 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006f88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006f8a:	f7fb fed7 	bl	8002d3c <SD_disk_read>
  /* USER CODE END READ */
}
 8006f8e:	bd08      	pop	{r3, pc}

08006f90 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006f90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006f92:	f7fb ff1f 	bl	8002dd4 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8006f96:	bd08      	pop	{r3, pc}

08006f98 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006f98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006f9a:	f7fb ff7d 	bl	8002e98 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8006f9e:	bd08      	pop	{r3, pc}

08006fa0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006fa0:	b508      	push	{r3, lr}
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006fa2:	4b04      	ldr	r3, [pc, #16]	; (8006fb4 <disk_status+0x14>)
 8006fa4:	181a      	adds	r2, r3, r0
 8006fa6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	7a10      	ldrb	r0, [r2, #8]
 8006fb0:	4798      	blx	r3
  return stat;
}
 8006fb2:	bd08      	pop	{r3, pc}
 8006fb4:	200009d4 	.word	0x200009d4

08006fb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006fb8:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8006fba:	4b08      	ldr	r3, [pc, #32]	; (8006fdc <disk_initialize+0x24>)
 8006fbc:	5c1b      	ldrb	r3, [r3, r0]
 8006fbe:	b953      	cbnz	r3, 8006fd6 <disk_initialize+0x1e>
  { 
    disk.is_initialized[pdrv] = 1;
 8006fc0:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <disk_initialize+0x24>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006fc6:	181a      	adds	r2, r3, r0
 8006fc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006fcc:	6843      	ldr	r3, [r0, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	7a10      	ldrb	r0, [r2, #8]
 8006fd2:	4798      	blx	r3
  }
  return stat;
}
 8006fd4:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	e7fc      	b.n	8006fd4 <disk_initialize+0x1c>
 8006fda:	bf00      	nop
 8006fdc:	200009d4 	.word	0x200009d4

08006fe0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006fe0:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006fe2:	4c04      	ldr	r4, [pc, #16]	; (8006ff4 <disk_read+0x14>)
 8006fe4:	1825      	adds	r5, r4, r0
 8006fe6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8006fea:	6860      	ldr	r0, [r4, #4]
 8006fec:	6884      	ldr	r4, [r0, #8]
 8006fee:	7a28      	ldrb	r0, [r5, #8]
 8006ff0:	47a0      	blx	r4
  return res;
}
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	200009d4 	.word	0x200009d4

08006ff8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ff8:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006ffa:	4c04      	ldr	r4, [pc, #16]	; (800700c <disk_write+0x14>)
 8006ffc:	1825      	adds	r5, r4, r0
 8006ffe:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8007002:	6860      	ldr	r0, [r4, #4]
 8007004:	68c4      	ldr	r4, [r0, #12]
 8007006:	7a28      	ldrb	r0, [r5, #8]
 8007008:	47a0      	blx	r4
  return res;
}
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	200009d4 	.word	0x200009d4

08007010 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007010:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007012:	4b04      	ldr	r3, [pc, #16]	; (8007024 <disk_ioctl+0x14>)
 8007014:	181c      	adds	r4, r3, r0
 8007016:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	7a20      	ldrb	r0, [r4, #8]
 8007020:	4798      	blx	r3
  return res;
}
 8007022:	bd10      	pop	{r4, pc}
 8007024:	200009d4 	.word	0x200009d4

08007028 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007028:	b13a      	cbz	r2, 800703a <mem_cpy+0x12>
 800702a:	3801      	subs	r0, #1
 800702c:	188a      	adds	r2, r1, r2
		*d++ = *s++;
 800702e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007032:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
 8007036:	4291      	cmp	r1, r2
 8007038:	d1f9      	bne.n	800702e <mem_cpy+0x6>
}
 800703a:	4770      	bx	lr

0800703c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 800703c:	b122      	cbz	r2, 8007048 <mem_set+0xc>
 800703e:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
 8007040:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
 8007044:	4282      	cmp	r2, r0
 8007046:	d1fb      	bne.n	8007040 <mem_set+0x4>
}
 8007048:	4770      	bx	lr
	...

0800704c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800704c:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800704e:	4b22      	ldr	r3, [pc, #136]	; (80070d8 <chk_lock+0x8c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	b1eb      	cbz	r3, 8007090 <chk_lock+0x44>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007054:	6802      	ldr	r2, [r0, #0]
 8007056:	4293      	cmp	r3, r2
 8007058:	d00c      	beq.n	8007074 <chk_lock+0x28>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800705a:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 800705c:	4b1e      	ldr	r3, [pc, #120]	; (80070d8 <chk_lock+0x8c>)
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	b323      	cbz	r3, 80070ac <chk_lock+0x60>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007062:	6804      	ldr	r4, [r0, #0]
 8007064:	42a3      	cmp	r3, r4
 8007066:	d015      	beq.n	8007094 <chk_lock+0x48>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007068:	bb12      	cbnz	r2, 80070b0 <chk_lock+0x64>
 800706a:	2902      	cmp	r1, #2
 800706c:	bf0c      	ite	eq
 800706e:	2000      	moveq	r0, #0
 8007070:	2012      	movne	r0, #18
 8007072:	e02f      	b.n	80070d4 <chk_lock+0x88>
				Files[i].clu == dp->sclust &&
 8007074:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <chk_lock+0x8c>)
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	6883      	ldr	r3, [r0, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	d001      	beq.n	8007082 <chk_lock+0x36>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800707e:	2200      	movs	r2, #0
 8007080:	e7ec      	b.n	800705c <chk_lock+0x10>
				Files[i].idx == dp->index) break;
 8007082:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <chk_lock+0x8c>)
				Files[i].clu == dp->sclust &&
 8007084:	891a      	ldrh	r2, [r3, #8]
 8007086:	88c3      	ldrh	r3, [r0, #6]
 8007088:	429a      	cmp	r2, r3
 800708a:	d015      	beq.n	80070b8 <chk_lock+0x6c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800708c:	2200      	movs	r2, #0
 800708e:	e7e5      	b.n	800705c <chk_lock+0x10>
			be = 1;
 8007090:	2201      	movs	r2, #1
 8007092:	e7e3      	b.n	800705c <chk_lock+0x10>
				Files[i].clu == dp->sclust &&
 8007094:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <chk_lock+0x8c>)
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007096:	691c      	ldr	r4, [r3, #16]
 8007098:	6883      	ldr	r3, [r0, #8]
 800709a:	429c      	cmp	r4, r3
 800709c:	d1e4      	bne.n	8007068 <chk_lock+0x1c>
				Files[i].idx == dp->index) break;
 800709e:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <chk_lock+0x8c>)
				Files[i].clu == dp->sclust &&
 80070a0:	8a9c      	ldrh	r4, [r3, #20]
 80070a2:	88c3      	ldrh	r3, [r0, #6]
 80070a4:	429c      	cmp	r4, r3
 80070a6:	d1df      	bne.n	8007068 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80070a8:	2201      	movs	r2, #1
 80070aa:	e006      	b.n	80070ba <chk_lock+0x6e>
			be = 1;
 80070ac:	2201      	movs	r2, #1
 80070ae:	e7db      	b.n	8007068 <chk_lock+0x1c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80070b0:	2000      	movs	r0, #0
 80070b2:	e00f      	b.n	80070d4 <chk_lock+0x88>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80070b4:	2010      	movs	r0, #16
 80070b6:	e00d      	b.n	80070d4 <chk_lock+0x88>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80070b8:	2200      	movs	r2, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80070ba:	2900      	cmp	r1, #0
 80070bc:	d1fa      	bne.n	80070b4 <chk_lock+0x68>
 80070be:	0053      	lsls	r3, r2, #1
 80070c0:	441a      	add	r2, r3
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <chk_lock+0x8c>)
 80070c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80070c8:	895b      	ldrh	r3, [r3, #10]
 80070ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ce:	bf0c      	ite	eq
 80070d0:	2010      	moveq	r0, #16
 80070d2:	2000      	movne	r0, #0
}
 80070d4:	bc10      	pop	{r4}
 80070d6:	4770      	bx	lr
 80070d8:	200009b8 	.word	0x200009b8

080070dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070dc:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80070de:	6802      	ldr	r2, [r0, #0]
 80070e0:	4b2c      	ldr	r3, [pc, #176]	; (8007194 <inc_lock+0xb8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d00a      	beq.n	80070fe <inc_lock+0x22>
 80070e8:	4c2a      	ldr	r4, [pc, #168]	; (8007194 <inc_lock+0xb8>)
 80070ea:	68e4      	ldr	r4, [r4, #12]
 80070ec:	4294      	cmp	r4, r2
 80070ee:	d024      	beq.n	800713a <inc_lock+0x5e>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d030      	beq.n	8007156 <inc_lock+0x7a>
 80070f4:	4b27      	ldr	r3, [pc, #156]	; (8007194 <inc_lock+0xb8>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	b35b      	cbz	r3, 8007152 <inc_lock+0x76>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80070fa:	2000      	movs	r0, #0
 80070fc:	e01b      	b.n	8007136 <inc_lock+0x5a>
			Files[i].clu == dp->sclust &&
 80070fe:	4c25      	ldr	r4, [pc, #148]	; (8007194 <inc_lock+0xb8>)
		if (Files[i].fs == dp->fs &&
 8007100:	6865      	ldr	r5, [r4, #4]
 8007102:	6884      	ldr	r4, [r0, #8]
 8007104:	42a5      	cmp	r5, r4
 8007106:	d1ef      	bne.n	80070e8 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
 8007108:	4c22      	ldr	r4, [pc, #136]	; (8007194 <inc_lock+0xb8>)
			Files[i].clu == dp->sclust &&
 800710a:	8925      	ldrh	r5, [r4, #8]
 800710c:	88c4      	ldrh	r4, [r0, #6]
 800710e:	42a5      	cmp	r5, r4
 8007110:	d1ea      	bne.n	80070e8 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007112:	2300      	movs	r3, #0
		Files[i].clu = dp->sclust;
		Files[i].idx = dp->index;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007114:	2900      	cmp	r1, #0
 8007116:	d130      	bne.n	800717a <inc_lock+0x9e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007118:	005a      	lsls	r2, r3, #1
 800711a:	18d1      	adds	r1, r2, r3
 800711c:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <inc_lock+0xb8>)
 800711e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007122:	8950      	ldrh	r0, [r2, #10]
 8007124:	3001      	adds	r0, #1
 8007126:	b280      	uxth	r0, r0
 8007128:	005a      	lsls	r2, r3, #1
 800712a:	18d1      	adds	r1, r2, r3
 800712c:	4a19      	ldr	r2, [pc, #100]	; (8007194 <inc_lock+0xb8>)
 800712e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007132:	8150      	strh	r0, [r2, #10]

	return i + 1;
 8007134:	1c58      	adds	r0, r3, #1
}
 8007136:	bc70      	pop	{r4, r5, r6}
 8007138:	4770      	bx	lr
			Files[i].clu == dp->sclust &&
 800713a:	4c16      	ldr	r4, [pc, #88]	; (8007194 <inc_lock+0xb8>)
		if (Files[i].fs == dp->fs &&
 800713c:	6925      	ldr	r5, [r4, #16]
 800713e:	6884      	ldr	r4, [r0, #8]
 8007140:	42a5      	cmp	r5, r4
 8007142:	d1d5      	bne.n	80070f0 <inc_lock+0x14>
			Files[i].idx == dp->index) break;
 8007144:	4c13      	ldr	r4, [pc, #76]	; (8007194 <inc_lock+0xb8>)
			Files[i].clu == dp->sclust &&
 8007146:	8aa5      	ldrh	r5, [r4, #20]
 8007148:	88c4      	ldrh	r4, [r0, #6]
 800714a:	42a5      	cmp	r5, r4
 800714c:	d1d0      	bne.n	80070f0 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800714e:	2301      	movs	r3, #1
 8007150:	e7e0      	b.n	8007114 <inc_lock+0x38>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <inc_lock+0x7c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007156:	2300      	movs	r3, #0
		Files[i].fs = dp->fs;
 8007158:	4e0e      	ldr	r6, [pc, #56]	; (8007194 <inc_lock+0xb8>)
 800715a:	005c      	lsls	r4, r3, #1
 800715c:	441c      	add	r4, r3
 800715e:	00a4      	lsls	r4, r4, #2
 8007160:	1935      	adds	r5, r6, r4
 8007162:	5132      	str	r2, [r6, r4]
		Files[i].clu = dp->sclust;
 8007164:	6882      	ldr	r2, [r0, #8]
 8007166:	606a      	str	r2, [r5, #4]
		Files[i].idx = dp->index;
 8007168:	88c2      	ldrh	r2, [r0, #6]
 800716a:	812a      	strh	r2, [r5, #8]
		Files[i].ctr = 0;
 800716c:	2200      	movs	r2, #0
 800716e:	816a      	strh	r2, [r5, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007170:	2900      	cmp	r1, #0
 8007172:	d0d1      	beq.n	8007118 <inc_lock+0x3c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007174:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007178:	e7d6      	b.n	8007128 <inc_lock+0x4c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800717a:	005a      	lsls	r2, r3, #1
 800717c:	18d1      	adds	r1, r2, r3
 800717e:	4a05      	ldr	r2, [pc, #20]	; (8007194 <inc_lock+0xb8>)
 8007180:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007184:	8952      	ldrh	r2, [r2, #10]
 8007186:	b10a      	cbz	r2, 800718c <inc_lock+0xb0>
 8007188:	2000      	movs	r0, #0
 800718a:	e7d4      	b.n	8007136 <inc_lock+0x5a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800718c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007190:	e7ca      	b.n	8007128 <inc_lock+0x4c>
 8007192:	bf00      	nop
 8007194:	200009b8 	.word	0x200009b8

08007198 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007198:	3801      	subs	r0, #1
 800719a:	2801      	cmp	r0, #1
 800719c:	d814      	bhi.n	80071c8 <dec_lock+0x30>
		n = Files[i].ctr;
 800719e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80071a2:	4a11      	ldr	r2, [pc, #68]	; (80071e8 <dec_lock+0x50>)
 80071a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071a8:	895a      	ldrh	r2, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 80071aa:	f422 7380 	bic.w	r3, r2, #256	; 0x100
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	b163      	cbz	r3, 80071cc <dec_lock+0x34>
 80071b2:	3a01      	subs	r2, #1
 80071b4:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 80071b6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80071ba:	490b      	ldr	r1, [pc, #44]	; (80071e8 <dec_lock+0x50>)
 80071bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80071c0:	815a      	strh	r2, [r3, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80071c2:	b152      	cbz	r2, 80071da <dec_lock+0x42>
		res = FR_OK;
 80071c4:	2000      	movs	r0, #0
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
	}
	return res;
}
 80071c6:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 80071c8:	2002      	movs	r0, #2
 80071ca:	4770      	bx	lr
		Files[i].ctr = n;
 80071cc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80071d0:	4a05      	ldr	r2, [pc, #20]	; (80071e8 <dec_lock+0x50>)
 80071d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071d6:	2200      	movs	r2, #0
 80071d8:	815a      	strh	r2, [r3, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80071da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80071de:	0083      	lsls	r3, r0, #2
 80071e0:	2000      	movs	r0, #0
 80071e2:	4a01      	ldr	r2, [pc, #4]	; (80071e8 <dec_lock+0x50>)
 80071e4:	50d0      	str	r0, [r2, r3]
 80071e6:	4770      	bx	lr
 80071e8:	200009b8 	.word	0x200009b8

080071ec <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80071ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80071ee:	1d13      	adds	r3, r2, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80071f0:	0a49      	lsrs	r1, r1, #9
 80071f2:	6800      	ldr	r0, [r0, #0]
 80071f4:	f890 0202 	ldrb.w	r0, [r0, #514]	; 0x202
 80071f8:	fbb1 f1f0 	udiv	r1, r1, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80071fc:	6850      	ldr	r0, [r2, #4]
		if (!ncl) return 0;		/* End of table? (error) */
 80071fe:	b148      	cbz	r0, 8007214 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8007200:	4281      	cmp	r1, r0
 8007202:	d305      	bcc.n	8007210 <clmt_clust+0x24>
		cl -= ncl; tbl++;		/* Next fragment */
 8007204:	1a09      	subs	r1, r1, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007206:	f853 0f08 	ldr.w	r0, [r3, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 800720a:	b120      	cbz	r0, 8007216 <clmt_clust+0x2a>
		if (cl < ncl) break;	/* In this fragment? */
 800720c:	4288      	cmp	r0, r1
 800720e:	d9f9      	bls.n	8007204 <clmt_clust+0x18>
	}
	return cl + *tbl;	/* Return the cluster number */
 8007210:	6858      	ldr	r0, [r3, #4]
 8007212:	4408      	add	r0, r1
}
 8007214:	4770      	bx	lr
 8007216:	4770      	bx	lr

08007218 <ld_clust>:
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007218:	7eca      	ldrb	r2, [r1, #27]
 800721a:	7e8b      	ldrb	r3, [r1, #26]
 800721c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
 8007220:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8007224:	2a03      	cmp	r2, #3
 8007226:	d001      	beq.n	800722c <ld_clust+0x14>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;

	return cl;
}
 8007228:	4618      	mov	r0, r3
 800722a:	4770      	bx	lr
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800722c:	7d48      	ldrb	r0, [r1, #21]
 800722e:	7d0a      	ldrb	r2, [r1, #20]
 8007230:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
 8007238:	e7f6      	b.n	8007228 <ld_clust+0x10>

0800723a <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800723a:	6801      	ldr	r1, [r0, #0]
 800723c:	b1e9      	cbz	r1, 800727a <get_ldnumber+0x40>
{
 800723e:	b410      	push	{r4}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007240:	780c      	ldrb	r4, [r1, #0]
 8007242:	2c20      	cmp	r4, #32
 8007244:	d911      	bls.n	800726a <get_ldnumber+0x30>
 8007246:	2c3a      	cmp	r4, #58	; 0x3a
 8007248:	d020      	beq.n	800728c <get_ldnumber+0x52>
 800724a:	460a      	mov	r2, r1
 800724c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007250:	2b20      	cmp	r3, #32
 8007252:	d90c      	bls.n	800726e <get_ldnumber+0x34>
 8007254:	2b3a      	cmp	r3, #58	; 0x3a
 8007256:	d1f9      	bne.n	800724c <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8007258:	1c4b      	adds	r3, r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800725a:	429a      	cmp	r2, r3
 800725c:	d110      	bne.n	8007280 <get_ldnumber+0x46>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800725e:	2c30      	cmp	r4, #48	; 0x30
 8007260:	d111      	bne.n	8007286 <get_ldnumber+0x4c>
					vol = (int)i;
					*path = ++tt;
 8007262:	3102      	adds	r1, #2
 8007264:	6001      	str	r1, [r0, #0]
					vol = (int)i;
 8007266:	2000      	movs	r0, #0
 8007268:	e005      	b.n	8007276 <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800726a:	460a      	mov	r2, r1
 800726c:	4623      	mov	r3, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800726e:	2b3a      	cmp	r3, #58	; 0x3a
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007270:	bf18      	it	ne
 8007272:	2000      	movne	r0, #0
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007274:	d0f0      	beq.n	8007258 <get_ldnumber+0x1e>
#endif
	}
	return vol;
}
 8007276:	bc10      	pop	{r4}
 8007278:	4770      	bx	lr
	int vol = -1;
 800727a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800727e:	4770      	bx	lr
	int vol = -1;
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	e7f7      	b.n	8007276 <get_ldnumber+0x3c>
 8007286:	f04f 30ff 	mov.w	r0, #4294967295
 800728a:	e7f4      	b.n	8007276 <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800728c:	460a      	mov	r2, r1
 800728e:	e7e3      	b.n	8007258 <get_ldnumber+0x1e>

08007290 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007290:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8007294:	b90b      	cbnz	r3, 800729a <sync_window+0xa>
	FRESULT res = FR_OK;
 8007296:	2000      	movs	r0, #0
}
 8007298:	4770      	bx	lr
{
 800729a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729e:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80072a0:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80072a4:	4607      	mov	r7, r0
 80072a6:	2301      	movs	r3, #1
 80072a8:	462a      	mov	r2, r5
 80072aa:	4601      	mov	r1, r0
 80072ac:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80072b0:	f7ff fea2 	bl	8006ff8 <disk_write>
 80072b4:	b9f0      	cbnz	r0, 80072f4 <sync_window+0x64>
			fs->wflag = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80072bc:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 80072c0:	1aeb      	subs	r3, r5, r3
 80072c2:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d217      	bcs.n	80072fa <sync_window+0x6a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072ca:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 80072ce:	2e01      	cmp	r6, #1
 80072d0:	d915      	bls.n	80072fe <sync_window+0x6e>
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80072d2:	f04f 0801 	mov.w	r8, #1
					wsect += fs->fsize;
 80072d6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80072da:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80072dc:	4643      	mov	r3, r8
 80072de:	462a      	mov	r2, r5
 80072e0:	4639      	mov	r1, r7
 80072e2:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80072e6:	f7ff fe87 	bl	8006ff8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072ea:	3e01      	subs	r6, #1
 80072ec:	2e01      	cmp	r6, #1
 80072ee:	d1f2      	bne.n	80072d6 <sync_window+0x46>
	FRESULT res = FR_OK;
 80072f0:	2000      	movs	r0, #0
 80072f2:	e000      	b.n	80072f6 <sync_window+0x66>
			res = FR_DISK_ERR;
 80072f4:	2001      	movs	r0, #1
}
 80072f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FRESULT res = FR_OK;
 80072fa:	2000      	movs	r0, #0
 80072fc:	e7fb      	b.n	80072f6 <sync_window+0x66>
 80072fe:	2000      	movs	r0, #0
 8007300:	e7f9      	b.n	80072f6 <sync_window+0x66>

08007302 <move_window>:
{
 8007302:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007304:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8007308:	428b      	cmp	r3, r1
 800730a:	d014      	beq.n	8007336 <move_window+0x34>
 800730c:	4604      	mov	r4, r0
 800730e:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8007310:	f7ff ffbe 	bl	8007290 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007314:	4606      	mov	r6, r0
 8007316:	b978      	cbnz	r0, 8007338 <move_window+0x36>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007318:	2301      	movs	r3, #1
 800731a:	462a      	mov	r2, r5
 800731c:	4621      	mov	r1, r4
 800731e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8007322:	f7ff fe5d 	bl	8006fe0 <disk_read>
 8007326:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8007328:	bf1c      	itt	ne
 800732a:	2601      	movne	r6, #1
 800732c:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 8007330:	f8c4 522c 	str.w	r5, [r4, #556]	; 0x22c
 8007334:	e000      	b.n	8007338 <move_window+0x36>
	FRESULT res = FR_OK;
 8007336:	2600      	movs	r6, #0
}
 8007338:	4630      	mov	r0, r6
 800733a:	bd70      	pop	{r4, r5, r6, pc}

0800733c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800733c:	b510      	push	{r4, lr}
 800733e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007340:	2300      	movs	r3, #0
 8007342:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8007346:	f04f 33ff 	mov.w	r3, #4294967295
 800734a:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800734e:	f7ff ffd8 	bl	8007302 <move_window>
 8007352:	bb80      	cbnz	r0, 80073b6 <check_fs+0x7a>
		return 3;

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007354:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8007358:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 800735c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007360:	b21b      	sxth	r3, r3
 8007362:	4a18      	ldr	r2, [pc, #96]	; (80073c4 <check_fs+0x88>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d128      	bne.n	80073ba <check_fs+0x7e>
		return 2;

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007368:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800736c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007376:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 800737a:	4313      	orrs	r3, r2
 800737c:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 8007380:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007384:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007388:	4a0f      	ldr	r2, [pc, #60]	; (80073c8 <check_fs+0x8c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d017      	beq.n	80073be <check_fs+0x82>
		return 0;
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800738e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8007392:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
 8007396:	0400      	lsls	r0, r0, #16
 8007398:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800739c:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80073a0:	4318      	orrs	r0, r3
 80073a2:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80073a6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80073aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 80073ae:	1a80      	subs	r0, r0, r2
 80073b0:	bf18      	it	ne
 80073b2:	2001      	movne	r0, #1
 80073b4:	e002      	b.n	80073bc <check_fs+0x80>
 80073b6:	2003      	movs	r0, #3
 80073b8:	e000      	b.n	80073bc <check_fs+0x80>
		return 2;
 80073ba:	2002      	movs	r0, #2
		return 0;

	return 1;
}
 80073bc:	bd10      	pop	{r4, pc}
		return 0;
 80073be:	2000      	movs	r0, #0
 80073c0:	e7fc      	b.n	80073bc <check_fs+0x80>
 80073c2:	bf00      	nop
 80073c4:	ffffaa55 	.word	0xffffaa55
 80073c8:	00544146 	.word	0x00544146

080073cc <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80073cc:	b1b8      	cbz	r0, 80073fe <validate+0x32>
{
 80073ce:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80073d0:	6803      	ldr	r3, [r0, #0]
 80073d2:	b1b3      	cbz	r3, 8007402 <validate+0x36>
 80073d4:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 80073d8:	b1a9      	cbz	r1, 8007406 <validate+0x3a>
 80073da:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 80073de:	8882      	ldrh	r2, [r0, #4]
 80073e0:	4291      	cmp	r1, r2
 80073e2:	d001      	beq.n	80073e8 <validate+0x1c>
		return FR_INVALID_OBJECT;
 80073e4:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80073e6:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80073e8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80073ec:	f7ff fdd8 	bl	8006fa0 <disk_status>
 80073f0:	f000 0001 	and.w	r0, r0, #1
		return FR_INVALID_OBJECT;
 80073f4:	2800      	cmp	r0, #0
 80073f6:	bf0c      	ite	eq
 80073f8:	2000      	moveq	r0, #0
 80073fa:	2009      	movne	r0, #9
 80073fc:	e7f3      	b.n	80073e6 <validate+0x1a>
 80073fe:	2009      	movs	r0, #9
}
 8007400:	4770      	bx	lr
		return FR_INVALID_OBJECT;
 8007402:	2009      	movs	r0, #9
 8007404:	e7ef      	b.n	80073e6 <validate+0x1a>
 8007406:	2009      	movs	r0, #9
 8007408:	e7ed      	b.n	80073e6 <validate+0x1a>
	...

0800740c <find_volume>:
{
 800740c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	4606      	mov	r6, r0
 8007414:	4617      	mov	r7, r2
	*rfs = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
 800741a:	4608      	mov	r0, r1
 800741c:	f7ff ff0d 	bl	800723a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007420:	1e05      	subs	r5, r0, #0
 8007422:	f2c0 8182 	blt.w	800772a <find_volume+0x31e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007426:	4bcd      	ldr	r3, [pc, #820]	; (800775c <find_volume+0x350>)
 8007428:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800742c:	2c00      	cmp	r4, #0
 800742e:	f000 8180 	beq.w	8007732 <find_volume+0x326>
	*rfs = fs;							/* Return pointer to the file system object */
 8007432:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007434:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8007438:	b183      	cbz	r3, 800745c <find_volume+0x50>
		stat = disk_status(fs->drv);
 800743a:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800743e:	f7ff fdaf 	bl	8006fa0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007442:	f010 0f01 	tst.w	r0, #1
 8007446:	d109      	bne.n	800745c <find_volume+0x50>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007448:	2f00      	cmp	r7, #0
 800744a:	f000 8174 	beq.w	8007736 <find_volume+0x32a>
 800744e:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
 8007452:	2800      	cmp	r0, #0
 8007454:	bf0c      	ite	eq
 8007456:	2000      	moveq	r0, #0
 8007458:	200a      	movne	r0, #10
 800745a:	e167      	b.n	800772c <find_volume+0x320>
	fs->fs_type = 0;					/* Clear the file system object */
 800745c:	2300      	movs	r3, #0
 800745e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007462:	b2e8      	uxtb	r0, r5
 8007464:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007468:	f7ff fda6 	bl	8006fb8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800746c:	f010 0f01 	tst.w	r0, #1
 8007470:	f040 8163 	bne.w	800773a <find_volume+0x32e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007474:	b11f      	cbz	r7, 800747e <find_volume+0x72>
 8007476:	f010 0f04 	tst.w	r0, #4
 800747a:	f040 8160 	bne.w	800773e <find_volume+0x332>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800747e:	2100      	movs	r1, #0
 8007480:	4620      	mov	r0, r4
 8007482:	f7ff ff5b 	bl	800733c <check_fs>
 8007486:	4603      	mov	r3, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007488:	2801      	cmp	r0, #1
 800748a:	f000 80b5 	beq.w	80075f8 <find_volume+0x1ec>
	bsect = 0;
 800748e:	2600      	movs	r6, #0
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007490:	2b03      	cmp	r3, #3
 8007492:	f000 8156 	beq.w	8007742 <find_volume+0x336>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007496:	2b00      	cmp	r3, #0
 8007498:	f040 8155 	bne.w	8007746 <find_volume+0x33a>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800749c:	7b22      	ldrb	r2, [r4, #12]
 800749e:	7ae3      	ldrb	r3, [r4, #11]
 80074a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80074a4:	b21b      	sxth	r3, r3
 80074a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074aa:	f040 814e 	bne.w	800774a <find_volume+0x33e>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80074ae:	7de1      	ldrb	r1, [r4, #23]
 80074b0:	7da3      	ldrb	r3, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80074b2:	ea53 2101 	orrs.w	r1, r3, r1, lsl #8
 80074b6:	d10d      	bne.n	80074d4 <find_volume+0xc8>
 80074b8:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80074bc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80074c0:	041b      	lsls	r3, r3, #16
 80074c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80074c6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80074d0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	fs->fsize = fasize;
 80074d4:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80074d8:	7c22      	ldrb	r2, [r4, #16]
 80074da:	f884 2203 	strb.w	r2, [r4, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80074de:	1e53      	subs	r3, r2, #1
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	f200 8133 	bhi.w	800774e <find_volume+0x342>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80074e8:	7b65      	ldrb	r5, [r4, #13]
 80074ea:	f884 5202 	strb.w	r5, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	f000 812f 	beq.w	8007752 <find_volume+0x346>
 80074f4:	1e6b      	subs	r3, r5, #1
 80074f6:	422b      	tst	r3, r5
 80074f8:	f040 812d 	bne.w	8007756 <find_volume+0x34a>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80074fc:	7ca3      	ldrb	r3, [r4, #18]
 80074fe:	7c60      	ldrb	r0, [r4, #17]
 8007500:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007504:	f8a4 0208 	strh.w	r0, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007508:	f010 0f0f 	tst.w	r0, #15
 800750c:	f040 8132 	bne.w	8007774 <find_volume+0x368>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007510:	7d27      	ldrb	r7, [r4, #20]
 8007512:	7ce3      	ldrb	r3, [r4, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007514:	ea53 2307 	orrs.w	r3, r3, r7, lsl #8
 8007518:	d10d      	bne.n	8007536 <find_volume+0x12a>
 800751a:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
 800751e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007522:	041b      	lsls	r3, r3, #16
 8007524:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8007528:	f894 7020 	ldrb.w	r7, [r4, #32]
 800752c:	433b      	orrs	r3, r7
 800752e:	f894 7021 	ldrb.w	r7, [r4, #33]	; 0x21
 8007532:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007536:	f894 c00f 	ldrb.w	ip, [r4, #15]
 800753a:	7ba7      	ldrb	r7, [r4, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800753c:	ea57 2c0c 	orrs.w	ip, r7, ip, lsl #8
 8007540:	f000 811a 	beq.w	8007778 <find_volume+0x36c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007544:	fb01 f202 	mul.w	r2, r1, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007548:	eb0c 1710 	add.w	r7, ip, r0, lsr #4
 800754c:	4417      	add	r7, r2
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800754e:	42bb      	cmp	r3, r7
 8007550:	f0c0 8114 	bcc.w	800777c <find_volume+0x370>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007554:	1bdb      	subs	r3, r3, r7
 8007556:	fbb3 f3f5 	udiv	r3, r3, r5
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 8110 	beq.w	8007780 <find_volume+0x374>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007560:	f640 75f5 	movw	r5, #4085	; 0xff5
 8007564:	42ab      	cmp	r3, r5
 8007566:	bf94      	ite	ls
 8007568:	2501      	movls	r5, #1
 800756a:	2502      	movhi	r5, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800756c:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
 8007570:	4573      	cmp	r3, lr
 8007572:	f200 810f 	bhi.w	8007794 <find_volume+0x388>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007576:	3302      	adds	r3, #2
 8007578:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800757c:	f8c4 621c 	str.w	r6, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007580:	44b4      	add	ip, r6
 8007582:	f8c4 c220 	str.w	ip, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8007586:	4437      	add	r7, r6
 8007588:	f8c4 7228 	str.w	r7, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800758c:	2d03      	cmp	r5, #3
 800758e:	f000 810d 	beq.w	80077ac <find_volume+0x3a0>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007592:	2800      	cmp	r0, #0
 8007594:	f000 80fa 	beq.w	800778c <find_volume+0x380>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007598:	4462      	add	r2, ip
 800759a:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800759e:	2d02      	cmp	r5, #2
 80075a0:	bf0f      	iteee	eq
 80075a2:	005b      	lsleq	r3, r3, #1
 80075a4:	eb03 0243 	addne.w	r2, r3, r3, lsl #1
 80075a8:	f003 0301 	andne.w	r3, r3, #1
 80075ac:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80075b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80075b4:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80075b8:	f0c0 80ea 	bcc.w	8007790 <find_volume+0x384>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80075bc:	f04f 33ff 	mov.w	r3, #4294967295
 80075c0:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 80075c4:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	fs->fsi_flag = 0x80;
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	fs->fs_type = fmt;	/* FAT sub-type */
 80075ce:	f884 5200 	strb.w	r5, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80075d2:	4a63      	ldr	r2, [pc, #396]	; (8007760 <find_volume+0x354>)
 80075d4:	8813      	ldrh	r3, [r2, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	b29b      	uxth	r3, r3
 80075da:	8013      	strh	r3, [r2, #0]
 80075dc:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 80075e0:	4b60      	ldr	r3, [pc, #384]	; (8007764 <find_volume+0x358>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	429c      	cmp	r4, r3
 80075e6:	f000 8098 	beq.w	800771a <find_volume+0x30e>
 80075ea:	4b5e      	ldr	r3, [pc, #376]	; (8007764 <find_volume+0x358>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	429c      	cmp	r4, r3
 80075f0:	f000 8097 	beq.w	8007722 <find_volume+0x316>
	return FR_OK;
 80075f4:	2000      	movs	r0, #0
 80075f6:	e099      	b.n	800772c <find_volume+0x320>
 80075f8:	4623      	mov	r3, r4
 80075fa:	466d      	mov	r5, sp
 80075fc:	f104 0040 	add.w	r0, r4, #64	; 0x40
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007600:	4629      	mov	r1, r5
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007602:	2700      	movs	r7, #0
 8007604:	e005      	b.n	8007612 <find_volume+0x206>
 8007606:	463a      	mov	r2, r7
 8007608:	f841 2b04 	str.w	r2, [r1], #4
 800760c:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800760e:	4283      	cmp	r3, r0
 8007610:	d012      	beq.n	8007638 <find_volume+0x22c>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007612:	f893 21c2 	ldrb.w	r2, [r3, #450]	; 0x1c2
 8007616:	2a00      	cmp	r2, #0
 8007618:	d0f5      	beq.n	8007606 <find_volume+0x1fa>
 800761a:	f893 61c9 	ldrb.w	r6, [r3, #457]	; 0x1c9
 800761e:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
 8007622:	0412      	lsls	r2, r2, #16
 8007624:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8007628:	f893 61c6 	ldrb.w	r6, [r3, #454]	; 0x1c6
 800762c:	4332      	orrs	r2, r6
 800762e:	f893 61c7 	ldrb.w	r6, [r3, #455]	; 0x1c7
 8007632:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8007636:	e7e7      	b.n	8007608 <find_volume+0x1fc>
 8007638:	f105 0710 	add.w	r7, r5, #16
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800763c:	f04f 0802 	mov.w	r8, #2
 8007640:	e00a      	b.n	8007658 <find_volume+0x24c>
 8007642:	4631      	mov	r1, r6
 8007644:	4620      	mov	r0, r4
 8007646:	f7ff fe79 	bl	800733c <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800764a:	4603      	mov	r3, r0
 800764c:	2800      	cmp	r0, #0
 800764e:	f43f af25 	beq.w	800749c <find_volume+0x90>
 8007652:	42bd      	cmp	r5, r7
 8007654:	f43f af1c 	beq.w	8007490 <find_volume+0x84>
			bsect = br[i];
 8007658:	f855 6b04 	ldr.w	r6, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800765c:	2e00      	cmp	r6, #0
 800765e:	d1f0      	bne.n	8007642 <find_volume+0x236>
 8007660:	4643      	mov	r3, r8
 8007662:	e7f6      	b.n	8007652 <find_volume+0x246>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007664:	1c71      	adds	r1, r6, #1
 8007666:	4620      	mov	r0, r4
 8007668:	f7ff fe4b 	bl	8007302 <move_window>
 800766c:	2800      	cmp	r0, #0
 800766e:	d14e      	bne.n	800770e <find_volume+0x302>
		fs->fsi_flag = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007676:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800767a:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 800767e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007682:	b21b      	sxth	r3, r3
 8007684:	4a38      	ldr	r2, [pc, #224]	; (8007768 <find_volume+0x35c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d001      	beq.n	800768e <find_volume+0x282>
 800768a:	2503      	movs	r5, #3
 800768c:	e79f      	b.n	80075ce <find_volume+0x1c2>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800768e:	78e2      	ldrb	r2, [r4, #3]
 8007690:	78a3      	ldrb	r3, [r4, #2]
 8007692:	041b      	lsls	r3, r3, #16
 8007694:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007698:	7822      	ldrb	r2, [r4, #0]
 800769a:	4313      	orrs	r3, r2
 800769c:	7862      	ldrb	r2, [r4, #1]
 800769e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076a2:	4a32      	ldr	r2, [pc, #200]	; (800776c <find_volume+0x360>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d134      	bne.n	8007712 <find_volume+0x306>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80076a8:	f894 21e7 	ldrb.w	r2, [r4, #487]	; 0x1e7
 80076ac:	f894 31e6 	ldrb.w	r3, [r4, #486]	; 0x1e6
 80076b0:	041b      	lsls	r3, r3, #16
 80076b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80076b6:	f894 21e4 	ldrb.w	r2, [r4, #484]	; 0x1e4
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f894 21e5 	ldrb.w	r2, [r4, #485]	; 0x1e5
 80076c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076c4:	4a2a      	ldr	r2, [pc, #168]	; (8007770 <find_volume+0x364>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d125      	bne.n	8007716 <find_volume+0x30a>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80076ca:	f894 21eb 	ldrb.w	r2, [r4, #491]	; 0x1eb
 80076ce:	f894 31ea 	ldrb.w	r3, [r4, #490]	; 0x1ea
 80076d2:	041b      	lsls	r3, r3, #16
 80076d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80076d8:	f894 21e8 	ldrb.w	r2, [r4, #488]	; 0x1e8
 80076dc:	4313      	orrs	r3, r2
 80076de:	f894 21e9 	ldrb.w	r2, [r4, #489]	; 0x1e9
 80076e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076e6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80076ea:	f894 21ef 	ldrb.w	r2, [r4, #495]	; 0x1ef
 80076ee:	f894 31ee 	ldrb.w	r3, [r4, #494]	; 0x1ee
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80076f8:	f894 21ec 	ldrb.w	r2, [r4, #492]	; 0x1ec
 80076fc:	4313      	orrs	r3, r2
 80076fe:	f894 21ed 	ldrb.w	r2, [r4, #493]	; 0x1ed
 8007702:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007706:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800770a:	2503      	movs	r5, #3
 800770c:	e75f      	b.n	80075ce <find_volume+0x1c2>
 800770e:	2503      	movs	r5, #3
 8007710:	e75d      	b.n	80075ce <find_volume+0x1c2>
 8007712:	2503      	movs	r5, #3
 8007714:	e75b      	b.n	80075ce <find_volume+0x1c2>
 8007716:	2503      	movs	r5, #3
 8007718:	e759      	b.n	80075ce <find_volume+0x1c2>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <find_volume+0x358>)
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	e763      	b.n	80075ea <find_volume+0x1de>
 8007722:	4b10      	ldr	r3, [pc, #64]	; (8007764 <find_volume+0x358>)
 8007724:	2200      	movs	r2, #0
 8007726:	60da      	str	r2, [r3, #12]
 8007728:	e764      	b.n	80075f4 <find_volume+0x1e8>
	if (vol < 0) return FR_INVALID_DRIVE;
 800772a:	200b      	movs	r0, #11
}
 800772c:	b004      	add	sp, #16
 800772e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007732:	200c      	movs	r0, #12
 8007734:	e7fa      	b.n	800772c <find_volume+0x320>
			return FR_OK;				/* The file system object is valid */
 8007736:	2000      	movs	r0, #0
 8007738:	e7f8      	b.n	800772c <find_volume+0x320>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800773a:	2003      	movs	r0, #3
 800773c:	e7f6      	b.n	800772c <find_volume+0x320>
		return FR_WRITE_PROTECTED;
 800773e:	200a      	movs	r0, #10
 8007740:	e7f4      	b.n	800772c <find_volume+0x320>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007742:	2001      	movs	r0, #1
 8007744:	e7f2      	b.n	800772c <find_volume+0x320>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007746:	200d      	movs	r0, #13
 8007748:	e7f0      	b.n	800772c <find_volume+0x320>
		return FR_NO_FILESYSTEM;
 800774a:	200d      	movs	r0, #13
 800774c:	e7ee      	b.n	800772c <find_volume+0x320>
		return FR_NO_FILESYSTEM;
 800774e:	200d      	movs	r0, #13
 8007750:	e7ec      	b.n	800772c <find_volume+0x320>
		return FR_NO_FILESYSTEM;
 8007752:	200d      	movs	r0, #13
 8007754:	e7ea      	b.n	800772c <find_volume+0x320>
 8007756:	200d      	movs	r0, #13
 8007758:	e7e8      	b.n	800772c <find_volume+0x320>
 800775a:	bf00      	nop
 800775c:	200009b4 	.word	0x200009b4
 8007760:	200009d0 	.word	0x200009d0
 8007764:	200009b8 	.word	0x200009b8
 8007768:	ffffaa55 	.word	0xffffaa55
 800776c:	41615252 	.word	0x41615252
 8007770:	61417272 	.word	0x61417272
		return FR_NO_FILESYSTEM;
 8007774:	200d      	movs	r0, #13
 8007776:	e7d9      	b.n	800772c <find_volume+0x320>
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007778:	200d      	movs	r0, #13
 800777a:	e7d7      	b.n	800772c <find_volume+0x320>
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800777c:	200d      	movs	r0, #13
 800777e:	e7d5      	b.n	800772c <find_volume+0x320>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007780:	200d      	movs	r0, #13
 8007782:	e7d3      	b.n	800772c <find_volume+0x320>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007784:	200d      	movs	r0, #13
 8007786:	e7d1      	b.n	800772c <find_volume+0x320>
		return FR_NO_FILESYSTEM;
 8007788:	200d      	movs	r0, #13
 800778a:	e7cf      	b.n	800772c <find_volume+0x320>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800778c:	200d      	movs	r0, #13
 800778e:	e7cd      	b.n	800772c <find_volume+0x320>
		return FR_NO_FILESYSTEM;
 8007790:	200d      	movs	r0, #13
 8007792:	e7cb      	b.n	800772c <find_volume+0x320>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007794:	3302      	adds	r3, #2
 8007796:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800779a:	f8c4 621c 	str.w	r6, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800779e:	eb0c 0206 	add.w	r2, ip, r6
 80077a2:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80077a6:	4437      	add	r7, r6
 80077a8:	f8c4 7228 	str.w	r7, [r4, #552]	; 0x228
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d1e9      	bne.n	8007784 <find_volume+0x378>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80077b0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 80077b4:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80077b8:	0412      	lsls	r2, r2, #16
 80077ba:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80077be:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80077c2:	4302      	orrs	r2, r0
 80077c4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80077c8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80077cc:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80077d0:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80077d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80077d6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80077da:	d3d5      	bcc.n	8007788 <find_volume+0x37c>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80077dc:	f04f 33ff 	mov.w	r3, #4294967295
 80077e0:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 80077e4:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	fs->fsi_flag = 0x80;
 80077e8:	2380      	movs	r3, #128	; 0x80
 80077ea:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80077ee:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80077f2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80077f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80077fa:	b21b      	sxth	r3, r3
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	f43f af31 	beq.w	8007664 <find_volume+0x258>
 8007802:	2503      	movs	r5, #3
 8007804:	e6e3      	b.n	80075ce <find_volume+0x1c2>
 8007806:	bf00      	nop

08007808 <sync_fs>:
{
 8007808:	b510      	push	{r4, lr}
 800780a:	4604      	mov	r4, r0
	res = sync_window(fs);
 800780c:	f7ff fd40 	bl	8007290 <sync_window>
	if (res == FR_OK) {
 8007810:	4603      	mov	r3, r0
 8007812:	b960      	cbnz	r0, 800782e <sync_fs+0x26>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007814:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8007818:	2b03      	cmp	r3, #3
 800781a:	d00a      	beq.n	8007832 <sync_fs+0x2a>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800781c:	2200      	movs	r2, #0
 800781e:	4611      	mov	r1, r2
 8007820:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8007824:	f7ff fbf4 	bl	8007010 <disk_ioctl>
	res = sync_window(fs);
 8007828:	1c03      	adds	r3, r0, #0
 800782a:	bf18      	it	ne
 800782c:	2301      	movne	r3, #1
}
 800782e:	4618      	mov	r0, r3
 8007830:	bd10      	pop	{r4, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007832:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8007836:	2b01      	cmp	r3, #1
 8007838:	d1f0      	bne.n	800781c <sync_fs+0x14>
			mem_set(fs->win.d8, 0, SS(fs));
 800783a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800783e:	2100      	movs	r1, #0
 8007840:	4620      	mov	r0, r4
 8007842:	f7ff fbfb 	bl	800703c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007846:	2355      	movs	r3, #85	; 0x55
 8007848:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
 800784c:	23aa      	movs	r3, #170	; 0xaa
 800784e:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007852:	2352      	movs	r3, #82	; 0x52
 8007854:	7023      	strb	r3, [r4, #0]
 8007856:	7063      	strb	r3, [r4, #1]
 8007858:	2361      	movs	r3, #97	; 0x61
 800785a:	70a3      	strb	r3, [r4, #2]
 800785c:	2241      	movs	r2, #65	; 0x41
 800785e:	70e2      	strb	r2, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007860:	2172      	movs	r1, #114	; 0x72
 8007862:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
 8007866:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
 800786a:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
 800786e:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007872:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8007876:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
 800787a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800787e:	f884 21e9 	strb.w	r2, [r4, #489]	; 0x1e9
 8007882:	0c1a      	lsrs	r2, r3, #16
 8007884:	f884 21ea 	strb.w	r2, [r4, #490]	; 0x1ea
 8007888:	0e1b      	lsrs	r3, r3, #24
 800788a:	f884 31eb 	strb.w	r3, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800788e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8007892:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
 8007896:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800789a:	f884 21ed 	strb.w	r2, [r4, #493]	; 0x1ed
 800789e:	0c1a      	lsrs	r2, r3, #16
 80078a0:	f884 21ee 	strb.w	r2, [r4, #494]	; 0x1ee
 80078a4:	0e1b      	lsrs	r3, r3, #24
 80078a6:	f884 31ef 	strb.w	r3, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 80078aa:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 80078ae:	3201      	adds	r2, #1
 80078b0:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80078b4:	2301      	movs	r3, #1
 80078b6:	4621      	mov	r1, r4
 80078b8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80078bc:	f7ff fb9c 	bl	8006ff8 <disk_write>
			fs->fsi_flag = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
 80078c6:	e7a9      	b.n	800781c <sync_fs+0x14>

080078c8 <clust2sect>:
	clst -= 2;
 80078c8:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80078ca:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80078ce:	3b02      	subs	r3, #2
 80078d0:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 80078d2:	bf83      	ittte	hi
 80078d4:	f890 3202 	ldrbhi.w	r3, [r0, #514]	; 0x202
 80078d8:	f8d0 0228 	ldrhi.w	r0, [r0, #552]	; 0x228
 80078dc:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80078e0:	2000      	movls	r0, #0
}
 80078e2:	4770      	bx	lr

080078e4 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80078e4:	2901      	cmp	r1, #1
 80078e6:	d95b      	bls.n	80079a0 <get_fat+0xbc>
{
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80078ea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80078ee:	428b      	cmp	r3, r1
 80078f0:	d958      	bls.n	80079a4 <get_fat+0xc0>
 80078f2:	460c      	mov	r4, r1
 80078f4:	4606      	mov	r6, r0
		switch (fs->fs_type) {
 80078f6:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d028      	beq.n	8007950 <get_fat+0x6c>
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d036      	beq.n	8007970 <get_fat+0x8c>
 8007902:	2b01      	cmp	r3, #1
 8007904:	d001      	beq.n	800790a <get_fat+0x26>
			val = 1;	/* Internal error */
 8007906:	2001      	movs	r0, #1
 8007908:	e04d      	b.n	80079a6 <get_fat+0xc2>
			bc = (UINT)clst; bc += bc / 2;
 800790a:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800790e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007912:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8007916:	f7ff fcf4 	bl	8007302 <move_window>
 800791a:	2800      	cmp	r0, #0
 800791c:	d144      	bne.n	80079a8 <get_fat+0xc4>
			wc = fs->win.d8[bc++ % SS(fs)];
 800791e:	1c6f      	adds	r7, r5, #1
 8007920:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8007924:	5d75      	ldrb	r5, [r6, r5]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007926:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
 800792a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800792e:	4630      	mov	r0, r6
 8007930:	f7ff fce7 	bl	8007302 <move_window>
 8007934:	2800      	cmp	r0, #0
 8007936:	d13a      	bne.n	80079ae <get_fat+0xca>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8007938:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800793c:	5df0      	ldrb	r0, [r6, r7]
 800793e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007942:	f014 0f01 	tst.w	r4, #1
 8007946:	bf14      	ite	ne
 8007948:	0900      	lsrne	r0, r0, #4
 800794a:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 800794e:	e02a      	b.n	80079a6 <get_fat+0xc2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007950:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007954:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007958:	f7ff fcd3 	bl	8007302 <move_window>
 800795c:	bb50      	cbnz	r0, 80079b4 <get_fat+0xd0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800795e:	0061      	lsls	r1, r4, #1
 8007960:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
			val = LD_WORD(p);
 8007964:	1873      	adds	r3, r6, r1
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	5c70      	ldrb	r0, [r6, r1]
 800796a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 800796e:	e01a      	b.n	80079a6 <get_fat+0xc2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007970:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007974:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007978:	f7ff fcc3 	bl	8007302 <move_window>
 800797c:	b9e8      	cbnz	r0, 80079ba <get_fat+0xd6>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800797e:	00a1      	lsls	r1, r4, #2
 8007980:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 8007984:	1872      	adds	r2, r6, r1
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007986:	78d0      	ldrb	r0, [r2, #3]
 8007988:	7893      	ldrb	r3, [r2, #2]
 800798a:	041b      	lsls	r3, r3, #16
 800798c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007990:	5c70      	ldrb	r0, [r6, r1]
 8007992:	4318      	orrs	r0, r3
 8007994:	7853      	ldrb	r3, [r2, #1]
 8007996:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800799a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800799e:	e002      	b.n	80079a6 <get_fat+0xc2>
		val = 1;	/* Internal error */
 80079a0:	2001      	movs	r0, #1
}
 80079a2:	4770      	bx	lr
		val = 1;	/* Internal error */
 80079a4:	2001      	movs	r0, #1
}
 80079a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	e7fb      	b.n	80079a6 <get_fat+0xc2>
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	e7f8      	b.n	80079a6 <get_fat+0xc2>
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	e7f5      	b.n	80079a6 <get_fat+0xc2>
 80079ba:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 80079be:	e7f2      	b.n	80079a6 <get_fat+0xc2>

080079c0 <dir_sdi>:
{
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	4606      	mov	r6, r0
	dp->index = (WORD)idx;	/* Current index */
 80079c4:	80c1      	strh	r1, [r0, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80079c6:	6884      	ldr	r4, [r0, #8]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80079c8:	2c01      	cmp	r4, #1
 80079ca:	d03e      	beq.n	8007a4a <dir_sdi+0x8a>
 80079cc:	460d      	mov	r5, r1
 80079ce:	6803      	ldr	r3, [r0, #0]
 80079d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80079d4:	42a2      	cmp	r2, r4
 80079d6:	d93a      	bls.n	8007a4e <dir_sdi+0x8e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80079d8:	b9dc      	cbnz	r4, 8007a12 <dir_sdi+0x52>
 80079da:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 80079de:	2a03      	cmp	r2, #3
 80079e0:	d012      	beq.n	8007a08 <dir_sdi+0x48>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80079e2:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 80079e6:	42aa      	cmp	r2, r5
 80079e8:	d933      	bls.n	8007a52 <dir_sdi+0x92>
		sect = dp->fs->dirbase;
 80079ea:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 80079ee:	60f4      	str	r4, [r6, #12]
	if (!sect) return FR_INT_ERR;
 80079f0:	b3b8      	cbz	r0, 8007a62 <dir_sdi+0xa2>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80079f2:	eb00 1015 	add.w	r0, r0, r5, lsr #4
 80079f6:	6130      	str	r0, [r6, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80079f8:	f005 050f 	and.w	r5, r5, #15
 80079fc:	6833      	ldr	r3, [r6, #0]
 80079fe:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8007a02:	6175      	str	r5, [r6, #20]
	return FR_OK;
 8007a04:	2000      	movs	r0, #0
 8007a06:	e023      	b.n	8007a50 <dir_sdi+0x90>
		clst = dp->fs->dirbase;
 8007a08:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007a0c:	2a00      	cmp	r2, #0
 8007a0e:	d0e8      	beq.n	80079e2 <dir_sdi+0x22>
		clst = dp->fs->dirbase;
 8007a10:	4614      	mov	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007a12:	f893 7202 	ldrb.w	r7, [r3, #514]	; 0x202
 8007a16:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8007a18:	42bd      	cmp	r5, r7
 8007a1a:	d311      	bcc.n	8007a40 <dir_sdi+0x80>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	6830      	ldr	r0, [r6, #0]
 8007a20:	f7ff ff60 	bl	80078e4 <get_fat>
 8007a24:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a26:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a2a:	d014      	beq.n	8007a56 <dir_sdi+0x96>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007a2c:	2801      	cmp	r0, #1
 8007a2e:	d914      	bls.n	8007a5a <dir_sdi+0x9a>
 8007a30:	6833      	ldr	r3, [r6, #0]
 8007a32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a36:	4283      	cmp	r3, r0
 8007a38:	d911      	bls.n	8007a5e <dir_sdi+0x9e>
			idx -= ic;
 8007a3a:	1bed      	subs	r5, r5, r7
		while (idx >= ic) {	/* Follow cluster chain */
 8007a3c:	42af      	cmp	r7, r5
 8007a3e:	d9ed      	bls.n	8007a1c <dir_sdi+0x5c>
		sect = clust2sect(dp->fs, clst);
 8007a40:	4621      	mov	r1, r4
 8007a42:	6830      	ldr	r0, [r6, #0]
 8007a44:	f7ff ff40 	bl	80078c8 <clust2sect>
 8007a48:	e7d1      	b.n	80079ee <dir_sdi+0x2e>
		return FR_INT_ERR;
 8007a4a:	2002      	movs	r0, #2
 8007a4c:	e000      	b.n	8007a50 <dir_sdi+0x90>
 8007a4e:	2002      	movs	r0, #2
}
 8007a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_INT_ERR;
 8007a52:	2002      	movs	r0, #2
 8007a54:	e7fc      	b.n	8007a50 <dir_sdi+0x90>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a56:	2001      	movs	r0, #1
 8007a58:	e7fa      	b.n	8007a50 <dir_sdi+0x90>
				return FR_INT_ERR;
 8007a5a:	2002      	movs	r0, #2
 8007a5c:	e7f8      	b.n	8007a50 <dir_sdi+0x90>
 8007a5e:	2002      	movs	r0, #2
 8007a60:	e7f6      	b.n	8007a50 <dir_sdi+0x90>
	if (!sect) return FR_INT_ERR;
 8007a62:	2002      	movs	r0, #2
 8007a64:	e7f4      	b.n	8007a50 <dir_sdi+0x90>

08007a66 <put_fat>:
{
 8007a66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007a6a:	2901      	cmp	r1, #1
 8007a6c:	f240 808b 	bls.w	8007b86 <put_fat+0x120>
 8007a70:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007a74:	428b      	cmp	r3, r1
 8007a76:	f240 8088 	bls.w	8007b8a <put_fat+0x124>
 8007a7a:	4616      	mov	r6, r2
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	4605      	mov	r5, r0
		switch (fs->fs_type) {
 8007a80:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d04d      	beq.n	8007b24 <put_fat+0xbe>
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d05f      	beq.n	8007b4c <put_fat+0xe6>
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d001      	beq.n	8007a94 <put_fat+0x2e>
			res = FR_INT_ERR;
 8007a90:	2702      	movs	r7, #2
 8007a92:	e07b      	b.n	8007b8c <put_fat+0x126>
			bc = (UINT)clst; bc += bc / 2;
 8007a94:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007a98:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007a9c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8007aa0:	f7ff fc2f 	bl	8007302 <move_window>
			if (res != FR_OK) break;
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d170      	bne.n	8007b8c <put_fat+0x126>
			p = &fs->win.d8[bc++ % SS(fs)];
 8007aaa:	f108 0901 	add.w	r9, r8, #1
 8007aae:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007ab2:	f014 0f01 	tst.w	r4, #1
 8007ab6:	d01d      	beq.n	8007af4 <put_fat+0x8e>
 8007ab8:	f815 3008 	ldrb.w	r3, [r5, r8]
 8007abc:	f003 030f 	and.w	r3, r3, #15
 8007ac0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8007ac4:	f805 3008 	strb.w	r3, [r5, r8]
			fs->wflag = 1;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ace:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
 8007ad2:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f7ff fc13 	bl	8007302 <move_window>
			if (res != FR_OK) break;
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d158      	bne.n	8007b92 <put_fat+0x12c>
			p = &fs->win.d8[bc % SS(fs)];
 8007ae0:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ae4:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8007ae8:	f805 6009 	strb.w	r6, [r5, r9]
			fs->wflag = 1;
 8007aec:	2301      	movs	r3, #1
 8007aee:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			break;
 8007af2:	e04b      	b.n	8007b8c <put_fat+0x126>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007af4:	f805 6008 	strb.w	r6, [r5, r8]
			fs->wflag = 1;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007afe:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
 8007b02:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8007b06:	4628      	mov	r0, r5
 8007b08:	f7ff fbfb 	bl	8007302 <move_window>
			if (res != FR_OK) break;
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d142      	bne.n	8007b96 <put_fat+0x130>
			p = &fs->win.d8[bc % SS(fs)];
 8007b10:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007b14:	f815 3009 	ldrb.w	r3, [r5, r9]
 8007b18:	f023 030f 	bic.w	r3, r3, #15
 8007b1c:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8007b20:	431e      	orrs	r6, r3
 8007b22:	e7e1      	b.n	8007ae8 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007b24:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007b28:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007b2c:	f7ff fbe9 	bl	8007302 <move_window>
			if (res != FR_OK) break;
 8007b30:	4607      	mov	r7, r0
 8007b32:	bb58      	cbnz	r0, 8007b8c <put_fat+0x126>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007b34:	0061      	lsls	r1, r4, #1
 8007b36:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8007b3a:	546e      	strb	r6, [r5, r1]
 8007b3c:	4429      	add	r1, r5
 8007b3e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8007b42:	704e      	strb	r6, [r1, #1]
			fs->wflag = 1;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			break;
 8007b4a:	e01f      	b.n	8007b8c <put_fat+0x126>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007b4c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8007b50:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007b54:	f7ff fbd5 	bl	8007302 <move_window>
			if (res != FR_OK) break;
 8007b58:	4607      	mov	r7, r0
 8007b5a:	b9b8      	cbnz	r0, 8007b8c <put_fat+0x126>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007b5c:	00a1      	lsls	r1, r4, #2
 8007b5e:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 8007b62:	186b      	adds	r3, r5, r1
			val |= LD_DWORD(p) & 0xF0000000;
 8007b64:	78da      	ldrb	r2, [r3, #3]
 8007b66:	0612      	lsls	r2, r2, #24
 8007b68:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007b6c:	4316      	orrs	r6, r2
			ST_DWORD(p, val);
 8007b6e:	546e      	strb	r6, [r5, r1]
 8007b70:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8007b74:	705a      	strb	r2, [r3, #1]
 8007b76:	0c32      	lsrs	r2, r6, #16
 8007b78:	709a      	strb	r2, [r3, #2]
 8007b7a:	0e36      	lsrs	r6, r6, #24
 8007b7c:	70de      	strb	r6, [r3, #3]
			fs->wflag = 1;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			break;
 8007b84:	e002      	b.n	8007b8c <put_fat+0x126>
		res = FR_INT_ERR;
 8007b86:	2702      	movs	r7, #2
 8007b88:	e000      	b.n	8007b8c <put_fat+0x126>
 8007b8a:	2702      	movs	r7, #2
}
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b92:	4607      	mov	r7, r0
 8007b94:	e7fa      	b.n	8007b8c <put_fat+0x126>
 8007b96:	4607      	mov	r7, r0
	return res;
 8007b98:	e7f8      	b.n	8007b8c <put_fat+0x126>

08007b9a <create_chain>:
{
 8007b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9c:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8007b9e:	460f      	mov	r7, r1
 8007ba0:	b949      	cbnz	r1, 8007bb6 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
 8007ba2:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007ba6:	b1a6      	cbz	r6, 8007bd2 <create_chain+0x38>
 8007ba8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007bac:	42b3      	cmp	r3, r6
 8007bae:	bf98      	it	ls
 8007bb0:	2601      	movls	r6, #1
	ncl = scl;				/* Start cluster */
 8007bb2:	4634      	mov	r4, r6
 8007bb4:	e01c      	b.n	8007bf0 <create_chain+0x56>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007bb6:	f7ff fe95 	bl	80078e4 <get_fat>
 8007bba:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* Invalid value */
 8007bbc:	2801      	cmp	r0, #1
 8007bbe:	d949      	bls.n	8007c54 <create_chain+0xba>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007bc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007bc4:	d04b      	beq.n	8007c5e <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007bc6:	f8d5 2214 	ldr.w	r2, [r5, #532]	; 0x214
 8007bca:	4282      	cmp	r2, r0
 8007bcc:	d847      	bhi.n	8007c5e <create_chain+0xc4>
		scl = clst;
 8007bce:	463e      	mov	r6, r7
 8007bd0:	e7ef      	b.n	8007bb2 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007bd2:	2601      	movs	r6, #1
 8007bd4:	e7ed      	b.n	8007bb2 <create_chain+0x18>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f7ff fe83 	bl	80078e4 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8007bde:	4603      	mov	r3, r0
 8007be0:	b178      	cbz	r0, 8007c02 <create_chain+0x68>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007be2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007be6:	d03a      	beq.n	8007c5e <create_chain+0xc4>
 8007be8:	2801      	cmp	r0, #1
 8007bea:	d038      	beq.n	8007c5e <create_chain+0xc4>
		if (ncl == scl) return 0;		/* No free cluster */
 8007bec:	42b4      	cmp	r4, r6
 8007bee:	d035      	beq.n	8007c5c <create_chain+0xc2>
		ncl++;							/* Next cluster */
 8007bf0:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007bf2:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007bf6:	42a3      	cmp	r3, r4
 8007bf8:	d8ed      	bhi.n	8007bd6 <create_chain+0x3c>
			if (ncl > scl) return 0;	/* No free cluster */
 8007bfa:	2e01      	cmp	r6, #1
 8007bfc:	d92c      	bls.n	8007c58 <create_chain+0xbe>
			ncl = 2;
 8007bfe:	2402      	movs	r4, #2
 8007c00:	e7e9      	b.n	8007bd6 <create_chain+0x3c>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007c02:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f7ff ff2c 	bl	8007a66 <put_fat>
	if (res == FR_OK && clst != 0) {
 8007c0e:	4603      	mov	r3, r0
 8007c10:	b9d0      	cbnz	r0, 8007c48 <create_chain+0xae>
 8007c12:	b98f      	cbnz	r7, 8007c38 <create_chain+0x9e>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007c14:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8007c18:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d01f      	beq.n	8007c62 <create_chain+0xc8>
			fs->free_clust--;
 8007c22:	3b01      	subs	r3, #1
 8007c24:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8007c28:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8007c2c:	f043 0301 	orr.w	r3, r3, #1
 8007c30:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8007c34:	4623      	mov	r3, r4
 8007c36:	e012      	b.n	8007c5e <create_chain+0xc4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007c38:	4622      	mov	r2, r4
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f7ff ff12 	bl	8007a66 <put_fat>
	if (res == FR_OK) {
 8007c42:	4603      	mov	r3, r0
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d0e5      	beq.n	8007c14 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	bf0c      	ite	eq
 8007c4c:	f04f 33ff 	moveq.w	r3, #4294967295
 8007c50:	2301      	movne	r3, #1
 8007c52:	e004      	b.n	8007c5e <create_chain+0xc4>
		if (cs < 2) return 1;			/* Invalid value */
 8007c54:	2301      	movs	r3, #1
 8007c56:	e002      	b.n	8007c5e <create_chain+0xc4>
			if (ncl > scl) return 0;	/* No free cluster */
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e000      	b.n	8007c5e <create_chain+0xc4>
		if (ncl == scl) return 0;		/* No free cluster */
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c62:	4623      	mov	r3, r4
 8007c64:	e7fb      	b.n	8007c5e <create_chain+0xc4>

08007c66 <dir_next>:
{
 8007c66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8007c6a:	88c5      	ldrh	r5, [r0, #6]
 8007c6c:	1c6b      	adds	r3, r5, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	2a00      	cmp	r2, #0
 8007c72:	d073      	beq.n	8007d5c <dir_next+0xf6>
 8007c74:	6902      	ldr	r2, [r0, #16]
 8007c76:	2a00      	cmp	r2, #0
 8007c78:	d072      	beq.n	8007d60 <dir_next+0xfa>
 8007c7a:	460f      	mov	r7, r1
 8007c7c:	4604      	mov	r4, r0
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007c7e:	f013 060f 	ands.w	r6, r3, #15
 8007c82:	d108      	bne.n	8007c96 <dir_next+0x30>
		dp->sect++;					/* Next sector */
 8007c84:	3201      	adds	r2, #1
 8007c86:	6102      	str	r2, [r0, #16]
		if (!dp->clust) {		/* Static table */
 8007c88:	68c1      	ldr	r1, [r0, #12]
 8007c8a:	b969      	cbnz	r1, 8007ca8 <dir_next+0x42>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007c8c:	6802      	ldr	r2, [r0, #0]
 8007c8e:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d966      	bls.n	8007d64 <dir_next+0xfe>
	dp->index = (WORD)i;	/* Current index */
 8007c96:	1c6b      	adds	r3, r5, #1
 8007c98:	80e3      	strh	r3, [r4, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8007ca0:	6163      	str	r3, [r4, #20]
	return FR_OK;
 8007ca2:	2000      	movs	r0, #0
}
 8007ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007ca8:	6800      	ldr	r0, [r0, #0]
 8007caa:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
 8007cae:	3a01      	subs	r2, #1
 8007cb0:	ea12 1813 	ands.w	r8, r2, r3, lsr #4
 8007cb4:	d1ef      	bne.n	8007c96 <dir_next+0x30>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007cb6:	f7ff fe15 	bl	80078e4 <get_fat>
 8007cba:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
 8007cbc:	2801      	cmp	r0, #1
 8007cbe:	d953      	bls.n	8007d68 <dir_next+0x102>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007cc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007cc4:	d052      	beq.n	8007d6c <dir_next+0x106>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007cc6:	6820      	ldr	r0, [r4, #0]
 8007cc8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007ccc:	454b      	cmp	r3, r9
 8007cce:	d83d      	bhi.n	8007d4c <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007cd0:	2f00      	cmp	r7, #0
 8007cd2:	d04d      	beq.n	8007d70 <dir_next+0x10a>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007cd4:	68e1      	ldr	r1, [r4, #12]
 8007cd6:	f7ff ff60 	bl	8007b9a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007cda:	4681      	mov	r9, r0
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d049      	beq.n	8007d74 <dir_next+0x10e>
					if (clst == 1) return FR_INT_ERR;
 8007ce0:	2801      	cmp	r0, #1
 8007ce2:	d049      	beq.n	8007d78 <dir_next+0x112>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007ce4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007ce8:	d048      	beq.n	8007d7c <dir_next+0x116>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007cea:	6820      	ldr	r0, [r4, #0]
 8007cec:	f7ff fad0 	bl	8007290 <sync_window>
 8007cf0:	b108      	cbz	r0, 8007cf6 <dir_next+0x90>
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	e7d6      	b.n	8007ca4 <dir_next+0x3e>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	f7ff f99d 	bl	800703c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007d02:	6827      	ldr	r7, [r4, #0]
 8007d04:	4649      	mov	r1, r9
 8007d06:	4638      	mov	r0, r7
 8007d08:	f7ff fdde 	bl	80078c8 <clust2sect>
 8007d0c:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	f893 2202 	ldrb.w	r2, [r3, #514]	; 0x202
 8007d16:	b19a      	cbz	r2, 8007d40 <dir_next+0xda>
						dp->fs->wflag = 1;
 8007d18:	2701      	movs	r7, #1
 8007d1a:	f883 7204 	strb.w	r7, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007d1e:	6820      	ldr	r0, [r4, #0]
 8007d20:	f7ff fab6 	bl	8007290 <sync_window>
 8007d24:	bb60      	cbnz	r0, 8007d80 <dir_next+0x11a>
						dp->fs->winsect++;
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007d32:	f108 0801 	add.w	r8, r8, #1
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	f893 2202 	ldrb.w	r2, [r3, #514]	; 0x202
 8007d3c:	4542      	cmp	r2, r8
 8007d3e:	d8ec      	bhi.n	8007d1a <dir_next+0xb4>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007d40:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007d44:	eba2 0208 	sub.w	r2, r2, r8
 8007d48:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 8007d4c:	f8c4 900c 	str.w	r9, [r4, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007d50:	4649      	mov	r1, r9
 8007d52:	6820      	ldr	r0, [r4, #0]
 8007d54:	f7ff fdb8 	bl	80078c8 <clust2sect>
 8007d58:	6120      	str	r0, [r4, #16]
 8007d5a:	e79c      	b.n	8007c96 <dir_next+0x30>
		return FR_NO_FILE;
 8007d5c:	2004      	movs	r0, #4
 8007d5e:	e7a1      	b.n	8007ca4 <dir_next+0x3e>
 8007d60:	2004      	movs	r0, #4
 8007d62:	e79f      	b.n	8007ca4 <dir_next+0x3e>
				return FR_NO_FILE;
 8007d64:	2004      	movs	r0, #4
 8007d66:	e79d      	b.n	8007ca4 <dir_next+0x3e>
				if (clst <= 1) return FR_INT_ERR;
 8007d68:	2002      	movs	r0, #2
 8007d6a:	e79b      	b.n	8007ca4 <dir_next+0x3e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007d6c:	2001      	movs	r0, #1
 8007d6e:	e799      	b.n	8007ca4 <dir_next+0x3e>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007d70:	2004      	movs	r0, #4
 8007d72:	e797      	b.n	8007ca4 <dir_next+0x3e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d74:	2007      	movs	r0, #7
 8007d76:	e795      	b.n	8007ca4 <dir_next+0x3e>
					if (clst == 1) return FR_INT_ERR;
 8007d78:	2002      	movs	r0, #2
 8007d7a:	e793      	b.n	8007ca4 <dir_next+0x3e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	e791      	b.n	8007ca4 <dir_next+0x3e>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007d80:	2001      	movs	r0, #1
 8007d82:	e78f      	b.n	8007ca4 <dir_next+0x3e>

08007d84 <follow_path>:
{
 8007d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	4605      	mov	r5, r0
 8007d8a:	460c      	mov	r4, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007d8c:	780b      	ldrb	r3, [r1, #0]
 8007d8e:	2b2f      	cmp	r3, #47	; 0x2f
 8007d90:	d001      	beq.n	8007d96 <follow_path+0x12>
 8007d92:	2b5c      	cmp	r3, #92	; 0x5c
 8007d94:	d100      	bne.n	8007d98 <follow_path+0x14>
		path++;
 8007d96:	3401      	adds	r4, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60ab      	str	r3, [r5, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d9c:	7823      	ldrb	r3, [r4, #0]
 8007d9e:	2b1f      	cmp	r3, #31
 8007da0:	d904      	bls.n	8007dac <follow_path+0x28>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007da2:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8007f74 <follow_path+0x1f0>
			i = 8; ni = 11;
 8007da6:	230b      	movs	r3, #11
 8007da8:	469b      	mov	fp, r3
 8007daa:	e051      	b.n	8007e50 <follow_path+0xcc>
		res = dir_sdi(dp, 0);
 8007dac:	2100      	movs	r1, #0
 8007dae:	4628      	mov	r0, r5
 8007db0:	f7ff fe06 	bl	80079c0 <dir_sdi>
 8007db4:	4681      	mov	r9, r0
		dp->dir = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	616b      	str	r3, [r5, #20]
 8007dba:	e0cb      	b.n	8007f54 <follow_path+0x1d0>
			b |= 3;						/* Eliminate NT flag */
 8007dbc:	f04e 0e03 	orr.w	lr, lr, #3
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007dc0:	3b80      	subs	r3, #128	; 0x80
 8007dc2:	f818 3003 	ldrb.w	r3, [r8, r3]
 8007dc6:	e069      	b.n	8007e9c <follow_path+0x118>
				return FR_INVALID_NAME;
 8007dc8:	f04f 0906 	mov.w	r9, #6
 8007dcc:	e0c2      	b.n	8007f54 <follow_path+0x1d0>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f040 8086 	bne.w	8007ee0 <follow_path+0x15c>
				if (IsLower(c)) {		/* ASCII small capital? */
 8007dd4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	2a19      	cmp	r2, #25
 8007ddc:	d86f      	bhi.n	8007ebe <follow_path+0x13a>
					b |= 1; c -= 0x20;
 8007dde:	f04e 0e01 	orr.w	lr, lr, #1
 8007de2:	3b20      	subs	r3, #32
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	e06a      	b.n	8007ebe <follow_path+0x13a>
		res = dir_next(dp, 0);		/* Next entry */
 8007de8:	4639      	mov	r1, r7
 8007dea:	4628      	mov	r0, r5
 8007dec:	f7ff ff3b 	bl	8007c66 <dir_next>
	} while (res == FR_OK);
 8007df0:	4681      	mov	r9, r0
 8007df2:	2800      	cmp	r0, #0
 8007df4:	f040 80a9 	bne.w	8007f4a <follow_path+0x1c6>
		res = move_window(dp->fs, dp->sect);
 8007df8:	6929      	ldr	r1, [r5, #16]
 8007dfa:	6828      	ldr	r0, [r5, #0]
 8007dfc:	f7ff fa81 	bl	8007302 <move_window>
		if (res != FR_OK) break;
 8007e00:	4681      	mov	r9, r0
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f040 80a1 	bne.w	8007f4a <follow_path+0x1c6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007e08:	6969      	ldr	r1, [r5, #20]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007e0a:	780b      	ldrb	r3, [r1, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d059      	beq.n	8007ec4 <follow_path+0x140>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007e10:	f891 e00b 	ldrb.w	lr, [r1, #11]
 8007e14:	f01e 0f08 	tst.w	lr, #8
 8007e18:	d1e6      	bne.n	8007de8 <follow_path+0x64>
 8007e1a:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8007e1e:	f101 0c0b 	add.w	ip, r1, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007e22:	4652      	mov	r2, sl
 8007e24:	460b      	mov	r3, r1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8007e26:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e2a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8007e2e:	4286      	cmp	r6, r0
 8007e30:	d1da      	bne.n	8007de8 <follow_path+0x64>
 8007e32:	4563      	cmp	r3, ip
 8007e34:	d1f7      	bne.n	8007e26 <follow_path+0xa2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e36:	f89a 300b 	ldrb.w	r3, [sl, #11]
 8007e3a:	f013 0f04 	tst.w	r3, #4
 8007e3e:	f040 8089 	bne.w	8007f54 <follow_path+0x1d0>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007e42:	f01e 0f10 	tst.w	lr, #16
 8007e46:	d051      	beq.n	8007eec <follow_path+0x168>
			dp->sclust = ld_clust(dp->fs, dir);
 8007e48:	6828      	ldr	r0, [r5, #0]
 8007e4a:	f7ff f9e5 	bl	8007218 <ld_clust>
 8007e4e:	60a8      	str	r0, [r5, #8]
 8007e50:	4626      	mov	r6, r4
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007e52:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e56:	2b2f      	cmp	r3, #47	; 0x2f
 8007e58:	d0fa      	beq.n	8007e50 <follow_path+0xcc>
 8007e5a:	2b5c      	cmp	r3, #92	; 0x5c
 8007e5c:	d0f8      	beq.n	8007e50 <follow_path+0xcc>
	sfn = dp->fn;
 8007e5e:	69af      	ldr	r7, [r5, #24]
	mem_set(sfn, ' ', 11);
 8007e60:	220b      	movs	r2, #11
 8007e62:	2120      	movs	r1, #32
 8007e64:	4638      	mov	r0, r7
 8007e66:	f7ff f8e9 	bl	800703c <mem_set>
 8007e6a:	f106 3cff 	add.w	ip, r6, #4294967295
	si = i = b = 0; ni = 8;
 8007e6e:	2000      	movs	r0, #0
 8007e70:	4604      	mov	r4, r0
 8007e72:	f04f 0908 	mov.w	r9, #8
 8007e76:	4686      	mov	lr, r0
	while (*str && *str != chr) str++;
 8007e78:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
		c = (BYTE)p[si++];
 8007e7c:	3401      	adds	r4, #1
 8007e7e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d938      	bls.n	8007ef8 <follow_path+0x174>
 8007e86:	2b2f      	cmp	r3, #47	; 0x2f
 8007e88:	d039      	beq.n	8007efe <follow_path+0x17a>
 8007e8a:	2b5c      	cmp	r3, #92	; 0x5c
 8007e8c:	d037      	beq.n	8007efe <follow_path+0x17a>
		if (c == '.' || i >= ni) {
 8007e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e90:	d063      	beq.n	8007f5a <follow_path+0x1d6>
 8007e92:	4581      	cmp	r9, r0
 8007e94:	d921      	bls.n	8007eda <follow_path+0x156>
		if (c >= 0x80) {				/* Extended character? */
 8007e96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e9a:	d18f      	bne.n	8007dbc <follow_path+0x38>
	while (*str && *str != chr) str++;
 8007e9c:	2b22      	cmp	r3, #34	; 0x22
 8007e9e:	d093      	beq.n	8007dc8 <follow_path+0x44>
 8007ea0:	4652      	mov	r2, sl
 8007ea2:	4933      	ldr	r1, [pc, #204]	; (8007f70 <follow_path+0x1ec>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d092      	beq.n	8007dce <follow_path+0x4a>
 8007ea8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007eac:	2a00      	cmp	r2, #0
 8007eae:	d1f9      	bne.n	8007ea4 <follow_path+0x120>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007eb0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	2a19      	cmp	r2, #25
 8007eb8:	d88c      	bhi.n	8007dd4 <follow_path+0x50>
				b |= 2;
 8007eba:	f04e 0e02 	orr.w	lr, lr, #2
			sfn[i++] = c;
 8007ebe:	543b      	strb	r3, [r7, r0]
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	e7db      	b.n	8007e7c <follow_path+0xf8>
			ns = dp->fn[NSFLAG];
 8007ec4:	69ab      	ldr	r3, [r5, #24]
 8007ec6:	7adb      	ldrb	r3, [r3, #11]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	bf14      	ite	ne
 8007ed0:	f04f 0904 	movne.w	r9, #4
 8007ed4:	f04f 0905 	moveq.w	r9, #5
 8007ed8:	e03c      	b.n	8007f54 <follow_path+0x1d0>
		if (c == '.' || i >= ni) {
 8007eda:	f04f 0906 	mov.w	r9, #6
 8007ede:	e039      	b.n	8007f54 <follow_path+0x1d0>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007ee0:	f04f 0906 	mov.w	r9, #6
 8007ee4:	e036      	b.n	8007f54 <follow_path+0x1d0>
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8007ee6:	f04f 0906 	mov.w	r9, #6
 8007eea:	e033      	b.n	8007f54 <follow_path+0x1d0>
				res = FR_NO_PATH; break;
 8007eec:	f04f 0905 	mov.w	r9, #5
 8007ef0:	e030      	b.n	8007f54 <follow_path+0x1d0>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007ef2:	f04f 0906 	mov.w	r9, #6
 8007ef6:	e02d      	b.n	8007f54 <follow_path+0x1d0>
	*path = &p[si];						/* Return pointer to the next segment */
 8007ef8:	4434      	add	r4, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007efa:	2304      	movs	r3, #4
 8007efc:	e001      	b.n	8007f02 <follow_path+0x17e>
	*path = &p[si];						/* Return pointer to the next segment */
 8007efe:	4434      	add	r4, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007f00:	2300      	movs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0ef      	beq.n	8007ee6 <follow_path+0x162>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8007f06:	783a      	ldrb	r2, [r7, #0]
 8007f08:	2ae5      	cmp	r2, #229	; 0xe5
 8007f0a:	bf04      	itt	eq
 8007f0c:	2205      	moveq	r2, #5
 8007f0e:	703a      	strbeq	r2, [r7, #0]
	if (ni == 8) b <<= 2;
 8007f10:	f1b9 0f08 	cmp.w	r9, #8
 8007f14:	bf04      	itt	eq
 8007f16:	ea4f 0e8e 	moveq.w	lr, lr, lsl #2
 8007f1a:	fa5f fe8e 	uxtbeq.w	lr, lr
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8007f1e:	f00e 0203 	and.w	r2, lr, #3
 8007f22:	2a01      	cmp	r2, #1
 8007f24:	bf08      	it	eq
 8007f26:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007f2a:	f00e 0e0c 	and.w	lr, lr, #12
 8007f2e:	f1be 0f04 	cmp.w	lr, #4
 8007f32:	bf08      	it	eq
 8007f34:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007f38:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f7ff fd3f 	bl	80079c0 <dir_sdi>
	if (res != FR_OK) return res;
 8007f42:	4681      	mov	r9, r0
 8007f44:	b908      	cbnz	r0, 8007f4a <follow_path+0x1c6>
		res = dir_next(dp, 0);		/* Next entry */
 8007f46:	2700      	movs	r7, #0
 8007f48:	e756      	b.n	8007df8 <follow_path+0x74>
			ns = dp->fn[NSFLAG];
 8007f4a:	69ab      	ldr	r3, [r5, #24]
 8007f4c:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f4e:	f1b9 0f04 	cmp.w	r9, #4
 8007f52:	d0b9      	beq.n	8007ec8 <follow_path+0x144>
}
 8007f54:	4648      	mov	r0, r9
 8007f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007f5a:	f1b9 0f08 	cmp.w	r9, #8
 8007f5e:	d1c8      	bne.n	8007ef2 <follow_path+0x16e>
			b <<= 2; continue;
 8007f60:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8007f64:	fa5f fe8e 	uxtb.w	lr, lr
			i = 8; ni = 11;
 8007f68:	4648      	mov	r0, r9
 8007f6a:	46d9      	mov	r9, fp
 8007f6c:	e786      	b.n	8007e7c <follow_path+0xf8>
 8007f6e:	bf00      	nop
 8007f70:	0800b12d 	.word	0x0800b12d
 8007f74:	0800b0ac 	.word	0x0800b0ac

08007f78 <dir_register>:
{
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	f7ff fd1f 	bl	80079c0 <dir_sdi>
	if (res == FR_OK) {
 8007f82:	bb50      	cbnz	r0, 8007fda <dir_register+0x62>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007f84:	2601      	movs	r6, #1
 8007f86:	e005      	b.n	8007f94 <dir_register+0x1c>
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff fe6b 	bl	8007c66 <dir_next>
		} while (res == FR_OK);
 8007f90:	4605      	mov	r5, r0
 8007f92:	bb38      	cbnz	r0, 8007fe4 <dir_register+0x6c>
			res = move_window(dp->fs, dp->sect);
 8007f94:	6921      	ldr	r1, [r4, #16]
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	f7ff f9b3 	bl	8007302 <move_window>
			if (res != FR_OK) break;
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	bb08      	cbnz	r0, 8007fe4 <dir_register+0x6c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007fa0:	6963      	ldr	r3, [r4, #20]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2be5      	cmp	r3, #229	; 0xe5
 8007fa6:	d001      	beq.n	8007fac <dir_register+0x34>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1ed      	bne.n	8007f88 <dir_register+0x10>
		res = move_window(dp->fs, dp->sect);
 8007fac:	6921      	ldr	r1, [r4, #16]
 8007fae:	6820      	ldr	r0, [r4, #0]
 8007fb0:	f7ff f9a7 	bl	8007302 <move_window>
		if (res == FR_OK) {
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	b108      	cbz	r0, 8007fbc <dir_register+0x44>
}
 8007fb8:	4628      	mov	r0, r5
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	6960      	ldr	r0, [r4, #20]
 8007fc2:	f7ff f83b 	bl	800703c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007fc6:	220b      	movs	r2, #11
 8007fc8:	69a1      	ldr	r1, [r4, #24]
 8007fca:	6960      	ldr	r0, [r4, #20]
 8007fcc:	f7ff f82c 	bl	8007028 <mem_cpy>
			dp->fs->wflag = 1;
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8007fd8:	e7ee      	b.n	8007fb8 <dir_register+0x40>
 8007fda:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007fdc:	2804      	cmp	r0, #4
 8007fde:	d1eb      	bne.n	8007fb8 <dir_register+0x40>
 8007fe0:	2507      	movs	r5, #7
 8007fe2:	e7e9      	b.n	8007fb8 <dir_register+0x40>
 8007fe4:	2d04      	cmp	r5, #4
 8007fe6:	d0fb      	beq.n	8007fe0 <dir_register+0x68>
 8007fe8:	e7e6      	b.n	8007fb8 <dir_register+0x40>

08007fea <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007fea:	2901      	cmp	r1, #1
 8007fec:	d92e      	bls.n	800804c <remove_chain+0x62>
{
 8007fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007ff4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007ff8:	428b      	cmp	r3, r1
 8007ffa:	d92a      	bls.n	8008052 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007ffc:	2700      	movs	r7, #0
 8007ffe:	e00d      	b.n	800801c <remove_chain+0x32>
				fs->free_clust++;
 8008000:	3301      	adds	r3, #1
 8008002:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 8008006:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
 8008012:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008014:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008018:	42ab      	cmp	r3, r5
 800801a:	d91b      	bls.n	8008054 <remove_chain+0x6a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800801c:	4631      	mov	r1, r6
 800801e:	4620      	mov	r0, r4
 8008020:	f7ff fc60 	bl	80078e4 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8008024:	4605      	mov	r5, r0
 8008026:	b1b8      	cbz	r0, 8008058 <remove_chain+0x6e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008028:	2801      	cmp	r0, #1
 800802a:	d017      	beq.n	800805c <remove_chain+0x72>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800802c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008030:	d016      	beq.n	8008060 <remove_chain+0x76>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8008032:	463a      	mov	r2, r7
 8008034:	4631      	mov	r1, r6
 8008036:	4620      	mov	r0, r4
 8008038:	f7ff fd15 	bl	8007a66 <put_fat>
			if (res != FR_OK) break;
 800803c:	4602      	mov	r2, r0
 800803e:	b948      	cbnz	r0, 8008054 <remove_chain+0x6a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008040:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008048:	d1da      	bne.n	8008000 <remove_chain+0x16>
 800804a:	e7e2      	b.n	8008012 <remove_chain+0x28>
		res = FR_INT_ERR;
 800804c:	2202      	movs	r2, #2
}
 800804e:	4610      	mov	r0, r2
 8008050:	4770      	bx	lr
		res = FR_INT_ERR;
 8008052:	2202      	movs	r2, #2
}
 8008054:	4610      	mov	r0, r2
 8008056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008058:	2200      	movs	r2, #0
 800805a:	e7fb      	b.n	8008054 <remove_chain+0x6a>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800805c:	2202      	movs	r2, #2
 800805e:	e7f9      	b.n	8008054 <remove_chain+0x6a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008060:	2201      	movs	r2, #1
 8008062:	e7f7      	b.n	8008054 <remove_chain+0x6a>

08008064 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008064:	b510      	push	{r4, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	9001      	str	r0, [sp, #4]
 800806a:	9100      	str	r1, [sp, #0]
 800806c:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800806e:	a804      	add	r0, sp, #16
 8008070:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
 8008074:	f7ff f8e1 	bl	800723a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008078:	1e02      	subs	r2, r0, #0
 800807a:	db29      	blt.n	80080d0 <f_mount+0x6c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800807c:	4b18      	ldr	r3, [pc, #96]	; (80080e0 <f_mount+0x7c>)
 800807e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]

	if (cfs) {
 8008082:	b153      	cbz	r3, 800809a <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008084:	4917      	ldr	r1, [pc, #92]	; (80080e4 <f_mount+0x80>)
 8008086:	6809      	ldr	r1, [r1, #0]
 8008088:	428b      	cmp	r3, r1
 800808a:	d013      	beq.n	80080b4 <f_mount+0x50>
 800808c:	4915      	ldr	r1, [pc, #84]	; (80080e4 <f_mount+0x80>)
 800808e:	68c9      	ldr	r1, [r1, #12]
 8008090:	428b      	cmp	r3, r1
 8008092:	d013      	beq.n	80080bc <f_mount+0x58>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008094:	2100      	movs	r1, #0
 8008096:	f883 1200 	strb.w	r1, [r3, #512]	; 0x200
	}

	if (fs) {
 800809a:	9b01      	ldr	r3, [sp, #4]
 800809c:	b1d3      	cbz	r3, 80080d4 <f_mount+0x70>
		fs->fs_type = 0;				/* Clear new fs object */
 800809e:	2100      	movs	r1, #0
 80080a0:	f883 1200 	strb.w	r1, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80080a4:	490e      	ldr	r1, [pc, #56]	; (80080e0 <f_mount+0x7c>)
 80080a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80080aa:	2c01      	cmp	r4, #1
 80080ac:	d00a      	beq.n	80080c4 <f_mount+0x60>
 80080ae:	2000      	movs	r0, #0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80080b0:	b004      	add	sp, #16
 80080b2:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80080b4:	490b      	ldr	r1, [pc, #44]	; (80080e4 <f_mount+0x80>)
 80080b6:	2000      	movs	r0, #0
 80080b8:	6008      	str	r0, [r1, #0]
 80080ba:	e7e7      	b.n	800808c <f_mount+0x28>
 80080bc:	4909      	ldr	r1, [pc, #36]	; (80080e4 <f_mount+0x80>)
 80080be:	2000      	movs	r0, #0
 80080c0:	60c8      	str	r0, [r1, #12]
 80080c2:	e7e7      	b.n	8008094 <f_mount+0x30>
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80080c4:	2200      	movs	r2, #0
 80080c6:	4669      	mov	r1, sp
 80080c8:	a801      	add	r0, sp, #4
 80080ca:	f7ff f99f 	bl	800740c <find_volume>
	LEAVE_FF(fs, res);
 80080ce:	e7ef      	b.n	80080b0 <f_mount+0x4c>
	if (vol < 0) return FR_INVALID_DRIVE;
 80080d0:	200b      	movs	r0, #11
 80080d2:	e7ed      	b.n	80080b0 <f_mount+0x4c>
	FatFs[vol] = fs;					/* Register new fs object */
 80080d4:	2000      	movs	r0, #0
 80080d6:	4b02      	ldr	r3, [pc, #8]	; (80080e0 <f_mount+0x7c>)
 80080d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80080dc:	e7e8      	b.n	80080b0 <f_mount+0x4c>
 80080de:	bf00      	nop
 80080e0:	200009b4 	.word	0x200009b4
 80080e4:	200009b8 	.word	0x200009b8

080080e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80080e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ec:	b08e      	sub	sp, #56	; 0x38
 80080ee:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80080f0:	2800      	cmp	r0, #0
 80080f2:	f000 80c1 	beq.w	8008278 <f_open+0x190>
 80080f6:	4604      	mov	r4, r0
 80080f8:	4615      	mov	r5, r2
	fp->fs = 0;			/* Clear file object */
 80080fa:	2300      	movs	r3, #0
 80080fc:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80080fe:	f002 021e 	and.w	r2, r2, #30
 8008102:	a901      	add	r1, sp, #4
 8008104:	a805      	add	r0, sp, #20
 8008106:	f7ff f981 	bl	800740c <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800810a:	4606      	mov	r6, r0
 800810c:	b118      	cbz	r0, 8008116 <f_open+0x2e>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800810e:	4630      	mov	r0, r6
 8008110:	b00e      	add	sp, #56	; 0x38
 8008112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008116:	f005 081f 	and.w	r8, r5, #31
		INIT_BUF(dj);
 800811a:	ab02      	add	r3, sp, #8
 800811c:	930b      	str	r3, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
 800811e:	9901      	ldr	r1, [sp, #4]
 8008120:	a805      	add	r0, sp, #20
 8008122:	f7ff fe2f 	bl	8007d84 <follow_path>
		dir = dj.dir;
 8008126:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		if (res == FR_OK) {
 8008128:	4603      	mov	r3, r0
 800812a:	2800      	cmp	r0, #0
 800812c:	f040 80a8 	bne.w	8008280 <f_open+0x198>
			if (!dir)	/* Default directory itself */
 8008130:	2f00      	cmp	r7, #0
 8008132:	f000 80ad 	beq.w	8008290 <f_open+0x1a8>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008136:	f038 0301 	bics.w	r3, r8, #1
 800813a:	bf14      	ite	ne
 800813c:	2101      	movne	r1, #1
 800813e:	2100      	moveq	r1, #0
 8008140:	a805      	add	r0, sp, #20
 8008142:	f7fe ff83 	bl	800704c <chk_lock>
 8008146:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008148:	f015 0f1c 	tst.w	r5, #28
 800814c:	d054      	beq.n	80081f8 <f_open+0x110>
			if (res != FR_OK) {					/* No file, create new */
 800814e:	b948      	cbnz	r0, 8008164 <f_open+0x7c>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008150:	7afb      	ldrb	r3, [r7, #11]
 8008152:	f013 0f11 	tst.w	r3, #17
 8008156:	f040 80a5 	bne.w	80082a4 <f_open+0x1bc>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800815a:	f015 0f04 	tst.w	r5, #4
 800815e:	d007      	beq.n	8008170 <f_open+0x88>
						res = FR_EXIST;
 8008160:	2608      	movs	r6, #8
 8008162:	e7d4      	b.n	800810e <f_open+0x26>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008164:	2b04      	cmp	r3, #4
 8008166:	d02e      	beq.n	80081c6 <f_open+0xde>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008168:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
 800816c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800816e:	bbbb      	cbnz	r3, 80081e0 <f_open+0xf8>
 8008170:	f018 0f08 	tst.w	r8, #8
 8008174:	d051      	beq.n	800821a <f_open+0x132>
				dw = GET_FATTIME();				/* Created time */
 8008176:	f7fe fefd 	bl	8006f74 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800817a:	73b8      	strb	r0, [r7, #14]
 800817c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008180:	73fb      	strb	r3, [r7, #15]
 8008182:	0c03      	lsrs	r3, r0, #16
 8008184:	743b      	strb	r3, [r7, #16]
 8008186:	0e00      	lsrs	r0, r0, #24
 8008188:	7478      	strb	r0, [r7, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800818a:	2500      	movs	r5, #0
 800818c:	72fd      	strb	r5, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800818e:	773d      	strb	r5, [r7, #28]
 8008190:	777d      	strb	r5, [r7, #29]
 8008192:	77bd      	strb	r5, [r7, #30]
 8008194:	77fd      	strb	r5, [r7, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008196:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800819a:	4639      	mov	r1, r7
 800819c:	4648      	mov	r0, r9
 800819e:	f7ff f83b 	bl	8007218 <ld_clust>
	ST_WORD(dir + DIR_FstClusLO, cl);
 80081a2:	76bd      	strb	r5, [r7, #26]
 80081a4:	76fd      	strb	r5, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80081a6:	753d      	strb	r5, [r7, #20]
 80081a8:	757d      	strb	r5, [r7, #21]
				dj.fs->wflag = 1;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f889 3204 	strb.w	r3, [r9, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80081b0:	4605      	mov	r5, r0
 80081b2:	b380      	cbz	r0, 8008216 <f_open+0x12e>
					dw = dj.fs->winsect;
 80081b4:	f8d9 a22c 	ldr.w	sl, [r9, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 80081b8:	4601      	mov	r1, r0
 80081ba:	4648      	mov	r0, r9
 80081bc:	f7ff ff15 	bl	8007fea <remove_chain>
					if (res == FR_OK) {
 80081c0:	b180      	cbz	r0, 80081e4 <f_open+0xfc>
					res = remove_chain(dj.fs, cl);
 80081c2:	4606      	mov	r6, r0
 80081c4:	e7a3      	b.n	800810e <f_open+0x26>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80081c6:	4b3b      	ldr	r3, [pc, #236]	; (80082b4 <f_open+0x1cc>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	b123      	cbz	r3, 80081d6 <f_open+0xee>
 80081cc:	4b39      	ldr	r3, [pc, #228]	; (80082b4 <f_open+0x1cc>)
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	b10b      	cbz	r3, 80081d6 <f_open+0xee>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80081d2:	2312      	movs	r3, #18
 80081d4:	e7c8      	b.n	8008168 <f_open+0x80>
 80081d6:	a805      	add	r0, sp, #20
 80081d8:	f7ff fece 	bl	8007f78 <dir_register>
 80081dc:	4603      	mov	r3, r0
 80081de:	e7c3      	b.n	8008168 <f_open+0x80>
 80081e0:	461e      	mov	r6, r3
 80081e2:	e794      	b.n	800810e <f_open+0x26>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80081e4:	9805      	ldr	r0, [sp, #20]
 80081e6:	3d01      	subs	r5, #1
 80081e8:	f8c0 520c 	str.w	r5, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80081ec:	4651      	mov	r1, sl
 80081ee:	f7ff f888 	bl	8007302 <move_window>
		if (res == FR_OK) {
 80081f2:	b180      	cbz	r0, 8008216 <f_open+0x12e>
						res = move_window(dj.fs, dw);
 80081f4:	4606      	mov	r6, r0
 80081f6:	e78a      	b.n	800810e <f_open+0x26>
			if (res == FR_OK) {					/* Follow succeeded */
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d155      	bne.n	80082a8 <f_open+0x1c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	f013 0f10 	tst.w	r3, #16
 8008202:	d153      	bne.n	80082ac <f_open+0x1c4>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008204:	f015 0f02 	tst.w	r5, #2
 8008208:	d002      	beq.n	8008210 <f_open+0x128>
 800820a:	f013 0f01 	tst.w	r3, #1
 800820e:	d14f      	bne.n	80082b0 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008210:	f015 0f08 	tst.w	r5, #8
 8008214:	d001      	beq.n	800821a <f_open+0x132>
				mode |= FA__WRITTEN;
 8008216:	f048 0820 	orr.w	r8, r8, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800821a:	a80e      	add	r0, sp, #56	; 0x38
 800821c:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 8008220:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8008224:	61e3      	str	r3, [r4, #28]
			fp->dir_ptr = dir;
 8008226:	6227      	str	r7, [r4, #32]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008228:	f038 0301 	bics.w	r3, r8, #1
 800822c:	bf14      	ite	ne
 800822e:	2101      	movne	r1, #1
 8008230:	2100      	moveq	r1, #0
 8008232:	f7fe ff53 	bl	80070dc <inc_lock>
 8008236:	62a0      	str	r0, [r4, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008238:	b300      	cbz	r0, 800827c <f_open+0x194>
			fp->flag = mode;					/* File access mode */
 800823a:	f884 8006 	strb.w	r8, [r4, #6]
			fp->err = 0;						/* Clear error flag */
 800823e:	2500      	movs	r5, #0
 8008240:	71e5      	strb	r5, [r4, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008242:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008246:	4639      	mov	r1, r7
 8008248:	4640      	mov	r0, r8
 800824a:	f7fe ffe5 	bl	8007218 <ld_clust>
 800824e:	6120      	str	r0, [r4, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008250:	7ffa      	ldrb	r2, [r7, #31]
 8008252:	7fbb      	ldrb	r3, [r7, #30]
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800825a:	7f3a      	ldrb	r2, [r7, #28]
 800825c:	4313      	orrs	r3, r2
 800825e:	7f7a      	ldrb	r2, [r7, #29]
 8008260:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008264:	60e3      	str	r3, [r4, #12]
			fp->fptr = 0;						/* File pointer */
 8008266:	60a5      	str	r5, [r4, #8]
			fp->dsect = 0;
 8008268:	61a5      	str	r5, [r4, #24]
			fp->cltbl = 0;						/* Normal seek mode */
 800826a:	6265      	str	r5, [r4, #36]	; 0x24
			fp->fs = dj.fs;	 					/* Validate file object */
 800826c:	f8c4 8000 	str.w	r8, [r4]
			fp->id = fp->fs->id;
 8008270:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
 8008274:	80a3      	strh	r3, [r4, #4]
 8008276:	e74a      	b.n	800810e <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 8008278:	2609      	movs	r6, #9
 800827a:	e748      	b.n	800810e <f_open+0x26>
			if (!fp->lockid) res = FR_INT_ERR;
 800827c:	2602      	movs	r6, #2
 800827e:	e746      	b.n	800810e <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008280:	f015 0f1c 	tst.w	r5, #28
 8008284:	f47f af6e 	bne.w	8008164 <f_open+0x7c>
		if (res == FR_OK) {
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0d6      	beq.n	800823a <f_open+0x152>
 800828c:	461e      	mov	r6, r3
 800828e:	e73e      	b.n	800810e <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008290:	f015 0f1c 	tst.w	r5, #28
 8008294:	d101      	bne.n	800829a <f_open+0x1b2>
				res = FR_INVALID_NAME;
 8008296:	2306      	movs	r3, #6
 8008298:	e7f6      	b.n	8008288 <f_open+0x1a0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800829a:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
 800829e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				res = FR_INVALID_NAME;
 80082a0:	2306      	movs	r3, #6
 80082a2:	e7f1      	b.n	8008288 <f_open+0x1a0>
					res = FR_DENIED;
 80082a4:	2607      	movs	r6, #7
 80082a6:	e732      	b.n	800810e <f_open+0x26>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082a8:	4606      	mov	r6, r0
 80082aa:	e730      	b.n	800810e <f_open+0x26>
					res = FR_NO_FILE;
 80082ac:	2604      	movs	r6, #4
 80082ae:	e72e      	b.n	800810e <f_open+0x26>
						res = FR_DENIED;
 80082b0:	2607      	movs	r6, #7
 80082b2:	e72c      	b.n	800810e <f_open+0x26>
 80082b4:	200009b8 	.word	0x200009b8

080082b8 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	b083      	sub	sp, #12
 80082be:	4604      	mov	r4, r0
 80082c0:	4689      	mov	r9, r1
 80082c2:	4615      	mov	r5, r2
 80082c4:	4698      	mov	r8, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80082c6:	2300      	movs	r3, #0
 80082c8:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp);							/* Check validity */
 80082cc:	f7ff f87e 	bl	80073cc <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80082d0:	9001      	str	r0, [sp, #4]
 80082d2:	2800      	cmp	r0, #0
 80082d4:	f040 80a9 	bne.w	800842a <f_read+0x172>
	if (fp->err)								/* Check error */
 80082d8:	79e3      	ldrb	r3, [r4, #7]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f040 80a4 	bne.w	8008428 <f_read+0x170>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80082e0:	79a3      	ldrb	r3, [r4, #6]
 80082e2:	f013 0f01 	tst.w	r3, #1
 80082e6:	f000 80a4 	beq.w	8008432 <f_read+0x17a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 80082ea:	68e6      	ldr	r6, [r4, #12]
 80082ec:	68a3      	ldr	r3, [r4, #8]
 80082ee:	1af6      	subs	r6, r6, r3
 80082f0:	42ae      	cmp	r6, r5
 80082f2:	bf28      	it	cs
 80082f4:	462e      	movcs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 80082f6:	2e00      	cmp	r6, #0
 80082f8:	d156      	bne.n	80083a8 <f_read+0xf0>
 80082fa:	e096      	b.n	800842a <f_read+0x172>
			if (!csect) {						/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->sclust;			/* Follow from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80082fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082fe:	b11b      	cbz	r3, 8008308 <f_read+0x50>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008300:	4620      	mov	r0, r4
 8008302:	f7fe ff73 	bl	80071ec <clmt_clust>
 8008306:	e060      	b.n	80083ca <f_read+0x112>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8008308:	6961      	ldr	r1, [r4, #20]
 800830a:	f7ff faeb 	bl	80078e4 <get_fat>
 800830e:	e05c      	b.n	80083ca <f_read+0x112>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8008310:	f04f 0a02 	mov.w	sl, #2
 8008314:	f884 a007 	strb.w	sl, [r4, #7]
 8008318:	f8cd a004 	str.w	sl, [sp, #4]
 800831c:	e085      	b.n	800842a <f_read+0x172>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800831e:	f04f 0a01 	mov.w	sl, #1
 8008322:	f884 a007 	strb.w	sl, [r4, #7]
 8008326:	f8cd a004 	str.w	sl, [sp, #4]
 800832a:	e07e      	b.n	800842a <f_read+0x172>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800832c:	f04f 0a02 	mov.w	sl, #2
 8008330:	f884 a007 	strb.w	sl, [r4, #7]
 8008334:	f8cd a004 	str.w	sl, [sp, #4]
 8008338:	e077      	b.n	800842a <f_read+0x172>
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 800833a:	6821      	ldr	r1, [r4, #0]
 800833c:	f891 3204 	ldrb.w	r3, [r1, #516]	; 0x204
 8008340:	b12b      	cbz	r3, 800834e <f_read+0x96>
 8008342:	f8d1 022c 	ldr.w	r0, [r1, #556]	; 0x22c
 8008346:	eba0 000a 	sub.w	r0, r0, sl
 800834a:	42a8      	cmp	r0, r5
 800834c:	d301      	bcc.n	8008352 <f_read+0x9a>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800834e:	026d      	lsls	r5, r5, #9
				continue;
 8008350:	e01f      	b.n	8008392 <f_read+0xda>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 8008352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008356:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 800835a:	f7fe fe65 	bl	8007028 <mem_cpy>
 800835e:	e7f6      	b.n	800834e <f_read+0x96>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8008360:	f8c4 a018 	str.w	sl, [r4, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8008364:	68a5      	ldr	r5, [r4, #8]
 8008366:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800836a:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
 800836e:	42b5      	cmp	r5, r6
 8008370:	bf28      	it	cs
 8008372:	4635      	movcs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 8008374:	69a1      	ldr	r1, [r4, #24]
 8008376:	6820      	ldr	r0, [r4, #0]
 8008378:	f7fe ffc3 	bl	8007302 <move_window>
 800837c:	2800      	cmp	r0, #0
 800837e:	d14c      	bne.n	800841a <f_read+0x162>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8008380:	68a1      	ldr	r1, [r4, #8]
 8008382:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	462a      	mov	r2, r5
 800838a:	4419      	add	r1, r3
 800838c:	4648      	mov	r0, r9
 800838e:	f7fe fe4b 	bl	8007028 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008392:	44a9      	add	r9, r5
 8008394:	68a3      	ldr	r3, [r4, #8]
 8008396:	442b      	add	r3, r5
 8008398:	60a3      	str	r3, [r4, #8]
 800839a:	f8d8 3000 	ldr.w	r3, [r8]
 800839e:	442b      	add	r3, r5
 80083a0:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
 80083a4:	1b76      	subs	r6, r6, r5
 80083a6:	d040      	beq.n	800842a <f_read+0x172>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80083a8:	68a1      	ldr	r1, [r4, #8]
 80083aa:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1d8      	bne.n	8008364 <f_read+0xac>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80083b2:	6820      	ldr	r0, [r4, #0]
 80083b4:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80083b8:	3f01      	subs	r7, #1
 80083ba:	ea07 2751 	and.w	r7, r7, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 80083be:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80083c2:	d108      	bne.n	80083d6 <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80083c4:	2900      	cmp	r1, #0
 80083c6:	d199      	bne.n	80082fc <f_read+0x44>
					clst = fp->sclust;			/* Follow from the origin */
 80083c8:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80083ca:	2801      	cmp	r0, #1
 80083cc:	d9a0      	bls.n	8008310 <f_read+0x58>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80083ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80083d2:	d0a4      	beq.n	800831e <f_read+0x66>
				fp->clust = clst;				/* Update current cluster */
 80083d4:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80083d6:	f8d4 b000 	ldr.w	fp, [r4]
 80083da:	6961      	ldr	r1, [r4, #20]
 80083dc:	4658      	mov	r0, fp
 80083de:	f7ff fa73 	bl	80078c8 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80083e2:	4682      	mov	sl, r0
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d0a1      	beq.n	800832c <f_read+0x74>
			sect += csect;
 80083e8:	44ba      	add	sl, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
 80083ea:	0a75      	lsrs	r5, r6, #9
 80083ec:	d0b8      	beq.n	8008360 <f_read+0xa8>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80083ee:	f89b 3202 	ldrb.w	r3, [fp, #514]	; 0x202
 80083f2:	197a      	adds	r2, r7, r5
 80083f4:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 80083f6:	bf88      	it	hi
 80083f8:	1bdd      	subhi	r5, r3, r7
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80083fa:	462b      	mov	r3, r5
 80083fc:	4652      	mov	r2, sl
 80083fe:	4649      	mov	r1, r9
 8008400:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
 8008404:	f7fe fdec 	bl	8006fe0 <disk_read>
 8008408:	2800      	cmp	r0, #0
 800840a:	d096      	beq.n	800833a <f_read+0x82>
					ABORT(fp->fs, FR_DISK_ERR);
 800840c:	f04f 0a01 	mov.w	sl, #1
 8008410:	f884 a007 	strb.w	sl, [r4, #7]
 8008414:	f8cd a004 	str.w	sl, [sp, #4]
 8008418:	e007      	b.n	800842a <f_read+0x172>
			ABORT(fp->fs, FR_DISK_ERR);
 800841a:	f04f 0a01 	mov.w	sl, #1
 800841e:	f884 a007 	strb.w	sl, [r4, #7]
 8008422:	f8cd a004 	str.w	sl, [sp, #4]
 8008426:	e000      	b.n	800842a <f_read+0x172>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008428:	9301      	str	r3, [sp, #4]
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 800842a:	9801      	ldr	r0, [sp, #4]
 800842c:	b003      	add	sp, #12
 800842e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LEAVE_FF(fp->fs, FR_DENIED);
 8008432:	2307      	movs	r3, #7
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	e7f8      	b.n	800842a <f_read+0x172>

08008438 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	b083      	sub	sp, #12
 800843e:	4604      	mov	r4, r0
 8008440:	4689      	mov	r9, r1
 8008442:	4616      	mov	r6, r2
 8008444:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8008446:	2300      	movs	r3, #0
 8008448:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp);						/* Check validity */
 800844c:	f7fe ffbe 	bl	80073cc <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008450:	9001      	str	r0, [sp, #4]
 8008452:	2800      	cmp	r0, #0
 8008454:	f040 80d5 	bne.w	8008602 <f_write+0x1ca>
	if (fp->err)							/* Check error */
 8008458:	79e3      	ldrb	r3, [r4, #7]
 800845a:	2b00      	cmp	r3, #0
 800845c:	f040 80d0 	bne.w	8008600 <f_write+0x1c8>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008460:	79a3      	ldrb	r3, [r4, #6]
 8008462:	f013 0f02 	tst.w	r3, #2
 8008466:	f000 80d0 	beq.w	800860a <f_write+0x1d2>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800846a:	68a3      	ldr	r3, [r4, #8]
 800846c:	42f3      	cmn	r3, r6
 800846e:	d202      	bcs.n	8008476 <f_write+0x3e>

	for ( ;  btw;							/* Repeat until all data written */
 8008470:	2e00      	cmp	r6, #0
 8008472:	f040 809b 	bne.w	80085ac <f_write+0x174>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008476:	68a3      	ldr	r3, [r4, #8]
 8008478:	68e2      	ldr	r2, [r4, #12]
 800847a:	4293      	cmp	r3, r2
 800847c:	bf88      	it	hi
 800847e:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008480:	79a3      	ldrb	r3, [r4, #6]
 8008482:	f043 0320 	orr.w	r3, r3, #32
 8008486:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008488:	e0bb      	b.n	8008602 <f_write+0x1ca>
					if (fp->cltbl)
 800848a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800848c:	b39b      	cbz	r3, 80084f6 <f_write+0xbe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800848e:	4620      	mov	r0, r4
 8008490:	f7fe feac 	bl	80071ec <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008494:	2800      	cmp	r0, #0
 8008496:	d0ee      	beq.n	8008476 <f_write+0x3e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008498:	2801      	cmp	r0, #1
 800849a:	d031      	beq.n	8008500 <f_write+0xc8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800849c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084a0:	d032      	beq.n	8008508 <f_write+0xd0>
				fp->clust = clst;			/* Update current cluster */
 80084a2:	6160      	str	r0, [r4, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	b903      	cbnz	r3, 80084aa <f_write+0x72>
 80084a8:	6120      	str	r0, [r4, #16]
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 80084aa:	6820      	ldr	r0, [r4, #0]
 80084ac:	f8d0 222c 	ldr.w	r2, [r0, #556]	; 0x22c
 80084b0:	69a3      	ldr	r3, [r4, #24]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d02c      	beq.n	8008510 <f_write+0xd8>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80084b6:	f8d4 a000 	ldr.w	sl, [r4]
 80084ba:	6961      	ldr	r1, [r4, #20]
 80084bc:	4650      	mov	r0, sl
 80084be:	f7ff fa03 	bl	80078c8 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80084c2:	4605      	mov	r5, r0
 80084c4:	b360      	cbz	r0, 8008520 <f_write+0xe8>
			sect += csect;
 80084c6:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
 80084c8:	ea5f 2b56 	movs.w	fp, r6, lsr #9
 80084cc:	d041      	beq.n	8008552 <f_write+0x11a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80084ce:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
 80084d2:	eb07 020b 	add.w	r2, r7, fp
 80084d6:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 80084d8:	bf88      	it	hi
 80084da:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80084de:	465b      	mov	r3, fp
 80084e0:	462a      	mov	r2, r5
 80084e2:	4649      	mov	r1, r9
 80084e4:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 80084e8:	f7fe fd86 	bl	8006ff8 <disk_write>
 80084ec:	b1e0      	cbz	r0, 8008528 <f_write+0xf0>
					ABORT(fp->fs, FR_DISK_ERR);
 80084ee:	2301      	movs	r3, #1
 80084f0:	71e3      	strb	r3, [r4, #7]
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	e085      	b.n	8008602 <f_write+0x1ca>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80084f6:	6961      	ldr	r1, [r4, #20]
 80084f8:	4610      	mov	r0, r2
 80084fa:	f7ff fb4e 	bl	8007b9a <create_chain>
 80084fe:	e7c9      	b.n	8008494 <f_write+0x5c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008500:	2302      	movs	r3, #2
 8008502:	71e3      	strb	r3, [r4, #7]
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	e07c      	b.n	8008602 <f_write+0x1ca>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008508:	2301      	movs	r3, #1
 800850a:	71e3      	strb	r3, [r4, #7]
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	e078      	b.n	8008602 <f_write+0x1ca>
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 8008510:	f7fe febe 	bl	8007290 <sync_window>
 8008514:	2800      	cmp	r0, #0
 8008516:	d0ce      	beq.n	80084b6 <f_write+0x7e>
				ABORT(fp->fs, FR_DISK_ERR);
 8008518:	2301      	movs	r3, #1
 800851a:	71e3      	strb	r3, [r4, #7]
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	e070      	b.n	8008602 <f_write+0x1ca>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008520:	2302      	movs	r3, #2
 8008522:	71e3      	strb	r3, [r4, #7]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	e06c      	b.n	8008602 <f_write+0x1ca>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8008528:	6820      	ldr	r0, [r4, #0]
 800852a:	f8d0 122c 	ldr.w	r1, [r0, #556]	; 0x22c
 800852e:	1b49      	subs	r1, r1, r5
 8008530:	4559      	cmp	r1, fp
 8008532:	d302      	bcc.n	800853a <f_write+0x102>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008534:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
 8008538:	e02c      	b.n	8008594 <f_write+0x15c>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 800853a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800853e:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8008542:	f7fe fd71 	bl	8007028 <mem_cpy>
					fp->fs->wflag = 0;
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8008550:	e7f0      	b.n	8008534 <f_write+0xfc>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 8008552:	68a2      	ldr	r2, [r4, #8]
 8008554:	68e3      	ldr	r3, [r4, #12]
 8008556:	429a      	cmp	r2, r3
 8008558:	d242      	bcs.n	80085e0 <f_write+0x1a8>
			fp->dsect = sect;
 800855a:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800855c:	68a5      	ldr	r5, [r4, #8]
 800855e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008562:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
 8008566:	42b5      	cmp	r5, r6
 8008568:	bf28      	it	cs
 800856a:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 800856c:	69a1      	ldr	r1, [r4, #24]
 800856e:	6820      	ldr	r0, [r4, #0]
 8008570:	f7fe fec7 	bl	8007302 <move_window>
 8008574:	2800      	cmp	r0, #0
 8008576:	d13f      	bne.n	80085f8 <f_write+0x1c0>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008578:	68a0      	ldr	r0, [r4, #8]
 800857a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	462a      	mov	r2, r5
 8008582:	4649      	mov	r1, r9
 8008584:	4418      	add	r0, r3
 8008586:	f7fe fd4f 	bl	8007028 <mem_cpy>
		fp->fs->wflag = 1;
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	f04f 0201 	mov.w	r2, #1
 8008590:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008594:	44a9      	add	r9, r5
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	442b      	add	r3, r5
 800859a:	60a3      	str	r3, [r4, #8]
 800859c:	f8d8 3000 	ldr.w	r3, [r8]
 80085a0:	442b      	add	r3, r5
 80085a2:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
 80085a6:	1b76      	subs	r6, r6, r5
 80085a8:	f43f af65 	beq.w	8008476 <f_write+0x3e>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80085ac:	68a1      	ldr	r1, [r4, #8]
 80085ae:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1d2      	bne.n	800855c <f_write+0x124>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	f892 3202 	ldrb.w	r3, [r2, #514]	; 0x202
 80085bc:	3b01      	subs	r3, #1
 80085be:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 80085c2:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
 80085c6:	f47f af70 	bne.w	80084aa <f_write+0x72>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80085ca:	2900      	cmp	r1, #0
 80085cc:	f47f af5d 	bne.w	800848a <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
 80085d0:	6920      	ldr	r0, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f47f af60 	bne.w	8008498 <f_write+0x60>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80085d8:	4610      	mov	r0, r2
 80085da:	f7ff fade 	bl	8007b9a <create_chain>
 80085de:	e759      	b.n	8008494 <f_write+0x5c>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 80085e0:	4650      	mov	r0, sl
 80085e2:	f7fe fe55 	bl	8007290 <sync_window>
 80085e6:	b918      	cbnz	r0, 80085f0 <f_write+0x1b8>
				fp->fs->winsect = sect;
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	f8c3 522c 	str.w	r5, [r3, #556]	; 0x22c
 80085ee:	e7b4      	b.n	800855a <f_write+0x122>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 80085f0:	2301      	movs	r3, #1
 80085f2:	71e3      	strb	r3, [r4, #7]
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	e004      	b.n	8008602 <f_write+0x1ca>
			ABORT(fp->fs, FR_DISK_ERR);
 80085f8:	2301      	movs	r3, #1
 80085fa:	71e3      	strb	r3, [r4, #7]
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	e000      	b.n	8008602 <f_write+0x1ca>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008600:	9301      	str	r3, [sp, #4]
}
 8008602:	9801      	ldr	r0, [sp, #4]
 8008604:	b003      	add	sp, #12
 8008606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LEAVE_FF(fp->fs, FR_DENIED);
 800860a:	2307      	movs	r3, #7
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	e7f8      	b.n	8008602 <f_write+0x1ca>

08008610 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008614:	f7fe feda 	bl	80073cc <validate>
	if (res == FR_OK) {
 8008618:	4603      	mov	r3, r0
 800861a:	b918      	cbnz	r0, 8008624 <f_sync+0x14>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800861c:	79a2      	ldrb	r2, [r4, #6]
 800861e:	f012 0f20 	tst.w	r2, #32
 8008622:	d101      	bne.n	8008628 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8008624:	4618      	mov	r0, r3
 8008626:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
 8008628:	69e1      	ldr	r1, [r4, #28]
 800862a:	6820      	ldr	r0, [r4, #0]
 800862c:	f7fe fe69 	bl	8007302 <move_window>
			if (res == FR_OK) {
 8008630:	4603      	mov	r3, r0
 8008632:	2800      	cmp	r0, #0
 8008634:	d1f6      	bne.n	8008624 <f_sync+0x14>
				dir = fp->dir_ptr;
 8008636:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008638:	7aeb      	ldrb	r3, [r5, #11]
 800863a:	f043 0320 	orr.w	r3, r3, #32
 800863e:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008640:	68e3      	ldr	r3, [r4, #12]
 8008642:	772b      	strb	r3, [r5, #28]
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	0a1b      	lsrs	r3, r3, #8
 8008648:	776b      	strb	r3, [r5, #29]
 800864a:	89e3      	ldrh	r3, [r4, #14]
 800864c:	77ab      	strb	r3, [r5, #30]
 800864e:	7be3      	ldrb	r3, [r4, #15]
 8008650:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008652:	6923      	ldr	r3, [r4, #16]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008654:	76ab      	strb	r3, [r5, #26]
 8008656:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800865a:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800865c:	0c1b      	lsrs	r3, r3, #16
 800865e:	752b      	strb	r3, [r5, #20]
 8008660:	0a1b      	lsrs	r3, r3, #8
 8008662:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 8008664:	f7fe fc86 	bl	8006f74 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008668:	75a8      	strb	r0, [r5, #22]
 800866a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800866e:	75eb      	strb	r3, [r5, #23]
 8008670:	0c03      	lsrs	r3, r0, #16
 8008672:	762b      	strb	r3, [r5, #24]
 8008674:	0e00      	lsrs	r0, r0, #24
 8008676:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008678:	2300      	movs	r3, #0
 800867a:	74ab      	strb	r3, [r5, #18]
 800867c:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800867e:	79a3      	ldrb	r3, [r4, #6]
 8008680:	f023 0320 	bic.w	r3, r3, #32
 8008684:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800868e:	6820      	ldr	r0, [r4, #0]
 8008690:	f7ff f8ba 	bl	8007808 <sync_fs>
 8008694:	4603      	mov	r3, r0
 8008696:	e7c5      	b.n	8008624 <f_sync+0x14>

08008698 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008698:	b510      	push	{r4, lr}
 800869a:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800869c:	f7ff ffb8 	bl	8008610 <f_sync>
	if (res == FR_OK)
 80086a0:	4603      	mov	r3, r0
 80086a2:	b108      	cbz	r0, 80086a8 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	bd10      	pop	{r4, pc}
		res = validate(fp);				/* Lock volume */
 80086a8:	4620      	mov	r0, r4
 80086aa:	f7fe fe8f 	bl	80073cc <validate>
		if (res == FR_OK) {
 80086ae:	4603      	mov	r3, r0
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d1f7      	bne.n	80086a4 <f_close+0xc>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80086b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80086b6:	f7fe fd6f 	bl	8007198 <dec_lock>
			if (res == FR_OK)
 80086ba:	4603      	mov	r3, r0
 80086bc:	2800      	cmp	r0, #0
 80086be:	d1f1      	bne.n	80086a4 <f_close+0xc>
				fp->fs = 0;				/* Invalidate file object */
 80086c0:	2200      	movs	r2, #0
 80086c2:	6022      	str	r2, [r4, #0]
 80086c4:	e7ee      	b.n	80086a4 <f_close+0xc>

080086c6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80086c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	4604      	mov	r4, r0
 80086cc:	460e      	mov	r6, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80086ce:	f7fe fe7d 	bl	80073cc <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80086d2:	4605      	mov	r5, r0
 80086d4:	2800      	cmp	r0, #0
 80086d6:	f040 80f4 	bne.w	80088c2 <f_lseek+0x1fc>
	if (fp->err)						/* Check error */
 80086da:	79e3      	ldrb	r3, [r4, #7]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f040 80ef 	bne.w	80088c0 <f_lseek+0x1fa>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80086e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d06a      	beq.n	80087be <f_lseek+0xf8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80086e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80086ec:	d026      	beq.n	800873c <f_lseek+0x76>
 80086ee:	68e3      	ldr	r3, [r4, #12]
 80086f0:	429e      	cmp	r6, r3
 80086f2:	bf28      	it	cs
 80086f4:	461e      	movcs	r6, r3
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
				ofs = fp->fsize;
			fp->fptr = ofs;				/* Set file pointer */
 80086f6:	60a6      	str	r6, [r4, #8]
			if (ofs) {
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	f000 80e2 	beq.w	80088c2 <f_lseek+0x1fc>
				fp->clust = clmt_clust(fp, ofs - 1);
 80086fe:	1e77      	subs	r7, r6, #1
 8008700:	4639      	mov	r1, r7
 8008702:	4620      	mov	r0, r4
 8008704:	f7fe fd72 	bl	80071ec <clmt_clust>
 8008708:	4601      	mov	r1, r0
 800870a:	6160      	str	r0, [r4, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800870c:	f8d4 8000 	ldr.w	r8, [r4]
 8008710:	4640      	mov	r0, r8
 8008712:	f7ff f8d9 	bl	80078c8 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8008716:	2800      	cmp	r0, #0
 8008718:	d04e      	beq.n	80087b8 <f_lseek+0xf2>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800871a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800871e:	2e00      	cmp	r6, #0
 8008720:	f000 80cf 	beq.w	80088c2 <f_lseek+0x1fc>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008724:	f898 3202 	ldrb.w	r3, [r8, #514]	; 0x202
 8008728:	3b01      	subs	r3, #1
 800872a:	ea03 2357 	and.w	r3, r3, r7, lsr #9
 800872e:	4403      	add	r3, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008730:	69a2      	ldr	r2, [r4, #24]
 8008732:	429a      	cmp	r2, r3
 8008734:	f000 80c5 	beq.w	80088c2 <f_lseek+0x1fc>
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
						ABORT(fp->fs, FR_DISK_ERR);
#endif
					fp->dsect = dsc;
 8008738:	61a3      	str	r3, [r4, #24]
 800873a:	e0c2      	b.n	80088c2 <f_lseek+0x1fc>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800873c:	f103 0b04 	add.w	fp, r3, #4
 8008740:	f8d3 a000 	ldr.w	sl, [r3]
			cl = fp->sclust;			/* Top of the chain */
 8008744:	f8d4 8010 	ldr.w	r8, [r4, #16]
			if (cl) {
 8008748:	f1b8 0f00 	cmp.w	r8, #0
 800874c:	d028      	beq.n	80087a0 <f_lseek+0xda>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800874e:	f04f 0902 	mov.w	r9, #2
						cl = get_fat(fp->fs, cl);
 8008752:	4646      	mov	r6, r8
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008754:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 8008756:	3701      	adds	r7, #1
						cl = get_fat(fp->fs, cl);
 8008758:	4631      	mov	r1, r6
 800875a:	6820      	ldr	r0, [r4, #0]
 800875c:	f7ff f8c2 	bl	80078e4 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008760:	2801      	cmp	r0, #1
 8008762:	d917      	bls.n	8008794 <f_lseek+0xce>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008764:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008768:	d017      	beq.n	800879a <f_lseek+0xd4>
					} while (cl == pcl + 1);
 800876a:	1c73      	adds	r3, r6, #1
						cl = get_fat(fp->fs, cl);
 800876c:	4606      	mov	r6, r0
					} while (cl == pcl + 1);
 800876e:	4283      	cmp	r3, r0
 8008770:	d0f1      	beq.n	8008756 <f_lseek+0x90>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008772:	f109 0902 	add.w	r9, r9, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008776:	45ca      	cmp	sl, r9
 8008778:	d305      	bcc.n	8008786 <f_lseek+0xc0>
						*tbl++ = ncl; *tbl++ = tcl;
 800877a:	465b      	mov	r3, fp
 800877c:	f843 7b08 	str.w	r7, [r3], #8
 8008780:	f8cb 8004 	str.w	r8, [fp, #4]
 8008784:	469b      	mov	fp, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800878c:	4283      	cmp	r3, r0
 800878e:	d909      	bls.n	80087a4 <f_lseek+0xde>
						cl = get_fat(fp->fs, cl);
 8008790:	4680      	mov	r8, r0
 8008792:	e7de      	b.n	8008752 <f_lseek+0x8c>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008794:	2502      	movs	r5, #2
 8008796:	71e5      	strb	r5, [r4, #7]
 8008798:	e093      	b.n	80088c2 <f_lseek+0x1fc>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800879a:	2501      	movs	r5, #1
 800879c:	71e5      	strb	r5, [r4, #7]
 800879e:	e090      	b.n	80088c2 <f_lseek+0x1fc>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80087a0:	f04f 0902 	mov.w	r9, #2
			*fp->cltbl = ulen;	/* Number of items used */
 80087a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087a6:	f8c3 9000 	str.w	r9, [r3]
			if (ulen <= tlen)
 80087aa:	45d1      	cmp	r9, sl
 80087ac:	f200 808c 	bhi.w	80088c8 <f_lseek+0x202>
				*tbl = 0;		/* Terminate table */
 80087b0:	2300      	movs	r3, #0
 80087b2:	f8cb 3000 	str.w	r3, [fp]
 80087b6:	e084      	b.n	80088c2 <f_lseek+0x1fc>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80087b8:	2502      	movs	r5, #2
 80087ba:	71e5      	strb	r5, [r4, #7]
 80087bc:	e081      	b.n	80088c2 <f_lseek+0x1fc>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80087be:	68e3      	ldr	r3, [r4, #12]
 80087c0:	42b3      	cmp	r3, r6
 80087c2:	d205      	bcs.n	80087d0 <f_lseek+0x10a>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80087c4:	79a2      	ldrb	r2, [r4, #6]
 80087c6:	f002 0202 	and.w	r2, r2, #2
#endif
			) ofs = fp->fsize;
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	bf08      	it	eq
 80087ce:	461e      	moveq	r6, r3

		ifptr = fp->fptr;
 80087d0:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
 80087d2:	2200      	movs	r2, #0
 80087d4:	60a2      	str	r2, [r4, #8]
		if (ofs) {
 80087d6:	2e00      	cmp	r6, #0
 80087d8:	d073      	beq.n	80088c2 <f_lseek+0x1fc>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80087da:	6820      	ldr	r0, [r4, #0]
 80087dc:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80087e0:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80087e2:	b16b      	cbz	r3, 8008800 <f_lseek+0x13a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80087e4:	3b01      	subs	r3, #1
 80087e6:	1e72      	subs	r2, r6, #1
 80087e8:	fbb2 f2f7 	udiv	r2, r2, r7
 80087ec:	fbb3 f1f7 	udiv	r1, r3, r7
			if (ifptr > 0 &&
 80087f0:	428a      	cmp	r2, r1
 80087f2:	d305      	bcc.n	8008800 <f_lseek+0x13a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80087f4:	427a      	negs	r2, r7
 80087f6:	4013      	ands	r3, r2
 80087f8:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
 80087fa:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
 80087fc:	6961      	ldr	r1, [r4, #20]
 80087fe:	e002      	b.n	8008806 <f_lseek+0x140>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008800:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008802:	b129      	cbz	r1, 8008810 <f_lseek+0x14a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
 8008804:	6161      	str	r1, [r4, #20]
			}
			if (clst != 0) {
 8008806:	2900      	cmp	r1, #0
 8008808:	d049      	beq.n	800889e <f_lseek+0x1d8>
				while (ofs > bcs) {						/* Cluster following loop */
 800880a:	42be      	cmp	r6, r7
 800880c:	d825      	bhi.n	800885a <f_lseek+0x194>
 800880e:	e02f      	b.n	8008870 <f_lseek+0x1aa>
					clst = create_chain(fp->fs, 0);
 8008810:	f7ff f9c3 	bl	8007b9a <create_chain>
 8008814:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008816:	2801      	cmp	r0, #1
 8008818:	d004      	beq.n	8008824 <f_lseek+0x15e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800881a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800881e:	d004      	beq.n	800882a <f_lseek+0x164>
					fp->sclust = clst;
 8008820:	6120      	str	r0, [r4, #16]
 8008822:	e7ef      	b.n	8008804 <f_lseek+0x13e>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008824:	2502      	movs	r5, #2
 8008826:	71e5      	strb	r5, [r4, #7]
 8008828:	e04b      	b.n	80088c2 <f_lseek+0x1fc>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800882a:	2501      	movs	r5, #1
 800882c:	71e5      	strb	r5, [r4, #7]
 800882e:	e048      	b.n	80088c2 <f_lseek+0x1fc>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	f7ff f857 	bl	80078e4 <get_fat>
 8008836:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008838:	f1b1 3fff 	cmp.w	r1, #4294967295
 800883c:	d025      	beq.n	800888a <f_lseek+0x1c4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800883e:	2901      	cmp	r1, #1
 8008840:	d926      	bls.n	8008890 <f_lseek+0x1ca>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008848:	428b      	cmp	r3, r1
 800884a:	d921      	bls.n	8008890 <f_lseek+0x1ca>
					fp->clust = clst;
 800884c:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
 800884e:	68a3      	ldr	r3, [r4, #8]
 8008850:	443b      	add	r3, r7
 8008852:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
 8008854:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
 8008856:	42b7      	cmp	r7, r6
 8008858:	d20a      	bcs.n	8008870 <f_lseek+0x1aa>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800885a:	79a3      	ldrb	r3, [r4, #6]
 800885c:	f013 0f02 	tst.w	r3, #2
 8008860:	d0e6      	beq.n	8008830 <f_lseek+0x16a>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008862:	6820      	ldr	r0, [r4, #0]
 8008864:	f7ff f999 	bl	8007b9a <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8008868:	4601      	mov	r1, r0
 800886a:	2800      	cmp	r0, #0
 800886c:	d1e4      	bne.n	8008838 <f_lseek+0x172>
							ofs = bcs; break;
 800886e:	463e      	mov	r6, r7
				}
				fp->fptr += ofs;
 8008870:	68a3      	ldr	r3, [r4, #8]
 8008872:	4433      	add	r3, r6
 8008874:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
 8008876:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800887a:	b17b      	cbz	r3, 800889c <f_lseek+0x1d6>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800887c:	6820      	ldr	r0, [r4, #0]
 800887e:	f7ff f823 	bl	80078c8 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008882:	b140      	cbz	r0, 8008896 <f_lseek+0x1d0>
					nsect += ofs / SS(fp->fs);
 8008884:	eb00 2156 	add.w	r1, r0, r6, lsr #9
 8008888:	e009      	b.n	800889e <f_lseek+0x1d8>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800888a:	2501      	movs	r5, #1
 800888c:	71e5      	strb	r5, [r4, #7]
 800888e:	e018      	b.n	80088c2 <f_lseek+0x1fc>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008890:	2502      	movs	r5, #2
 8008892:	71e5      	strb	r5, [r4, #7]
 8008894:	e015      	b.n	80088c2 <f_lseek+0x1fc>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008896:	2502      	movs	r5, #2
 8008898:	71e5      	strb	r5, [r4, #7]
 800889a:	e012      	b.n	80088c2 <f_lseek+0x1fc>
		fp->fptr = nsect = 0;
 800889c:	2100      	movs	r1, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088a4:	b11a      	cbz	r2, 80088ae <f_lseek+0x1e8>
 80088a6:	69a2      	ldr	r2, [r4, #24]
 80088a8:	428a      	cmp	r2, r1
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
 80088aa:	bf18      	it	ne
 80088ac:	61a1      	strne	r1, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80088ae:	68e2      	ldr	r2, [r4, #12]
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d906      	bls.n	80088c2 <f_lseek+0x1fc>
			fp->fsize = fp->fptr;
 80088b4:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
 80088b6:	79a3      	ldrb	r3, [r4, #6]
 80088b8:	f043 0320 	orr.w	r3, r3, #32
 80088bc:	71a3      	strb	r3, [r4, #6]
 80088be:	e000      	b.n	80088c2 <f_lseek+0x1fc>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80088c0:	461d      	mov	r5, r3
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 80088c2:	4628      	mov	r0, r5
 80088c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80088c8:	2511      	movs	r5, #17
 80088ca:	e7fa      	b.n	80088c2 <f_lseek+0x1fc>

080088cc <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 80088cc:	4b11      	ldr	r3, [pc, #68]	; (8008914 <FATFS_LinkDriverEx+0x48>)
 80088ce:	7a5b      	ldrb	r3, [r3, #9]
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d901      	bls.n	80088da <FATFS_LinkDriverEx+0xe>
  uint8_t ret = 1;
 80088d6:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }
  
  return ret;
}
 80088d8:	4770      	bx	lr
{
 80088da:	b430      	push	{r4, r5}
    disk.is_initialized[disk.nbr] = 0;
 80088dc:	4c0d      	ldr	r4, [pc, #52]	; (8008914 <FATFS_LinkDriverEx+0x48>)
 80088de:	7a65      	ldrb	r5, [r4, #9]
 80088e0:	b2ed      	uxtb	r5, r5
 80088e2:	2300      	movs	r3, #0
 80088e4:	5563      	strb	r3, [r4, r5]
    disk.drv[disk.nbr] = drv;  
 80088e6:	7a65      	ldrb	r5, [r4, #9]
 80088e8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088ec:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 80088ee:	7a60      	ldrb	r0, [r4, #9]
 80088f0:	4420      	add	r0, r4
 80088f2:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80088f4:	7a62      	ldrb	r2, [r4, #9]
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	1c50      	adds	r0, r2, #1
 80088fa:	b2c0      	uxtb	r0, r0
 80088fc:	7260      	strb	r0, [r4, #9]
    path[0] = DiskNum + '0';
 80088fe:	3230      	adds	r2, #48	; 0x30
 8008900:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008902:	223a      	movs	r2, #58	; 0x3a
 8008904:	704a      	strb	r2, [r1, #1]
    path[2] = '/';
 8008906:	222f      	movs	r2, #47	; 0x2f
 8008908:	708a      	strb	r2, [r1, #2]
    path[3] = 0;
 800890a:	70cb      	strb	r3, [r1, #3]
    ret = 0;
 800890c:	4618      	mov	r0, r3
}
 800890e:	bc30      	pop	{r4, r5}
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	200009d4 	.word	0x200009d4

08008918 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008918:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800891a:	2200      	movs	r2, #0
 800891c:	f7ff ffd6 	bl	80088cc <FATFS_LinkDriverEx>
}
 8008920:	bd08      	pop	{r3, pc}
	...

08008924 <pow>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	b08f      	sub	sp, #60	; 0x3c
 800892a:	461d      	mov	r5, r3
 800892c:	4680      	mov	r8, r0
 800892e:	4689      	mov	r9, r1
 8008930:	4614      	mov	r4, r2
 8008932:	f000 f955 	bl	8008be0 <__ieee754_pow>
 8008936:	4fa1      	ldr	r7, [pc, #644]	; (8008bbc <pow+0x298>)
 8008938:	e9cd 0100 	strd	r0, r1, [sp]
 800893c:	f997 3000 	ldrsb.w	r3, [r7]
 8008940:	463e      	mov	r6, r7
 8008942:	9302      	str	r3, [sp, #8]
 8008944:	3301      	adds	r3, #1
 8008946:	d05f      	beq.n	8008a08 <pow+0xe4>
 8008948:	4622      	mov	r2, r4
 800894a:	462b      	mov	r3, r5
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f7f8 f85c 	bl	8000a0c <__aeabi_dcmpun>
 8008954:	4682      	mov	sl, r0
 8008956:	2800      	cmp	r0, #0
 8008958:	d156      	bne.n	8008a08 <pow+0xe4>
 800895a:	4642      	mov	r2, r8
 800895c:	464b      	mov	r3, r9
 800895e:	4640      	mov	r0, r8
 8008960:	4649      	mov	r1, r9
 8008962:	f7f8 f853 	bl	8000a0c <__aeabi_dcmpun>
 8008966:	9003      	str	r0, [sp, #12]
 8008968:	b1e8      	cbz	r0, 80089a6 <pow+0x82>
 800896a:	2200      	movs	r2, #0
 800896c:	2300      	movs	r3, #0
 800896e:	4620      	mov	r0, r4
 8008970:	4629      	mov	r1, r5
 8008972:	f7f8 f819 	bl	80009a8 <__aeabi_dcmpeq>
 8008976:	2800      	cmp	r0, #0
 8008978:	d046      	beq.n	8008a08 <pow+0xe4>
 800897a:	2301      	movs	r3, #1
 800897c:	2200      	movs	r2, #0
 800897e:	9304      	str	r3, [sp, #16]
 8008980:	4b8f      	ldr	r3, [pc, #572]	; (8008bc0 <pow+0x29c>)
 8008982:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008986:	9305      	str	r3, [sp, #20]
 8008988:	4b8e      	ldr	r3, [pc, #568]	; (8008bc4 <pow+0x2a0>)
 800898a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800898e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008992:	9b02      	ldr	r3, [sp, #8]
 8008994:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d031      	beq.n	8008a00 <pow+0xdc>
 800899c:	a804      	add	r0, sp, #16
 800899e:	f000 fedf 	bl	8009760 <matherr>
 80089a2:	bb38      	cbnz	r0, 80089f4 <pow+0xd0>
 80089a4:	e058      	b.n	8008a58 <pow+0x134>
 80089a6:	f04f 0a00 	mov.w	sl, #0
 80089aa:	f04f 0b00 	mov.w	fp, #0
 80089ae:	4652      	mov	r2, sl
 80089b0:	465b      	mov	r3, fp
 80089b2:	4640      	mov	r0, r8
 80089b4:	4649      	mov	r1, r9
 80089b6:	f7f7 fff7 	bl	80009a8 <__aeabi_dcmpeq>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d051      	beq.n	8008a62 <pow+0x13e>
 80089be:	4652      	mov	r2, sl
 80089c0:	465b      	mov	r3, fp
 80089c2:	4620      	mov	r0, r4
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7f7 ffef 	bl	80009a8 <__aeabi_dcmpeq>
 80089ca:	4606      	mov	r6, r0
 80089cc:	b308      	cbz	r0, 8008a12 <pow+0xee>
 80089ce:	2301      	movs	r3, #1
 80089d0:	9304      	str	r3, [sp, #16]
 80089d2:	4b7b      	ldr	r3, [pc, #492]	; (8008bc0 <pow+0x29c>)
 80089d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80089d8:	9305      	str	r3, [sp, #20]
 80089da:	9b03      	ldr	r3, [sp, #12]
 80089dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80089e0:	930c      	str	r3, [sp, #48]	; 0x30
 80089e2:	9b02      	ldr	r3, [sp, #8]
 80089e4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0d7      	beq.n	800899c <pow+0x78>
 80089ec:	2200      	movs	r2, #0
 80089ee:	4b75      	ldr	r3, [pc, #468]	; (8008bc4 <pow+0x2a0>)
 80089f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80089f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089f6:	b11b      	cbz	r3, 8008a00 <pow+0xdc>
 80089f8:	f000 ffc2 	bl	8009980 <__errno>
 80089fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089fe:	6003      	str	r3, [r0, #0]
 8008a00:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8008a04:	e9cd 3400 	strd	r3, r4, [sp]
 8008a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a0c:	b00f      	add	sp, #60	; 0x3c
 8008a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a12:	4620      	mov	r0, r4
 8008a14:	4629      	mov	r1, r5
 8008a16:	f000 fe9d 	bl	8009754 <finite>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d0f4      	beq.n	8008a08 <pow+0xe4>
 8008a1e:	4652      	mov	r2, sl
 8008a20:	465b      	mov	r3, fp
 8008a22:	4620      	mov	r0, r4
 8008a24:	4629      	mov	r1, r5
 8008a26:	f7f7 ffc9 	bl	80009bc <__aeabi_dcmplt>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d0ec      	beq.n	8008a08 <pow+0xe4>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	9304      	str	r3, [sp, #16]
 8008a32:	4b63      	ldr	r3, [pc, #396]	; (8008bc0 <pow+0x29c>)
 8008a34:	960c      	str	r6, [sp, #48]	; 0x30
 8008a36:	9305      	str	r3, [sp, #20]
 8008a38:	f997 3000 	ldrsb.w	r3, [r7]
 8008a3c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008a40:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008a44:	b913      	cbnz	r3, 8008a4c <pow+0x128>
 8008a46:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008a4a:	e7a7      	b.n	800899c <pow+0x78>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	495e      	ldr	r1, [pc, #376]	; (8008bc8 <pow+0x2a4>)
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a56:	d1a1      	bne.n	800899c <pow+0x78>
 8008a58:	f000 ff92 	bl	8009980 <__errno>
 8008a5c:	2321      	movs	r3, #33	; 0x21
 8008a5e:	6003      	str	r3, [r0, #0]
 8008a60:	e7c8      	b.n	80089f4 <pow+0xd0>
 8008a62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a66:	f000 fe75 	bl	8009754 <finite>
 8008a6a:	9002      	str	r0, [sp, #8]
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d177      	bne.n	8008b60 <pow+0x23c>
 8008a70:	4640      	mov	r0, r8
 8008a72:	4649      	mov	r1, r9
 8008a74:	f000 fe6e 	bl	8009754 <finite>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d071      	beq.n	8008b60 <pow+0x23c>
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	f000 fe68 	bl	8009754 <finite>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d06b      	beq.n	8008b60 <pow+0x23c>
 8008a88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4610      	mov	r0, r2
 8008a90:	f7f7 ffbc 	bl	8000a0c <__aeabi_dcmpun>
 8008a94:	f997 7000 	ldrsb.w	r7, [r7]
 8008a98:	4b49      	ldr	r3, [pc, #292]	; (8008bc0 <pow+0x29c>)
 8008a9a:	b1a0      	cbz	r0, 8008ac6 <pow+0x1a2>
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008aa2:	9b02      	ldr	r3, [sp, #8]
 8008aa4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008aa8:	930c      	str	r3, [sp, #48]	; 0x30
 8008aaa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008aae:	2f00      	cmp	r7, #0
 8008ab0:	d0c9      	beq.n	8008a46 <pow+0x122>
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	465b      	mov	r3, fp
 8008ab6:	4650      	mov	r0, sl
 8008ab8:	4659      	mov	r1, fp
 8008aba:	f7f7 fe37 	bl	800072c <__aeabi_ddiv>
 8008abe:	2f02      	cmp	r7, #2
 8008ac0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008ac4:	e7c7      	b.n	8008a56 <pow+0x132>
 8008ac6:	2203      	movs	r2, #3
 8008ac8:	900c      	str	r0, [sp, #48]	; 0x30
 8008aca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4b3d      	ldr	r3, [pc, #244]	; (8008bcc <pow+0x2a8>)
 8008ad6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008ada:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008ade:	f7f7 fcfb 	bl	80004d8 <__aeabi_dmul>
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	bb17      	cbnz	r7, 8008b2e <pow+0x20a>
 8008ae8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008aec:	4b38      	ldr	r3, [pc, #224]	; (8008bd0 <pow+0x2ac>)
 8008aee:	4640      	mov	r0, r8
 8008af0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008af4:	4649      	mov	r1, r9
 8008af6:	4652      	mov	r2, sl
 8008af8:	465b      	mov	r3, fp
 8008afa:	f7f7 ff5f 	bl	80009bc <__aeabi_dcmplt>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d054      	beq.n	8008bac <pow+0x288>
 8008b02:	4620      	mov	r0, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	f000 fe33 	bl	8009770 <rint>
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	f7f7 ff4b 	bl	80009a8 <__aeabi_dcmpeq>
 8008b12:	b920      	cbnz	r0, 8008b1e <pow+0x1fa>
 8008b14:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008b18:	4b2e      	ldr	r3, [pc, #184]	; (8008bd4 <pow+0x2b0>)
 8008b1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b1e:	f996 3000 	ldrsb.w	r3, [r6]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d142      	bne.n	8008bac <pow+0x288>
 8008b26:	f000 ff2b 	bl	8009980 <__errno>
 8008b2a:	2322      	movs	r3, #34	; 0x22
 8008b2c:	e797      	b.n	8008a5e <pow+0x13a>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	4b29      	ldr	r3, [pc, #164]	; (8008bd8 <pow+0x2b4>)
 8008b32:	4640      	mov	r0, r8
 8008b34:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b38:	4649      	mov	r1, r9
 8008b3a:	4652      	mov	r2, sl
 8008b3c:	465b      	mov	r3, fp
 8008b3e:	f7f7 ff3d 	bl	80009bc <__aeabi_dcmplt>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d0eb      	beq.n	8008b1e <pow+0x1fa>
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f000 fe11 	bl	8009770 <rint>
 8008b4e:	4622      	mov	r2, r4
 8008b50:	462b      	mov	r3, r5
 8008b52:	f7f7 ff29 	bl	80009a8 <__aeabi_dcmpeq>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d1e1      	bne.n	8008b1e <pow+0x1fa>
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	4b1a      	ldr	r3, [pc, #104]	; (8008bc8 <pow+0x2a4>)
 8008b5e:	e7dc      	b.n	8008b1a <pow+0x1f6>
 8008b60:	2200      	movs	r2, #0
 8008b62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b66:	2300      	movs	r3, #0
 8008b68:	f7f7 ff1e 	bl	80009a8 <__aeabi_dcmpeq>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f43f af4b 	beq.w	8008a08 <pow+0xe4>
 8008b72:	4640      	mov	r0, r8
 8008b74:	4649      	mov	r1, r9
 8008b76:	f000 fded 	bl	8009754 <finite>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	f43f af44 	beq.w	8008a08 <pow+0xe4>
 8008b80:	4620      	mov	r0, r4
 8008b82:	4629      	mov	r1, r5
 8008b84:	f000 fde6 	bl	8009754 <finite>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	f43f af3d 	beq.w	8008a08 <pow+0xe4>
 8008b8e:	2304      	movs	r3, #4
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <pow+0x29c>)
 8008b94:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008b98:	9305      	str	r3, [sp, #20]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2400      	movs	r4, #0
 8008b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008ba6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8008baa:	e7b8      	b.n	8008b1e <pow+0x1fa>
 8008bac:	a804      	add	r0, sp, #16
 8008bae:	f000 fdd7 	bl	8009760 <matherr>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f47f af1e 	bne.w	80089f4 <pow+0xd0>
 8008bb8:	e7b5      	b.n	8008b26 <pow+0x202>
 8008bba:	bf00      	nop
 8008bbc:	20000048 	.word	0x20000048
 8008bc0:	0800b13c 	.word	0x0800b13c
 8008bc4:	3ff00000 	.word	0x3ff00000
 8008bc8:	fff00000 	.word	0xfff00000
 8008bcc:	3fe00000 	.word	0x3fe00000
 8008bd0:	47efffff 	.word	0x47efffff
 8008bd4:	c7efffff 	.word	0xc7efffff
 8008bd8:	7ff00000 	.word	0x7ff00000
 8008bdc:	00000000 	.word	0x00000000

08008be0 <__ieee754_pow>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	b091      	sub	sp, #68	; 0x44
 8008be6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bea:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8008bee:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008bf2:	ea55 0302 	orrs.w	r3, r5, r2
 8008bf6:	4607      	mov	r7, r0
 8008bf8:	4688      	mov	r8, r1
 8008bfa:	f000 84b7 	beq.w	800956c <__ieee754_pow+0x98c>
 8008bfe:	4b80      	ldr	r3, [pc, #512]	; (8008e00 <__ieee754_pow+0x220>)
 8008c00:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008c04:	429c      	cmp	r4, r3
 8008c06:	4689      	mov	r9, r1
 8008c08:	4682      	mov	sl, r0
 8008c0a:	dc09      	bgt.n	8008c20 <__ieee754_pow+0x40>
 8008c0c:	d103      	bne.n	8008c16 <__ieee754_pow+0x36>
 8008c0e:	b938      	cbnz	r0, 8008c20 <__ieee754_pow+0x40>
 8008c10:	42a5      	cmp	r5, r4
 8008c12:	dc0d      	bgt.n	8008c30 <__ieee754_pow+0x50>
 8008c14:	e001      	b.n	8008c1a <__ieee754_pow+0x3a>
 8008c16:	429d      	cmp	r5, r3
 8008c18:	dc02      	bgt.n	8008c20 <__ieee754_pow+0x40>
 8008c1a:	429d      	cmp	r5, r3
 8008c1c:	d10e      	bne.n	8008c3c <__ieee754_pow+0x5c>
 8008c1e:	b16a      	cbz	r2, 8008c3c <__ieee754_pow+0x5c>
 8008c20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008c24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008c28:	ea54 030a 	orrs.w	r3, r4, sl
 8008c2c:	f000 849e 	beq.w	800956c <__ieee754_pow+0x98c>
 8008c30:	4874      	ldr	r0, [pc, #464]	; (8008e04 <__ieee754_pow+0x224>)
 8008c32:	b011      	add	sp, #68	; 0x44
 8008c34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	f000 bd94 	b.w	8009764 <nan>
 8008c3c:	f1b9 0f00 	cmp.w	r9, #0
 8008c40:	da53      	bge.n	8008cea <__ieee754_pow+0x10a>
 8008c42:	4b71      	ldr	r3, [pc, #452]	; (8008e08 <__ieee754_pow+0x228>)
 8008c44:	429d      	cmp	r5, r3
 8008c46:	dc4e      	bgt.n	8008ce6 <__ieee754_pow+0x106>
 8008c48:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008c4c:	429d      	cmp	r5, r3
 8008c4e:	dd4c      	ble.n	8008cea <__ieee754_pow+0x10a>
 8008c50:	152b      	asrs	r3, r5, #20
 8008c52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c56:	2b14      	cmp	r3, #20
 8008c58:	dd28      	ble.n	8008cac <__ieee754_pow+0xcc>
 8008c5a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c5e:	fa22 f103 	lsr.w	r1, r2, r3
 8008c62:	fa01 f303 	lsl.w	r3, r1, r3
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d13f      	bne.n	8008cea <__ieee754_pow+0x10a>
 8008c6a:	f001 0101 	and.w	r1, r1, #1
 8008c6e:	f1c1 0302 	rsb	r3, r1, #2
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	d15c      	bne.n	8008d32 <__ieee754_pow+0x152>
 8008c78:	4b61      	ldr	r3, [pc, #388]	; (8008e00 <__ieee754_pow+0x220>)
 8008c7a:	429d      	cmp	r5, r3
 8008c7c:	d126      	bne.n	8008ccc <__ieee754_pow+0xec>
 8008c7e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008c82:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008c86:	ea53 030a 	orrs.w	r3, r3, sl
 8008c8a:	f000 846f 	beq.w	800956c <__ieee754_pow+0x98c>
 8008c8e:	4b5f      	ldr	r3, [pc, #380]	; (8008e0c <__ieee754_pow+0x22c>)
 8008c90:	429c      	cmp	r4, r3
 8008c92:	dd2c      	ble.n	8008cee <__ieee754_pow+0x10e>
 8008c94:	2e00      	cmp	r6, #0
 8008c96:	f280 846f 	bge.w	8009578 <__ieee754_pow+0x998>
 8008c9a:	f04f 0b00 	mov.w	fp, #0
 8008c9e:	f04f 0c00 	mov.w	ip, #0
 8008ca2:	4658      	mov	r0, fp
 8008ca4:	4661      	mov	r1, ip
 8008ca6:	b011      	add	sp, #68	; 0x44
 8008ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cac:	2a00      	cmp	r2, #0
 8008cae:	d13e      	bne.n	8008d2e <__ieee754_pow+0x14e>
 8008cb0:	f1c3 0314 	rsb	r3, r3, #20
 8008cb4:	fa45 f103 	asr.w	r1, r5, r3
 8008cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cbc:	42ab      	cmp	r3, r5
 8008cbe:	f040 8463 	bne.w	8009588 <__ieee754_pow+0x9a8>
 8008cc2:	f001 0101 	and.w	r1, r1, #1
 8008cc6:	f1c1 0302 	rsb	r3, r1, #2
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	4b50      	ldr	r3, [pc, #320]	; (8008e10 <__ieee754_pow+0x230>)
 8008cce:	429d      	cmp	r5, r3
 8008cd0:	d114      	bne.n	8008cfc <__ieee754_pow+0x11c>
 8008cd2:	2e00      	cmp	r6, #0
 8008cd4:	f280 8454 	bge.w	8009580 <__ieee754_pow+0x9a0>
 8008cd8:	463a      	mov	r2, r7
 8008cda:	4643      	mov	r3, r8
 8008cdc:	2000      	movs	r0, #0
 8008cde:	494c      	ldr	r1, [pc, #304]	; (8008e10 <__ieee754_pow+0x230>)
 8008ce0:	f7f7 fd24 	bl	800072c <__aeabi_ddiv>
 8008ce4:	e013      	b.n	8008d0e <__ieee754_pow+0x12e>
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e7c3      	b.n	8008c72 <__ieee754_pow+0x92>
 8008cea:	2300      	movs	r3, #0
 8008cec:	e7c1      	b.n	8008c72 <__ieee754_pow+0x92>
 8008cee:	2e00      	cmp	r6, #0
 8008cf0:	dad3      	bge.n	8008c9a <__ieee754_pow+0xba>
 8008cf2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008cf6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008cfa:	e7d2      	b.n	8008ca2 <__ieee754_pow+0xc2>
 8008cfc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8008d00:	d108      	bne.n	8008d14 <__ieee754_pow+0x134>
 8008d02:	463a      	mov	r2, r7
 8008d04:	4643      	mov	r3, r8
 8008d06:	4638      	mov	r0, r7
 8008d08:	4641      	mov	r1, r8
 8008d0a:	f7f7 fbe5 	bl	80004d8 <__aeabi_dmul>
 8008d0e:	4683      	mov	fp, r0
 8008d10:	468c      	mov	ip, r1
 8008d12:	e7c6      	b.n	8008ca2 <__ieee754_pow+0xc2>
 8008d14:	4b3f      	ldr	r3, [pc, #252]	; (8008e14 <__ieee754_pow+0x234>)
 8008d16:	429e      	cmp	r6, r3
 8008d18:	d10b      	bne.n	8008d32 <__ieee754_pow+0x152>
 8008d1a:	f1b9 0f00 	cmp.w	r9, #0
 8008d1e:	db08      	blt.n	8008d32 <__ieee754_pow+0x152>
 8008d20:	4638      	mov	r0, r7
 8008d22:	4641      	mov	r1, r8
 8008d24:	b011      	add	sp, #68	; 0x44
 8008d26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2a:	f000 bc63 	b.w	80095f4 <__ieee754_sqrt>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	4638      	mov	r0, r7
 8008d34:	4641      	mov	r1, r8
 8008d36:	f000 fd09 	bl	800974c <fabs>
 8008d3a:	4683      	mov	fp, r0
 8008d3c:	468c      	mov	ip, r1
 8008d3e:	f1ba 0f00 	cmp.w	sl, #0
 8008d42:	d12b      	bne.n	8008d9c <__ieee754_pow+0x1bc>
 8008d44:	b124      	cbz	r4, 8008d50 <__ieee754_pow+0x170>
 8008d46:	4b32      	ldr	r3, [pc, #200]	; (8008e10 <__ieee754_pow+0x230>)
 8008d48:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d125      	bne.n	8008d9c <__ieee754_pow+0x1bc>
 8008d50:	2e00      	cmp	r6, #0
 8008d52:	da07      	bge.n	8008d64 <__ieee754_pow+0x184>
 8008d54:	465a      	mov	r2, fp
 8008d56:	4663      	mov	r3, ip
 8008d58:	2000      	movs	r0, #0
 8008d5a:	492d      	ldr	r1, [pc, #180]	; (8008e10 <__ieee754_pow+0x230>)
 8008d5c:	f7f7 fce6 	bl	800072c <__aeabi_ddiv>
 8008d60:	4683      	mov	fp, r0
 8008d62:	468c      	mov	ip, r1
 8008d64:	f1b9 0f00 	cmp.w	r9, #0
 8008d68:	da9b      	bge.n	8008ca2 <__ieee754_pow+0xc2>
 8008d6a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d6e:	9b00      	ldr	r3, [sp, #0]
 8008d70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d74:	4323      	orrs	r3, r4
 8008d76:	d108      	bne.n	8008d8a <__ieee754_pow+0x1aa>
 8008d78:	465a      	mov	r2, fp
 8008d7a:	4663      	mov	r3, ip
 8008d7c:	4658      	mov	r0, fp
 8008d7e:	4661      	mov	r1, ip
 8008d80:	f7f7 f9f2 	bl	8000168 <__aeabi_dsub>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	e7aa      	b.n	8008ce0 <__ieee754_pow+0x100>
 8008d8a:	9b00      	ldr	r3, [sp, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d188      	bne.n	8008ca2 <__ieee754_pow+0xc2>
 8008d90:	4658      	mov	r0, fp
 8008d92:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008d96:	4683      	mov	fp, r0
 8008d98:	469c      	mov	ip, r3
 8008d9a:	e782      	b.n	8008ca2 <__ieee754_pow+0xc2>
 8008d9c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8008da0:	f109 33ff 	add.w	r3, r9, #4294967295
 8008da4:	930d      	str	r3, [sp, #52]	; 0x34
 8008da6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008da8:	9b00      	ldr	r3, [sp, #0]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	d104      	bne.n	8008db8 <__ieee754_pow+0x1d8>
 8008dae:	463a      	mov	r2, r7
 8008db0:	4643      	mov	r3, r8
 8008db2:	4638      	mov	r0, r7
 8008db4:	4641      	mov	r1, r8
 8008db6:	e7e3      	b.n	8008d80 <__ieee754_pow+0x1a0>
 8008db8:	4b17      	ldr	r3, [pc, #92]	; (8008e18 <__ieee754_pow+0x238>)
 8008dba:	429d      	cmp	r5, r3
 8008dbc:	f340 80fe 	ble.w	8008fbc <__ieee754_pow+0x3dc>
 8008dc0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008dc4:	429d      	cmp	r5, r3
 8008dc6:	dd0b      	ble.n	8008de0 <__ieee754_pow+0x200>
 8008dc8:	4b10      	ldr	r3, [pc, #64]	; (8008e0c <__ieee754_pow+0x22c>)
 8008dca:	429c      	cmp	r4, r3
 8008dcc:	dc0e      	bgt.n	8008dec <__ieee754_pow+0x20c>
 8008dce:	2e00      	cmp	r6, #0
 8008dd0:	f6bf af63 	bge.w	8008c9a <__ieee754_pow+0xba>
 8008dd4:	a308      	add	r3, pc, #32	; (adr r3, 8008df8 <__ieee754_pow+0x218>)
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	e794      	b.n	8008d0a <__ieee754_pow+0x12a>
 8008de0:	4b0e      	ldr	r3, [pc, #56]	; (8008e1c <__ieee754_pow+0x23c>)
 8008de2:	429c      	cmp	r4, r3
 8008de4:	ddf3      	ble.n	8008dce <__ieee754_pow+0x1ee>
 8008de6:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <__ieee754_pow+0x230>)
 8008de8:	429c      	cmp	r4, r3
 8008dea:	dd19      	ble.n	8008e20 <__ieee754_pow+0x240>
 8008dec:	2e00      	cmp	r6, #0
 8008dee:	dcf1      	bgt.n	8008dd4 <__ieee754_pow+0x1f4>
 8008df0:	e753      	b.n	8008c9a <__ieee754_pow+0xba>
 8008df2:	bf00      	nop
 8008df4:	f3af 8000 	nop.w
 8008df8:	8800759c 	.word	0x8800759c
 8008dfc:	7e37e43c 	.word	0x7e37e43c
 8008e00:	7ff00000 	.word	0x7ff00000
 8008e04:	0800ab37 	.word	0x0800ab37
 8008e08:	433fffff 	.word	0x433fffff
 8008e0c:	3fefffff 	.word	0x3fefffff
 8008e10:	3ff00000 	.word	0x3ff00000
 8008e14:	3fe00000 	.word	0x3fe00000
 8008e18:	41e00000 	.word	0x41e00000
 8008e1c:	3feffffe 	.word	0x3feffffe
 8008e20:	4661      	mov	r1, ip
 8008e22:	2200      	movs	r2, #0
 8008e24:	4b60      	ldr	r3, [pc, #384]	; (8008fa8 <__ieee754_pow+0x3c8>)
 8008e26:	4658      	mov	r0, fp
 8008e28:	f7f7 f99e 	bl	8000168 <__aeabi_dsub>
 8008e2c:	a354      	add	r3, pc, #336	; (adr r3, 8008f80 <__ieee754_pow+0x3a0>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	4604      	mov	r4, r0
 8008e34:	460d      	mov	r5, r1
 8008e36:	f7f7 fb4f 	bl	80004d8 <__aeabi_dmul>
 8008e3a:	a353      	add	r3, pc, #332	; (adr r3, 8008f88 <__ieee754_pow+0x3a8>)
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	4606      	mov	r6, r0
 8008e42:	460f      	mov	r7, r1
 8008e44:	4620      	mov	r0, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	f7f7 fb46 	bl	80004d8 <__aeabi_dmul>
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4682      	mov	sl, r0
 8008e50:	468b      	mov	fp, r1
 8008e52:	4b56      	ldr	r3, [pc, #344]	; (8008fac <__ieee754_pow+0x3cc>)
 8008e54:	4620      	mov	r0, r4
 8008e56:	4629      	mov	r1, r5
 8008e58:	f7f7 fb3e 	bl	80004d8 <__aeabi_dmul>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	a14b      	add	r1, pc, #300	; (adr r1, 8008f90 <__ieee754_pow+0x3b0>)
 8008e62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e66:	f7f7 f97f 	bl	8000168 <__aeabi_dsub>
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	462b      	mov	r3, r5
 8008e6e:	f7f7 fb33 	bl	80004d8 <__aeabi_dmul>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	2000      	movs	r0, #0
 8008e78:	494d      	ldr	r1, [pc, #308]	; (8008fb0 <__ieee754_pow+0x3d0>)
 8008e7a:	f7f7 f975 	bl	8000168 <__aeabi_dsub>
 8008e7e:	4622      	mov	r2, r4
 8008e80:	462b      	mov	r3, r5
 8008e82:	4680      	mov	r8, r0
 8008e84:	4689      	mov	r9, r1
 8008e86:	4620      	mov	r0, r4
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7f7 fb25 	bl	80004d8 <__aeabi_dmul>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4640      	mov	r0, r8
 8008e94:	4649      	mov	r1, r9
 8008e96:	f7f7 fb1f 	bl	80004d8 <__aeabi_dmul>
 8008e9a:	a33f      	add	r3, pc, #252	; (adr r3, 8008f98 <__ieee754_pow+0x3b8>)
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	f7f7 fb1a 	bl	80004d8 <__aeabi_dmul>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4650      	mov	r0, sl
 8008eaa:	4659      	mov	r1, fp
 8008eac:	f7f7 f95c 	bl	8000168 <__aeabi_dsub>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	460d      	mov	r5, r1
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 f956 	bl	800016c <__adddf3>
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	468b      	mov	fp, r1
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	4632      	mov	r2, r6
 8008ec8:	463b      	mov	r3, r7
 8008eca:	f7f7 f94d 	bl	8000168 <__aeabi_dsub>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	f7f7 f947 	bl	8000168 <__aeabi_dsub>
 8008eda:	9b00      	ldr	r3, [sp, #0]
 8008edc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	f04f 0300 	mov.w	r3, #0
 8008ee6:	bf0c      	ite	eq
 8008ee8:	4c32      	ldreq	r4, [pc, #200]	; (8008fb4 <__ieee754_pow+0x3d4>)
 8008eea:	4c2f      	ldrne	r4, [pc, #188]	; (8008fa8 <__ieee754_pow+0x3c8>)
 8008eec:	4606      	mov	r6, r0
 8008eee:	e9cd 3400 	strd	r3, r4, [sp]
 8008ef2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ef6:	2400      	movs	r4, #0
 8008ef8:	460f      	mov	r7, r1
 8008efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008efe:	4622      	mov	r2, r4
 8008f00:	462b      	mov	r3, r5
 8008f02:	f7f7 f931 	bl	8000168 <__aeabi_dsub>
 8008f06:	4652      	mov	r2, sl
 8008f08:	465b      	mov	r3, fp
 8008f0a:	f7f7 fae5 	bl	80004d8 <__aeabi_dmul>
 8008f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f12:	4680      	mov	r8, r0
 8008f14:	4689      	mov	r9, r1
 8008f16:	4630      	mov	r0, r6
 8008f18:	4639      	mov	r1, r7
 8008f1a:	f7f7 fadd 	bl	80004d8 <__aeabi_dmul>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4640      	mov	r0, r8
 8008f24:	4649      	mov	r1, r9
 8008f26:	f7f7 f921 	bl	800016c <__adddf3>
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	4680      	mov	r8, r0
 8008f30:	4689      	mov	r9, r1
 8008f32:	4650      	mov	r0, sl
 8008f34:	4659      	mov	r1, fp
 8008f36:	f7f7 facf 	bl	80004d8 <__aeabi_dmul>
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4602      	mov	r2, r0
 8008f42:	4649      	mov	r1, r9
 8008f44:	4640      	mov	r0, r8
 8008f46:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008f4a:	f7f7 f90f 	bl	800016c <__adddf3>
 8008f4e:	4b1a      	ldr	r3, [pc, #104]	; (8008fb8 <__ieee754_pow+0x3d8>)
 8008f50:	4682      	mov	sl, r0
 8008f52:	4299      	cmp	r1, r3
 8008f54:	460f      	mov	r7, r1
 8008f56:	460e      	mov	r6, r1
 8008f58:	f340 82e1 	ble.w	800951e <__ieee754_pow+0x93e>
 8008f5c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008f60:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008f64:	4303      	orrs	r3, r0
 8008f66:	f000 81db 	beq.w	8009320 <__ieee754_pow+0x740>
 8008f6a:	a30d      	add	r3, pc, #52	; (adr r3, 8008fa0 <__ieee754_pow+0x3c0>)
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f74:	f7f7 fab0 	bl	80004d8 <__aeabi_dmul>
 8008f78:	a309      	add	r3, pc, #36	; (adr r3, 8008fa0 <__ieee754_pow+0x3c0>)
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	e6c4      	b.n	8008d0a <__ieee754_pow+0x12a>
 8008f80:	60000000 	.word	0x60000000
 8008f84:	3ff71547 	.word	0x3ff71547
 8008f88:	f85ddf44 	.word	0xf85ddf44
 8008f8c:	3e54ae0b 	.word	0x3e54ae0b
 8008f90:	55555555 	.word	0x55555555
 8008f94:	3fd55555 	.word	0x3fd55555
 8008f98:	652b82fe 	.word	0x652b82fe
 8008f9c:	3ff71547 	.word	0x3ff71547
 8008fa0:	8800759c 	.word	0x8800759c
 8008fa4:	7e37e43c 	.word	0x7e37e43c
 8008fa8:	3ff00000 	.word	0x3ff00000
 8008fac:	3fd00000 	.word	0x3fd00000
 8008fb0:	3fe00000 	.word	0x3fe00000
 8008fb4:	bff00000 	.word	0xbff00000
 8008fb8:	408fffff 	.word	0x408fffff
 8008fbc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008fc0:	f04f 0200 	mov.w	r2, #0
 8008fc4:	da08      	bge.n	8008fd8 <__ieee754_pow+0x3f8>
 8008fc6:	4658      	mov	r0, fp
 8008fc8:	4bcd      	ldr	r3, [pc, #820]	; (8009300 <__ieee754_pow+0x720>)
 8008fca:	4661      	mov	r1, ip
 8008fcc:	f7f7 fa84 	bl	80004d8 <__aeabi_dmul>
 8008fd0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008fd4:	4683      	mov	fp, r0
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	1523      	asrs	r3, r4, #20
 8008fda:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008fde:	4413      	add	r3, r2
 8008fe0:	930c      	str	r3, [sp, #48]	; 0x30
 8008fe2:	4bc8      	ldr	r3, [pc, #800]	; (8009304 <__ieee754_pow+0x724>)
 8008fe4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008fe8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008fec:	429c      	cmp	r4, r3
 8008fee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ff2:	dd08      	ble.n	8009006 <__ieee754_pow+0x426>
 8008ff4:	4bc4      	ldr	r3, [pc, #784]	; (8009308 <__ieee754_pow+0x728>)
 8008ff6:	429c      	cmp	r4, r3
 8008ff8:	f340 815b 	ble.w	80092b2 <__ieee754_pow+0x6d2>
 8008ffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ffe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009002:	3301      	adds	r3, #1
 8009004:	930c      	str	r3, [sp, #48]	; 0x30
 8009006:	f04f 0800 	mov.w	r8, #0
 800900a:	4658      	mov	r0, fp
 800900c:	4629      	mov	r1, r5
 800900e:	4bbf      	ldr	r3, [pc, #764]	; (800930c <__ieee754_pow+0x72c>)
 8009010:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8009014:	444b      	add	r3, r9
 8009016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800901a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800901e:	461a      	mov	r2, r3
 8009020:	4623      	mov	r3, r4
 8009022:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009026:	f7f7 f89f 	bl	8000168 <__aeabi_dsub>
 800902a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800902e:	4606      	mov	r6, r0
 8009030:	460f      	mov	r7, r1
 8009032:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009036:	f7f7 f899 	bl	800016c <__adddf3>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	2000      	movs	r0, #0
 8009040:	49b3      	ldr	r1, [pc, #716]	; (8009310 <__ieee754_pow+0x730>)
 8009042:	f7f7 fb73 	bl	800072c <__aeabi_ddiv>
 8009046:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 fa41 	bl	80004d8 <__aeabi_dmul>
 8009056:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800905a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800905e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009062:	2300      	movs	r3, #0
 8009064:	2200      	movs	r2, #0
 8009066:	106d      	asrs	r5, r5, #1
 8009068:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800906c:	9304      	str	r3, [sp, #16]
 800906e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009072:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009076:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800907a:	4650      	mov	r0, sl
 800907c:	4659      	mov	r1, fp
 800907e:	4614      	mov	r4, r2
 8009080:	461d      	mov	r5, r3
 8009082:	f7f7 fa29 	bl	80004d8 <__aeabi_dmul>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4630      	mov	r0, r6
 800908c:	4639      	mov	r1, r7
 800908e:	f7f7 f86b 	bl	8000168 <__aeabi_dsub>
 8009092:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	4620      	mov	r0, r4
 800909c:	4629      	mov	r1, r5
 800909e:	f7f7 f863 	bl	8000168 <__aeabi_dsub>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090aa:	f7f7 f85d 	bl	8000168 <__aeabi_dsub>
 80090ae:	4652      	mov	r2, sl
 80090b0:	465b      	mov	r3, fp
 80090b2:	f7f7 fa11 	bl	80004d8 <__aeabi_dmul>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 f853 	bl	8000168 <__aeabi_dsub>
 80090c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80090c6:	f7f7 fa07 	bl	80004d8 <__aeabi_dmul>
 80090ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80090d2:	4610      	mov	r0, r2
 80090d4:	4619      	mov	r1, r3
 80090d6:	f7f7 f9ff 	bl	80004d8 <__aeabi_dmul>
 80090da:	a377      	add	r3, pc, #476	; (adr r3, 80092b8 <__ieee754_pow+0x6d8>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	4604      	mov	r4, r0
 80090e2:	460d      	mov	r5, r1
 80090e4:	f7f7 f9f8 	bl	80004d8 <__aeabi_dmul>
 80090e8:	a375      	add	r3, pc, #468	; (adr r3, 80092c0 <__ieee754_pow+0x6e0>)
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f7f7 f83d 	bl	800016c <__adddf3>
 80090f2:	4622      	mov	r2, r4
 80090f4:	462b      	mov	r3, r5
 80090f6:	f7f7 f9ef 	bl	80004d8 <__aeabi_dmul>
 80090fa:	a373      	add	r3, pc, #460	; (adr r3, 80092c8 <__ieee754_pow+0x6e8>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 f834 	bl	800016c <__adddf3>
 8009104:	4622      	mov	r2, r4
 8009106:	462b      	mov	r3, r5
 8009108:	f7f7 f9e6 	bl	80004d8 <__aeabi_dmul>
 800910c:	a370      	add	r3, pc, #448	; (adr r3, 80092d0 <__ieee754_pow+0x6f0>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 f82b 	bl	800016c <__adddf3>
 8009116:	4622      	mov	r2, r4
 8009118:	462b      	mov	r3, r5
 800911a:	f7f7 f9dd 	bl	80004d8 <__aeabi_dmul>
 800911e:	a36e      	add	r3, pc, #440	; (adr r3, 80092d8 <__ieee754_pow+0x6f8>)
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f7f7 f822 	bl	800016c <__adddf3>
 8009128:	4622      	mov	r2, r4
 800912a:	462b      	mov	r3, r5
 800912c:	f7f7 f9d4 	bl	80004d8 <__aeabi_dmul>
 8009130:	a36b      	add	r3, pc, #428	; (adr r3, 80092e0 <__ieee754_pow+0x700>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f7f7 f819 	bl	800016c <__adddf3>
 800913a:	4622      	mov	r2, r4
 800913c:	4606      	mov	r6, r0
 800913e:	460f      	mov	r7, r1
 8009140:	462b      	mov	r3, r5
 8009142:	4620      	mov	r0, r4
 8009144:	4629      	mov	r1, r5
 8009146:	f7f7 f9c7 	bl	80004d8 <__aeabi_dmul>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4630      	mov	r0, r6
 8009150:	4639      	mov	r1, r7
 8009152:	f7f7 f9c1 	bl	80004d8 <__aeabi_dmul>
 8009156:	4604      	mov	r4, r0
 8009158:	460d      	mov	r5, r1
 800915a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800915e:	4652      	mov	r2, sl
 8009160:	465b      	mov	r3, fp
 8009162:	f7f7 f803 	bl	800016c <__adddf3>
 8009166:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800916a:	f7f7 f9b5 	bl	80004d8 <__aeabi_dmul>
 800916e:	4622      	mov	r2, r4
 8009170:	462b      	mov	r3, r5
 8009172:	f7f6 fffb 	bl	800016c <__adddf3>
 8009176:	4652      	mov	r2, sl
 8009178:	4606      	mov	r6, r0
 800917a:	460f      	mov	r7, r1
 800917c:	465b      	mov	r3, fp
 800917e:	4650      	mov	r0, sl
 8009180:	4659      	mov	r1, fp
 8009182:	f7f7 f9a9 	bl	80004d8 <__aeabi_dmul>
 8009186:	2200      	movs	r2, #0
 8009188:	4b62      	ldr	r3, [pc, #392]	; (8009314 <__ieee754_pow+0x734>)
 800918a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800918e:	f7f6 ffed 	bl	800016c <__adddf3>
 8009192:	4632      	mov	r2, r6
 8009194:	463b      	mov	r3, r7
 8009196:	f7f6 ffe9 	bl	800016c <__adddf3>
 800919a:	9804      	ldr	r0, [sp, #16]
 800919c:	460d      	mov	r5, r1
 800919e:	4604      	mov	r4, r0
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4650      	mov	r0, sl
 80091a6:	4659      	mov	r1, fp
 80091a8:	f7f7 f996 	bl	80004d8 <__aeabi_dmul>
 80091ac:	2200      	movs	r2, #0
 80091ae:	4682      	mov	sl, r0
 80091b0:	468b      	mov	fp, r1
 80091b2:	4b58      	ldr	r3, [pc, #352]	; (8009314 <__ieee754_pow+0x734>)
 80091b4:	4620      	mov	r0, r4
 80091b6:	4629      	mov	r1, r5
 80091b8:	f7f6 ffd6 	bl	8000168 <__aeabi_dsub>
 80091bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091c0:	f7f6 ffd2 	bl	8000168 <__aeabi_dsub>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4630      	mov	r0, r6
 80091ca:	4639      	mov	r1, r7
 80091cc:	f7f6 ffcc 	bl	8000168 <__aeabi_dsub>
 80091d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091d4:	f7f7 f980 	bl	80004d8 <__aeabi_dmul>
 80091d8:	4622      	mov	r2, r4
 80091da:	4606      	mov	r6, r0
 80091dc:	460f      	mov	r7, r1
 80091de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80091e2:	462b      	mov	r3, r5
 80091e4:	f7f7 f978 	bl	80004d8 <__aeabi_dmul>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4630      	mov	r0, r6
 80091ee:	4639      	mov	r1, r7
 80091f0:	f7f6 ffbc 	bl	800016c <__adddf3>
 80091f4:	4606      	mov	r6, r0
 80091f6:	460f      	mov	r7, r1
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4650      	mov	r0, sl
 80091fe:	4659      	mov	r1, fp
 8009200:	f7f6 ffb4 	bl	800016c <__adddf3>
 8009204:	a338      	add	r3, pc, #224	; (adr r3, 80092e8 <__ieee754_pow+0x708>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	9804      	ldr	r0, [sp, #16]
 800920c:	460d      	mov	r5, r1
 800920e:	4604      	mov	r4, r0
 8009210:	f7f7 f962 	bl	80004d8 <__aeabi_dmul>
 8009214:	4652      	mov	r2, sl
 8009216:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800921a:	465b      	mov	r3, fp
 800921c:	4620      	mov	r0, r4
 800921e:	4629      	mov	r1, r5
 8009220:	f7f6 ffa2 	bl	8000168 <__aeabi_dsub>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	4630      	mov	r0, r6
 800922a:	4639      	mov	r1, r7
 800922c:	f7f6 ff9c 	bl	8000168 <__aeabi_dsub>
 8009230:	a32f      	add	r3, pc, #188	; (adr r3, 80092f0 <__ieee754_pow+0x710>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 f94f 	bl	80004d8 <__aeabi_dmul>
 800923a:	a32f      	add	r3, pc, #188	; (adr r3, 80092f8 <__ieee754_pow+0x718>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	4606      	mov	r6, r0
 8009242:	460f      	mov	r7, r1
 8009244:	4620      	mov	r0, r4
 8009246:	4629      	mov	r1, r5
 8009248:	f7f7 f946 	bl	80004d8 <__aeabi_dmul>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f6 ff8a 	bl	800016c <__adddf3>
 8009258:	4b2f      	ldr	r3, [pc, #188]	; (8009318 <__ieee754_pow+0x738>)
 800925a:	444b      	add	r3, r9
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f6 ff84 	bl	800016c <__adddf3>
 8009264:	4604      	mov	r4, r0
 8009266:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009268:	460d      	mov	r5, r1
 800926a:	f7f7 f8cb 	bl	8000404 <__aeabi_i2d>
 800926e:	4606      	mov	r6, r0
 8009270:	460f      	mov	r7, r1
 8009272:	4b2a      	ldr	r3, [pc, #168]	; (800931c <__ieee754_pow+0x73c>)
 8009274:	4622      	mov	r2, r4
 8009276:	444b      	add	r3, r9
 8009278:	e9d3 8900 	ldrd	r8, r9, [r3]
 800927c:	462b      	mov	r3, r5
 800927e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009282:	f7f6 ff73 	bl	800016c <__adddf3>
 8009286:	4642      	mov	r2, r8
 8009288:	464b      	mov	r3, r9
 800928a:	f7f6 ff6f 	bl	800016c <__adddf3>
 800928e:	4632      	mov	r2, r6
 8009290:	463b      	mov	r3, r7
 8009292:	f7f6 ff6b 	bl	800016c <__adddf3>
 8009296:	9804      	ldr	r0, [sp, #16]
 8009298:	4632      	mov	r2, r6
 800929a:	463b      	mov	r3, r7
 800929c:	4682      	mov	sl, r0
 800929e:	468b      	mov	fp, r1
 80092a0:	f7f6 ff62 	bl	8000168 <__aeabi_dsub>
 80092a4:	4642      	mov	r2, r8
 80092a6:	464b      	mov	r3, r9
 80092a8:	f7f6 ff5e 	bl	8000168 <__aeabi_dsub>
 80092ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092b0:	e60b      	b.n	8008eca <__ieee754_pow+0x2ea>
 80092b2:	f04f 0801 	mov.w	r8, #1
 80092b6:	e6a8      	b.n	800900a <__ieee754_pow+0x42a>
 80092b8:	4a454eef 	.word	0x4a454eef
 80092bc:	3fca7e28 	.word	0x3fca7e28
 80092c0:	93c9db65 	.word	0x93c9db65
 80092c4:	3fcd864a 	.word	0x3fcd864a
 80092c8:	a91d4101 	.word	0xa91d4101
 80092cc:	3fd17460 	.word	0x3fd17460
 80092d0:	518f264d 	.word	0x518f264d
 80092d4:	3fd55555 	.word	0x3fd55555
 80092d8:	db6fabff 	.word	0xdb6fabff
 80092dc:	3fdb6db6 	.word	0x3fdb6db6
 80092e0:	33333303 	.word	0x33333303
 80092e4:	3fe33333 	.word	0x3fe33333
 80092e8:	e0000000 	.word	0xe0000000
 80092ec:	3feec709 	.word	0x3feec709
 80092f0:	dc3a03fd 	.word	0xdc3a03fd
 80092f4:	3feec709 	.word	0x3feec709
 80092f8:	145b01f5 	.word	0x145b01f5
 80092fc:	be3e2fe0 	.word	0xbe3e2fe0
 8009300:	43400000 	.word	0x43400000
 8009304:	0003988e 	.word	0x0003988e
 8009308:	000bb679 	.word	0x000bb679
 800930c:	0800b140 	.word	0x0800b140
 8009310:	3ff00000 	.word	0x3ff00000
 8009314:	40080000 	.word	0x40080000
 8009318:	0800b160 	.word	0x0800b160
 800931c:	0800b150 	.word	0x0800b150
 8009320:	a39b      	add	r3, pc, #620	; (adr r3, 8009590 <__ieee754_pow+0x9b0>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	4640      	mov	r0, r8
 8009328:	4649      	mov	r1, r9
 800932a:	f7f6 ff1f 	bl	800016c <__adddf3>
 800932e:	4622      	mov	r2, r4
 8009330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009334:	462b      	mov	r3, r5
 8009336:	4650      	mov	r0, sl
 8009338:	4639      	mov	r1, r7
 800933a:	f7f6 ff15 	bl	8000168 <__aeabi_dsub>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009346:	f7f7 fb57 	bl	80009f8 <__aeabi_dcmpgt>
 800934a:	2800      	cmp	r0, #0
 800934c:	f47f ae0d 	bne.w	8008f6a <__ieee754_pow+0x38a>
 8009350:	4aa3      	ldr	r2, [pc, #652]	; (80095e0 <__ieee754_pow+0xa00>)
 8009352:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009356:	4293      	cmp	r3, r2
 8009358:	f340 8103 	ble.w	8009562 <__ieee754_pow+0x982>
 800935c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009360:	2000      	movs	r0, #0
 8009362:	151b      	asrs	r3, r3, #20
 8009364:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009368:	fa4a f303 	asr.w	r3, sl, r3
 800936c:	4433      	add	r3, r6
 800936e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009372:	4f9c      	ldr	r7, [pc, #624]	; (80095e4 <__ieee754_pow+0xa04>)
 8009374:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009378:	4117      	asrs	r7, r2
 800937a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800937e:	ea23 0107 	bic.w	r1, r3, r7
 8009382:	f1c2 0214 	rsb	r2, r2, #20
 8009386:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800938a:	fa4a fa02 	asr.w	sl, sl, r2
 800938e:	2e00      	cmp	r6, #0
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4620      	mov	r0, r4
 8009396:	4629      	mov	r1, r5
 8009398:	bfb8      	it	lt
 800939a:	f1ca 0a00 	rsblt	sl, sl, #0
 800939e:	f7f6 fee3 	bl	8000168 <__aeabi_dsub>
 80093a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093aa:	4642      	mov	r2, r8
 80093ac:	464b      	mov	r3, r9
 80093ae:	f7f6 fedd 	bl	800016c <__adddf3>
 80093b2:	a379      	add	r3, pc, #484	; (adr r3, 8009598 <__ieee754_pow+0x9b8>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	2000      	movs	r0, #0
 80093ba:	460d      	mov	r5, r1
 80093bc:	4604      	mov	r4, r0
 80093be:	f7f7 f88b 	bl	80004d8 <__aeabi_dmul>
 80093c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093c6:	4606      	mov	r6, r0
 80093c8:	460f      	mov	r7, r1
 80093ca:	4620      	mov	r0, r4
 80093cc:	4629      	mov	r1, r5
 80093ce:	f7f6 fecb 	bl	8000168 <__aeabi_dsub>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	f7f6 fec5 	bl	8000168 <__aeabi_dsub>
 80093de:	a370      	add	r3, pc, #448	; (adr r3, 80095a0 <__ieee754_pow+0x9c0>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	f7f7 f878 	bl	80004d8 <__aeabi_dmul>
 80093e8:	a36f      	add	r3, pc, #444	; (adr r3, 80095a8 <__ieee754_pow+0x9c8>)
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	4680      	mov	r8, r0
 80093f0:	4689      	mov	r9, r1
 80093f2:	4620      	mov	r0, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	f7f7 f86f 	bl	80004d8 <__aeabi_dmul>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4640      	mov	r0, r8
 8009400:	4649      	mov	r1, r9
 8009402:	f7f6 feb3 	bl	800016c <__adddf3>
 8009406:	4604      	mov	r4, r0
 8009408:	460d      	mov	r5, r1
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	4630      	mov	r0, r6
 8009410:	4639      	mov	r1, r7
 8009412:	f7f6 feab 	bl	800016c <__adddf3>
 8009416:	4632      	mov	r2, r6
 8009418:	463b      	mov	r3, r7
 800941a:	4680      	mov	r8, r0
 800941c:	4689      	mov	r9, r1
 800941e:	f7f6 fea3 	bl	8000168 <__aeabi_dsub>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f6 fe9d 	bl	8000168 <__aeabi_dsub>
 800942e:	4642      	mov	r2, r8
 8009430:	4606      	mov	r6, r0
 8009432:	460f      	mov	r7, r1
 8009434:	464b      	mov	r3, r9
 8009436:	4640      	mov	r0, r8
 8009438:	4649      	mov	r1, r9
 800943a:	f7f7 f84d 	bl	80004d8 <__aeabi_dmul>
 800943e:	a35c      	add	r3, pc, #368	; (adr r3, 80095b0 <__ieee754_pow+0x9d0>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	f7f7 f846 	bl	80004d8 <__aeabi_dmul>
 800944c:	a35a      	add	r3, pc, #360	; (adr r3, 80095b8 <__ieee754_pow+0x9d8>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f6 fe89 	bl	8000168 <__aeabi_dsub>
 8009456:	4622      	mov	r2, r4
 8009458:	462b      	mov	r3, r5
 800945a:	f7f7 f83d 	bl	80004d8 <__aeabi_dmul>
 800945e:	a358      	add	r3, pc, #352	; (adr r3, 80095c0 <__ieee754_pow+0x9e0>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f7f6 fe82 	bl	800016c <__adddf3>
 8009468:	4622      	mov	r2, r4
 800946a:	462b      	mov	r3, r5
 800946c:	f7f7 f834 	bl	80004d8 <__aeabi_dmul>
 8009470:	a355      	add	r3, pc, #340	; (adr r3, 80095c8 <__ieee754_pow+0x9e8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f6 fe77 	bl	8000168 <__aeabi_dsub>
 800947a:	4622      	mov	r2, r4
 800947c:	462b      	mov	r3, r5
 800947e:	f7f7 f82b 	bl	80004d8 <__aeabi_dmul>
 8009482:	a353      	add	r3, pc, #332	; (adr r3, 80095d0 <__ieee754_pow+0x9f0>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f7f6 fe70 	bl	800016c <__adddf3>
 800948c:	4622      	mov	r2, r4
 800948e:	462b      	mov	r3, r5
 8009490:	f7f7 f822 	bl	80004d8 <__aeabi_dmul>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4640      	mov	r0, r8
 800949a:	4649      	mov	r1, r9
 800949c:	f7f6 fe64 	bl	8000168 <__aeabi_dsub>
 80094a0:	4604      	mov	r4, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4640      	mov	r0, r8
 80094aa:	4649      	mov	r1, r9
 80094ac:	f7f7 f814 	bl	80004d8 <__aeabi_dmul>
 80094b0:	2200      	movs	r2, #0
 80094b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094ba:	4620      	mov	r0, r4
 80094bc:	4629      	mov	r1, r5
 80094be:	f7f6 fe53 	bl	8000168 <__aeabi_dsub>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ca:	f7f7 f92f 	bl	800072c <__aeabi_ddiv>
 80094ce:	4632      	mov	r2, r6
 80094d0:	4604      	mov	r4, r0
 80094d2:	460d      	mov	r5, r1
 80094d4:	463b      	mov	r3, r7
 80094d6:	4640      	mov	r0, r8
 80094d8:	4649      	mov	r1, r9
 80094da:	f7f6 fffd 	bl	80004d8 <__aeabi_dmul>
 80094de:	4632      	mov	r2, r6
 80094e0:	463b      	mov	r3, r7
 80094e2:	f7f6 fe43 	bl	800016c <__adddf3>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4620      	mov	r0, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	f7f6 fe3b 	bl	8000168 <__aeabi_dsub>
 80094f2:	4642      	mov	r2, r8
 80094f4:	464b      	mov	r3, r9
 80094f6:	f7f6 fe37 	bl	8000168 <__aeabi_dsub>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	2000      	movs	r0, #0
 8009500:	4939      	ldr	r1, [pc, #228]	; (80095e8 <__ieee754_pow+0xa08>)
 8009502:	f7f6 fe31 	bl	8000168 <__aeabi_dsub>
 8009506:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800950a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800950e:	da2b      	bge.n	8009568 <__ieee754_pow+0x988>
 8009510:	4652      	mov	r2, sl
 8009512:	f000 f9b9 	bl	8009888 <scalbn>
 8009516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800951a:	f7ff bbf6 	b.w	8008d0a <__ieee754_pow+0x12a>
 800951e:	4b33      	ldr	r3, [pc, #204]	; (80095ec <__ieee754_pow+0xa0c>)
 8009520:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009524:	429f      	cmp	r7, r3
 8009526:	f77f af13 	ble.w	8009350 <__ieee754_pow+0x770>
 800952a:	4b31      	ldr	r3, [pc, #196]	; (80095f0 <__ieee754_pow+0xa10>)
 800952c:	440b      	add	r3, r1
 800952e:	4303      	orrs	r3, r0
 8009530:	d00b      	beq.n	800954a <__ieee754_pow+0x96a>
 8009532:	a329      	add	r3, pc, #164	; (adr r3, 80095d8 <__ieee754_pow+0x9f8>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	e9dd 0100 	ldrd	r0, r1, [sp]
 800953c:	f7f6 ffcc 	bl	80004d8 <__aeabi_dmul>
 8009540:	a325      	add	r3, pc, #148	; (adr r3, 80095d8 <__ieee754_pow+0x9f8>)
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	f7ff bbe0 	b.w	8008d0a <__ieee754_pow+0x12a>
 800954a:	4622      	mov	r2, r4
 800954c:	462b      	mov	r3, r5
 800954e:	f7f6 fe0b 	bl	8000168 <__aeabi_dsub>
 8009552:	4642      	mov	r2, r8
 8009554:	464b      	mov	r3, r9
 8009556:	f7f7 fa45 	bl	80009e4 <__aeabi_dcmpge>
 800955a:	2800      	cmp	r0, #0
 800955c:	f43f aef8 	beq.w	8009350 <__ieee754_pow+0x770>
 8009560:	e7e7      	b.n	8009532 <__ieee754_pow+0x952>
 8009562:	f04f 0a00 	mov.w	sl, #0
 8009566:	e71e      	b.n	80093a6 <__ieee754_pow+0x7c6>
 8009568:	4621      	mov	r1, r4
 800956a:	e7d4      	b.n	8009516 <__ieee754_pow+0x936>
 800956c:	f04f 0b00 	mov.w	fp, #0
 8009570:	f8df c074 	ldr.w	ip, [pc, #116]	; 80095e8 <__ieee754_pow+0xa08>
 8009574:	f7ff bb95 	b.w	8008ca2 <__ieee754_pow+0xc2>
 8009578:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800957c:	f7ff bb91 	b.w	8008ca2 <__ieee754_pow+0xc2>
 8009580:	4638      	mov	r0, r7
 8009582:	4641      	mov	r1, r8
 8009584:	f7ff bbc3 	b.w	8008d0e <__ieee754_pow+0x12e>
 8009588:	9200      	str	r2, [sp, #0]
 800958a:	f7ff bb9f 	b.w	8008ccc <__ieee754_pow+0xec>
 800958e:	bf00      	nop
 8009590:	652b82fe 	.word	0x652b82fe
 8009594:	3c971547 	.word	0x3c971547
 8009598:	00000000 	.word	0x00000000
 800959c:	3fe62e43 	.word	0x3fe62e43
 80095a0:	fefa39ef 	.word	0xfefa39ef
 80095a4:	3fe62e42 	.word	0x3fe62e42
 80095a8:	0ca86c39 	.word	0x0ca86c39
 80095ac:	be205c61 	.word	0xbe205c61
 80095b0:	72bea4d0 	.word	0x72bea4d0
 80095b4:	3e663769 	.word	0x3e663769
 80095b8:	c5d26bf1 	.word	0xc5d26bf1
 80095bc:	3ebbbd41 	.word	0x3ebbbd41
 80095c0:	af25de2c 	.word	0xaf25de2c
 80095c4:	3f11566a 	.word	0x3f11566a
 80095c8:	16bebd93 	.word	0x16bebd93
 80095cc:	3f66c16c 	.word	0x3f66c16c
 80095d0:	5555553e 	.word	0x5555553e
 80095d4:	3fc55555 	.word	0x3fc55555
 80095d8:	c2f8f359 	.word	0xc2f8f359
 80095dc:	01a56e1f 	.word	0x01a56e1f
 80095e0:	3fe00000 	.word	0x3fe00000
 80095e4:	000fffff 	.word	0x000fffff
 80095e8:	3ff00000 	.word	0x3ff00000
 80095ec:	4090cbff 	.word	0x4090cbff
 80095f0:	3f6f3400 	.word	0x3f6f3400

080095f4 <__ieee754_sqrt>:
 80095f4:	4b54      	ldr	r3, [pc, #336]	; (8009748 <__ieee754_sqrt+0x154>)
 80095f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095fa:	438b      	bics	r3, r1
 80095fc:	4606      	mov	r6, r0
 80095fe:	460d      	mov	r5, r1
 8009600:	460a      	mov	r2, r1
 8009602:	460c      	mov	r4, r1
 8009604:	d10f      	bne.n	8009626 <__ieee754_sqrt+0x32>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	f7f6 ff65 	bl	80004d8 <__aeabi_dmul>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4630      	mov	r0, r6
 8009614:	4629      	mov	r1, r5
 8009616:	f7f6 fda9 	bl	800016c <__adddf3>
 800961a:	4606      	mov	r6, r0
 800961c:	460d      	mov	r5, r1
 800961e:	4630      	mov	r0, r6
 8009620:	4629      	mov	r1, r5
 8009622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009626:	2900      	cmp	r1, #0
 8009628:	4607      	mov	r7, r0
 800962a:	4603      	mov	r3, r0
 800962c:	dc0e      	bgt.n	800964c <__ieee754_sqrt+0x58>
 800962e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009632:	ea5c 0707 	orrs.w	r7, ip, r7
 8009636:	d0f2      	beq.n	800961e <__ieee754_sqrt+0x2a>
 8009638:	b141      	cbz	r1, 800964c <__ieee754_sqrt+0x58>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	f7f6 fd93 	bl	8000168 <__aeabi_dsub>
 8009642:	4602      	mov	r2, r0
 8009644:	460b      	mov	r3, r1
 8009646:	f7f7 f871 	bl	800072c <__aeabi_ddiv>
 800964a:	e7e6      	b.n	800961a <__ieee754_sqrt+0x26>
 800964c:	1512      	asrs	r2, r2, #20
 800964e:	d074      	beq.n	800973a <__ieee754_sqrt+0x146>
 8009650:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009654:	07d5      	lsls	r5, r2, #31
 8009656:	f04f 0500 	mov.w	r5, #0
 800965a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800965e:	bf48      	it	mi
 8009660:	0fd9      	lsrmi	r1, r3, #31
 8009662:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009666:	bf44      	itt	mi
 8009668:	005b      	lslmi	r3, r3, #1
 800966a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800966e:	1051      	asrs	r1, r2, #1
 8009670:	0fda      	lsrs	r2, r3, #31
 8009672:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8009676:	4628      	mov	r0, r5
 8009678:	2216      	movs	r2, #22
 800967a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	1987      	adds	r7, r0, r6
 8009682:	42a7      	cmp	r7, r4
 8009684:	bfde      	ittt	le
 8009686:	19b8      	addle	r0, r7, r6
 8009688:	1be4      	suble	r4, r4, r7
 800968a:	19ad      	addle	r5, r5, r6
 800968c:	0fdf      	lsrs	r7, r3, #31
 800968e:	3a01      	subs	r2, #1
 8009690:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8009694:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009698:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800969c:	d1f0      	bne.n	8009680 <__ieee754_sqrt+0x8c>
 800969e:	f04f 0c20 	mov.w	ip, #32
 80096a2:	4696      	mov	lr, r2
 80096a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80096a8:	4284      	cmp	r4, r0
 80096aa:	eb06 070e 	add.w	r7, r6, lr
 80096ae:	dc02      	bgt.n	80096b6 <__ieee754_sqrt+0xc2>
 80096b0:	d112      	bne.n	80096d8 <__ieee754_sqrt+0xe4>
 80096b2:	429f      	cmp	r7, r3
 80096b4:	d810      	bhi.n	80096d8 <__ieee754_sqrt+0xe4>
 80096b6:	2f00      	cmp	r7, #0
 80096b8:	eb07 0e06 	add.w	lr, r7, r6
 80096bc:	da42      	bge.n	8009744 <__ieee754_sqrt+0x150>
 80096be:	f1be 0f00 	cmp.w	lr, #0
 80096c2:	db3f      	blt.n	8009744 <__ieee754_sqrt+0x150>
 80096c4:	f100 0801 	add.w	r8, r0, #1
 80096c8:	1a24      	subs	r4, r4, r0
 80096ca:	4640      	mov	r0, r8
 80096cc:	429f      	cmp	r7, r3
 80096ce:	bf88      	it	hi
 80096d0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80096d4:	1bdb      	subs	r3, r3, r7
 80096d6:	4432      	add	r2, r6
 80096d8:	0064      	lsls	r4, r4, #1
 80096da:	f1bc 0c01 	subs.w	ip, ip, #1
 80096de:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80096e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096ea:	d1dd      	bne.n	80096a8 <__ieee754_sqrt+0xb4>
 80096ec:	4323      	orrs	r3, r4
 80096ee:	d006      	beq.n	80096fe <__ieee754_sqrt+0x10a>
 80096f0:	1c54      	adds	r4, r2, #1
 80096f2:	bf0b      	itete	eq
 80096f4:	4662      	moveq	r2, ip
 80096f6:	3201      	addne	r2, #1
 80096f8:	3501      	addeq	r5, #1
 80096fa:	f022 0201 	bicne.w	r2, r2, #1
 80096fe:	106b      	asrs	r3, r5, #1
 8009700:	0852      	lsrs	r2, r2, #1
 8009702:	07e8      	lsls	r0, r5, #31
 8009704:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009708:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800970c:	bf48      	it	mi
 800970e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009712:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8009716:	4616      	mov	r6, r2
 8009718:	e781      	b.n	800961e <__ieee754_sqrt+0x2a>
 800971a:	0adc      	lsrs	r4, r3, #11
 800971c:	3915      	subs	r1, #21
 800971e:	055b      	lsls	r3, r3, #21
 8009720:	2c00      	cmp	r4, #0
 8009722:	d0fa      	beq.n	800971a <__ieee754_sqrt+0x126>
 8009724:	02e6      	lsls	r6, r4, #11
 8009726:	d50a      	bpl.n	800973e <__ieee754_sqrt+0x14a>
 8009728:	f1c2 0020 	rsb	r0, r2, #32
 800972c:	fa23 f000 	lsr.w	r0, r3, r0
 8009730:	1e55      	subs	r5, r2, #1
 8009732:	4093      	lsls	r3, r2
 8009734:	4304      	orrs	r4, r0
 8009736:	1b4a      	subs	r2, r1, r5
 8009738:	e78a      	b.n	8009650 <__ieee754_sqrt+0x5c>
 800973a:	4611      	mov	r1, r2
 800973c:	e7f0      	b.n	8009720 <__ieee754_sqrt+0x12c>
 800973e:	0064      	lsls	r4, r4, #1
 8009740:	3201      	adds	r2, #1
 8009742:	e7ef      	b.n	8009724 <__ieee754_sqrt+0x130>
 8009744:	4680      	mov	r8, r0
 8009746:	e7bf      	b.n	80096c8 <__ieee754_sqrt+0xd4>
 8009748:	7ff00000 	.word	0x7ff00000

0800974c <fabs>:
 800974c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009750:	4619      	mov	r1, r3
 8009752:	4770      	bx	lr

08009754 <finite>:
 8009754:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009758:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800975c:	0fc0      	lsrs	r0, r0, #31
 800975e:	4770      	bx	lr

08009760 <matherr>:
 8009760:	2000      	movs	r0, #0
 8009762:	4770      	bx	lr

08009764 <nan>:
 8009764:	2000      	movs	r0, #0
 8009766:	4901      	ldr	r1, [pc, #4]	; (800976c <nan+0x8>)
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	7ff80000 	.word	0x7ff80000

08009770 <rint>:
 8009770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009772:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009776:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800977a:	f1bc 0f13 	cmp.w	ip, #19
 800977e:	4604      	mov	r4, r0
 8009780:	460d      	mov	r5, r1
 8009782:	460b      	mov	r3, r1
 8009784:	4606      	mov	r6, r0
 8009786:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800978a:	dc5a      	bgt.n	8009842 <rint+0xd2>
 800978c:	f1bc 0f00 	cmp.w	ip, #0
 8009790:	da2b      	bge.n	80097ea <rint+0x7a>
 8009792:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009796:	4302      	orrs	r2, r0
 8009798:	d023      	beq.n	80097e2 <rint+0x72>
 800979a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800979e:	4302      	orrs	r2, r0
 80097a0:	4256      	negs	r6, r2
 80097a2:	4316      	orrs	r6, r2
 80097a4:	0c4b      	lsrs	r3, r1, #17
 80097a6:	0b36      	lsrs	r6, r6, #12
 80097a8:	4934      	ldr	r1, [pc, #208]	; (800987c <rint+0x10c>)
 80097aa:	045b      	lsls	r3, r3, #17
 80097ac:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80097b0:	ea46 0503 	orr.w	r5, r6, r3
 80097b4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80097b8:	4602      	mov	r2, r0
 80097ba:	462b      	mov	r3, r5
 80097bc:	e9d1 4500 	ldrd	r4, r5, [r1]
 80097c0:	4620      	mov	r0, r4
 80097c2:	4629      	mov	r1, r5
 80097c4:	f7f6 fcd2 	bl	800016c <__adddf3>
 80097c8:	e9cd 0100 	strd	r0, r1, [sp]
 80097cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097d0:	462b      	mov	r3, r5
 80097d2:	4622      	mov	r2, r4
 80097d4:	f7f6 fcc8 	bl	8000168 <__aeabi_dsub>
 80097d8:	4604      	mov	r4, r0
 80097da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097de:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80097e2:	4620      	mov	r0, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	b003      	add	sp, #12
 80097e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ea:	4a25      	ldr	r2, [pc, #148]	; (8009880 <rint+0x110>)
 80097ec:	fa42 f20c 	asr.w	r2, r2, ip
 80097f0:	4011      	ands	r1, r2
 80097f2:	4301      	orrs	r1, r0
 80097f4:	d0f5      	beq.n	80097e2 <rint+0x72>
 80097f6:	0852      	lsrs	r2, r2, #1
 80097f8:	ea05 0102 	and.w	r1, r5, r2
 80097fc:	ea50 0601 	orrs.w	r6, r0, r1
 8009800:	d00c      	beq.n	800981c <rint+0xac>
 8009802:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009806:	f1bc 0f13 	cmp.w	ip, #19
 800980a:	bf0c      	ite	eq
 800980c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8009810:	2600      	movne	r6, #0
 8009812:	ea25 0202 	bic.w	r2, r5, r2
 8009816:	fa43 f30c 	asr.w	r3, r3, ip
 800981a:	4313      	orrs	r3, r2
 800981c:	4917      	ldr	r1, [pc, #92]	; (800987c <rint+0x10c>)
 800981e:	4632      	mov	r2, r6
 8009820:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8009824:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009828:	4620      	mov	r0, r4
 800982a:	4629      	mov	r1, r5
 800982c:	f7f6 fc9e 	bl	800016c <__adddf3>
 8009830:	e9cd 0100 	strd	r0, r1, [sp]
 8009834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009838:	4622      	mov	r2, r4
 800983a:	462b      	mov	r3, r5
 800983c:	f7f6 fc94 	bl	8000168 <__aeabi_dsub>
 8009840:	e008      	b.n	8009854 <rint+0xe4>
 8009842:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8009846:	dd08      	ble.n	800985a <rint+0xea>
 8009848:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800984c:	d1c9      	bne.n	80097e2 <rint+0x72>
 800984e:	4602      	mov	r2, r0
 8009850:	f7f6 fc8c 	bl	800016c <__adddf3>
 8009854:	4604      	mov	r4, r0
 8009856:	460d      	mov	r5, r1
 8009858:	e7c3      	b.n	80097e2 <rint+0x72>
 800985a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800985e:	f04f 32ff 	mov.w	r2, #4294967295
 8009862:	40ca      	lsrs	r2, r1
 8009864:	4210      	tst	r0, r2
 8009866:	d0bc      	beq.n	80097e2 <rint+0x72>
 8009868:	0852      	lsrs	r2, r2, #1
 800986a:	4210      	tst	r0, r2
 800986c:	bf1f      	itttt	ne
 800986e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8009872:	ea20 0202 	bicne.w	r2, r0, r2
 8009876:	410e      	asrne	r6, r1
 8009878:	4316      	orrne	r6, r2
 800987a:	e7cf      	b.n	800981c <rint+0xac>
 800987c:	0800b170 	.word	0x0800b170
 8009880:	000fffff 	.word	0x000fffff
 8009884:	00000000 	.word	0x00000000

08009888 <scalbn>:
 8009888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988a:	4616      	mov	r6, r2
 800988c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009890:	4604      	mov	r4, r0
 8009892:	460d      	mov	r5, r1
 8009894:	460b      	mov	r3, r1
 8009896:	b982      	cbnz	r2, 80098ba <scalbn+0x32>
 8009898:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800989c:	4303      	orrs	r3, r0
 800989e:	d034      	beq.n	800990a <scalbn+0x82>
 80098a0:	4b2d      	ldr	r3, [pc, #180]	; (8009958 <scalbn+0xd0>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	f7f6 fe18 	bl	80004d8 <__aeabi_dmul>
 80098a8:	4b2c      	ldr	r3, [pc, #176]	; (800995c <scalbn+0xd4>)
 80098aa:	4604      	mov	r4, r0
 80098ac:	429e      	cmp	r6, r3
 80098ae:	460d      	mov	r5, r1
 80098b0:	da0d      	bge.n	80098ce <scalbn+0x46>
 80098b2:	a325      	add	r3, pc, #148	; (adr r3, 8009948 <scalbn+0xc0>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	e01c      	b.n	80098f4 <scalbn+0x6c>
 80098ba:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80098be:	42ba      	cmp	r2, r7
 80098c0:	d109      	bne.n	80098d6 <scalbn+0x4e>
 80098c2:	4602      	mov	r2, r0
 80098c4:	f7f6 fc52 	bl	800016c <__adddf3>
 80098c8:	4604      	mov	r4, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	e01d      	b.n	800990a <scalbn+0x82>
 80098ce:	460b      	mov	r3, r1
 80098d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098d4:	3a36      	subs	r2, #54	; 0x36
 80098d6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80098da:	4432      	add	r2, r6
 80098dc:	428a      	cmp	r2, r1
 80098de:	dd0c      	ble.n	80098fa <scalbn+0x72>
 80098e0:	4622      	mov	r2, r4
 80098e2:	462b      	mov	r3, r5
 80098e4:	a11a      	add	r1, pc, #104	; (adr r1, 8009950 <scalbn+0xc8>)
 80098e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ea:	f000 f83b 	bl	8009964 <copysign>
 80098ee:	a318      	add	r3, pc, #96	; (adr r3, 8009950 <scalbn+0xc8>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fdf0 	bl	80004d8 <__aeabi_dmul>
 80098f8:	e7e6      	b.n	80098c8 <scalbn+0x40>
 80098fa:	2a00      	cmp	r2, #0
 80098fc:	dd08      	ble.n	8009910 <scalbn+0x88>
 80098fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009902:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009906:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800990a:	4620      	mov	r0, r4
 800990c:	4629      	mov	r1, r5
 800990e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009910:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009914:	da0b      	bge.n	800992e <scalbn+0xa6>
 8009916:	f24c 3350 	movw	r3, #50000	; 0xc350
 800991a:	429e      	cmp	r6, r3
 800991c:	4622      	mov	r2, r4
 800991e:	462b      	mov	r3, r5
 8009920:	dce0      	bgt.n	80098e4 <scalbn+0x5c>
 8009922:	a109      	add	r1, pc, #36	; (adr r1, 8009948 <scalbn+0xc0>)
 8009924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009928:	f000 f81c 	bl	8009964 <copysign>
 800992c:	e7c1      	b.n	80098b2 <scalbn+0x2a>
 800992e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009932:	3236      	adds	r2, #54	; 0x36
 8009934:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009938:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800993c:	4620      	mov	r0, r4
 800993e:	4629      	mov	r1, r5
 8009940:	2200      	movs	r2, #0
 8009942:	4b07      	ldr	r3, [pc, #28]	; (8009960 <scalbn+0xd8>)
 8009944:	e7d6      	b.n	80098f4 <scalbn+0x6c>
 8009946:	bf00      	nop
 8009948:	c2f8f359 	.word	0xc2f8f359
 800994c:	01a56e1f 	.word	0x01a56e1f
 8009950:	8800759c 	.word	0x8800759c
 8009954:	7e37e43c 	.word	0x7e37e43c
 8009958:	43500000 	.word	0x43500000
 800995c:	ffff3cb0 	.word	0xffff3cb0
 8009960:	3c900000 	.word	0x3c900000

08009964 <copysign>:
 8009964:	b530      	push	{r4, r5, lr}
 8009966:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800996a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800996e:	ea42 0503 	orr.w	r5, r2, r3
 8009972:	4629      	mov	r1, r5
 8009974:	bd30      	pop	{r4, r5, pc}

08009976 <atoi>:
 8009976:	220a      	movs	r2, #10
 8009978:	2100      	movs	r1, #0
 800997a:	f000 b959 	b.w	8009c30 <strtol>
	...

08009980 <__errno>:
 8009980:	4b01      	ldr	r3, [pc, #4]	; (8009988 <__errno+0x8>)
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	2000004c 	.word	0x2000004c

0800998c <__libc_init_array>:
 800998c:	b570      	push	{r4, r5, r6, lr}
 800998e:	2500      	movs	r5, #0
 8009990:	4e0c      	ldr	r6, [pc, #48]	; (80099c4 <__libc_init_array+0x38>)
 8009992:	4c0d      	ldr	r4, [pc, #52]	; (80099c8 <__libc_init_array+0x3c>)
 8009994:	1ba4      	subs	r4, r4, r6
 8009996:	10a4      	asrs	r4, r4, #2
 8009998:	42a5      	cmp	r5, r4
 800999a:	d109      	bne.n	80099b0 <__libc_init_array+0x24>
 800999c:	f001 f894 	bl	800aac8 <_init>
 80099a0:	2500      	movs	r5, #0
 80099a2:	4e0a      	ldr	r6, [pc, #40]	; (80099cc <__libc_init_array+0x40>)
 80099a4:	4c0a      	ldr	r4, [pc, #40]	; (80099d0 <__libc_init_array+0x44>)
 80099a6:	1ba4      	subs	r4, r4, r6
 80099a8:	10a4      	asrs	r4, r4, #2
 80099aa:	42a5      	cmp	r5, r4
 80099ac:	d105      	bne.n	80099ba <__libc_init_array+0x2e>
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099b4:	4798      	blx	r3
 80099b6:	3501      	adds	r5, #1
 80099b8:	e7ee      	b.n	8009998 <__libc_init_array+0xc>
 80099ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099be:	4798      	blx	r3
 80099c0:	3501      	adds	r5, #1
 80099c2:	e7f2      	b.n	80099aa <__libc_init_array+0x1e>
 80099c4:	0800b34c 	.word	0x0800b34c
 80099c8:	0800b34c 	.word	0x0800b34c
 80099cc:	0800b34c 	.word	0x0800b34c
 80099d0:	0800b354 	.word	0x0800b354

080099d4 <__itoa>:
 80099d4:	1e93      	subs	r3, r2, #2
 80099d6:	2b22      	cmp	r3, #34	; 0x22
 80099d8:	b510      	push	{r4, lr}
 80099da:	460c      	mov	r4, r1
 80099dc:	d904      	bls.n	80099e8 <__itoa+0x14>
 80099de:	2300      	movs	r3, #0
 80099e0:	461c      	mov	r4, r3
 80099e2:	700b      	strb	r3, [r1, #0]
 80099e4:	4620      	mov	r0, r4
 80099e6:	bd10      	pop	{r4, pc}
 80099e8:	2a0a      	cmp	r2, #10
 80099ea:	d109      	bne.n	8009a00 <__itoa+0x2c>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	da07      	bge.n	8009a00 <__itoa+0x2c>
 80099f0:	232d      	movs	r3, #45	; 0x2d
 80099f2:	700b      	strb	r3, [r1, #0]
 80099f4:	2101      	movs	r1, #1
 80099f6:	4240      	negs	r0, r0
 80099f8:	4421      	add	r1, r4
 80099fa:	f000 f92f 	bl	8009c5c <__utoa>
 80099fe:	e7f1      	b.n	80099e4 <__itoa+0x10>
 8009a00:	2100      	movs	r1, #0
 8009a02:	e7f9      	b.n	80099f8 <__itoa+0x24>

08009a04 <itoa>:
 8009a04:	f7ff bfe6 	b.w	80099d4 <__itoa>

08009a08 <memcpy>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	1e43      	subs	r3, r0, #1
 8009a0c:	440a      	add	r2, r1
 8009a0e:	4291      	cmp	r1, r2
 8009a10:	d100      	bne.n	8009a14 <memcpy+0xc>
 8009a12:	bd10      	pop	{r4, pc}
 8009a14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a1c:	e7f7      	b.n	8009a0e <memcpy+0x6>

08009a1e <memset>:
 8009a1e:	4603      	mov	r3, r0
 8009a20:	4402      	add	r2, r0
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d100      	bne.n	8009a28 <memset+0xa>
 8009a26:	4770      	bx	lr
 8009a28:	f803 1b01 	strb.w	r1, [r3], #1
 8009a2c:	e7f9      	b.n	8009a22 <memset+0x4>
	...

08009a30 <iprintf>:
 8009a30:	b40f      	push	{r0, r1, r2, r3}
 8009a32:	4b0a      	ldr	r3, [pc, #40]	; (8009a5c <iprintf+0x2c>)
 8009a34:	b513      	push	{r0, r1, r4, lr}
 8009a36:	681c      	ldr	r4, [r3, #0]
 8009a38:	b124      	cbz	r4, 8009a44 <iprintf+0x14>
 8009a3a:	69a3      	ldr	r3, [r4, #24]
 8009a3c:	b913      	cbnz	r3, 8009a44 <iprintf+0x14>
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 fafa 	bl	800a038 <__sinit>
 8009a44:	ab05      	add	r3, sp, #20
 8009a46:	9a04      	ldr	r2, [sp, #16]
 8009a48:	68a1      	ldr	r1, [r4, #8]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	f000 fcc5 	bl	800a3dc <_vfiprintf_r>
 8009a52:	b002      	add	sp, #8
 8009a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a58:	b004      	add	sp, #16
 8009a5a:	4770      	bx	lr
 8009a5c:	2000004c 	.word	0x2000004c

08009a60 <_puts_r>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	460e      	mov	r6, r1
 8009a64:	4605      	mov	r5, r0
 8009a66:	b118      	cbz	r0, 8009a70 <_puts_r+0x10>
 8009a68:	6983      	ldr	r3, [r0, #24]
 8009a6a:	b90b      	cbnz	r3, 8009a70 <_puts_r+0x10>
 8009a6c:	f000 fae4 	bl	800a038 <__sinit>
 8009a70:	69ab      	ldr	r3, [r5, #24]
 8009a72:	68ac      	ldr	r4, [r5, #8]
 8009a74:	b913      	cbnz	r3, 8009a7c <_puts_r+0x1c>
 8009a76:	4628      	mov	r0, r5
 8009a78:	f000 fade 	bl	800a038 <__sinit>
 8009a7c:	4b23      	ldr	r3, [pc, #140]	; (8009b0c <_puts_r+0xac>)
 8009a7e:	429c      	cmp	r4, r3
 8009a80:	d117      	bne.n	8009ab2 <_puts_r+0x52>
 8009a82:	686c      	ldr	r4, [r5, #4]
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	071b      	lsls	r3, r3, #28
 8009a88:	d51d      	bpl.n	8009ac6 <_puts_r+0x66>
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	b1db      	cbz	r3, 8009ac6 <_puts_r+0x66>
 8009a8e:	3e01      	subs	r6, #1
 8009a90:	68a3      	ldr	r3, [r4, #8]
 8009a92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a96:	3b01      	subs	r3, #1
 8009a98:	60a3      	str	r3, [r4, #8]
 8009a9a:	b9e9      	cbnz	r1, 8009ad8 <_puts_r+0x78>
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	da2e      	bge.n	8009afe <_puts_r+0x9e>
 8009aa0:	4622      	mov	r2, r4
 8009aa2:	210a      	movs	r1, #10
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 f917 	bl	8009cd8 <__swbuf_r>
 8009aaa:	3001      	adds	r0, #1
 8009aac:	d011      	beq.n	8009ad2 <_puts_r+0x72>
 8009aae:	200a      	movs	r0, #10
 8009ab0:	e011      	b.n	8009ad6 <_puts_r+0x76>
 8009ab2:	4b17      	ldr	r3, [pc, #92]	; (8009b10 <_puts_r+0xb0>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	d101      	bne.n	8009abc <_puts_r+0x5c>
 8009ab8:	68ac      	ldr	r4, [r5, #8]
 8009aba:	e7e3      	b.n	8009a84 <_puts_r+0x24>
 8009abc:	4b15      	ldr	r3, [pc, #84]	; (8009b14 <_puts_r+0xb4>)
 8009abe:	429c      	cmp	r4, r3
 8009ac0:	bf08      	it	eq
 8009ac2:	68ec      	ldreq	r4, [r5, #12]
 8009ac4:	e7de      	b.n	8009a84 <_puts_r+0x24>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f000 f957 	bl	8009d7c <__swsetup_r>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d0dd      	beq.n	8009a8e <_puts_r+0x2e>
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	da04      	bge.n	8009ae6 <_puts_r+0x86>
 8009adc:	69a2      	ldr	r2, [r4, #24]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	dc06      	bgt.n	8009af0 <_puts_r+0x90>
 8009ae2:	290a      	cmp	r1, #10
 8009ae4:	d004      	beq.n	8009af0 <_puts_r+0x90>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	6022      	str	r2, [r4, #0]
 8009aec:	7019      	strb	r1, [r3, #0]
 8009aee:	e7cf      	b.n	8009a90 <_puts_r+0x30>
 8009af0:	4622      	mov	r2, r4
 8009af2:	4628      	mov	r0, r5
 8009af4:	f000 f8f0 	bl	8009cd8 <__swbuf_r>
 8009af8:	3001      	adds	r0, #1
 8009afa:	d1c9      	bne.n	8009a90 <_puts_r+0x30>
 8009afc:	e7e9      	b.n	8009ad2 <_puts_r+0x72>
 8009afe:	200a      	movs	r0, #10
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	1c5a      	adds	r2, r3, #1
 8009b04:	6022      	str	r2, [r4, #0]
 8009b06:	7018      	strb	r0, [r3, #0]
 8009b08:	e7e5      	b.n	8009ad6 <_puts_r+0x76>
 8009b0a:	bf00      	nop
 8009b0c:	0800b1cc 	.word	0x0800b1cc
 8009b10:	0800b1ec 	.word	0x0800b1ec
 8009b14:	0800b1ac 	.word	0x0800b1ac

08009b18 <puts>:
 8009b18:	4b02      	ldr	r3, [pc, #8]	; (8009b24 <puts+0xc>)
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	f7ff bf9f 	b.w	8009a60 <_puts_r>
 8009b22:	bf00      	nop
 8009b24:	2000004c 	.word	0x2000004c

08009b28 <strcpy>:
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b2e:	f803 2b01 	strb.w	r2, [r3], #1
 8009b32:	2a00      	cmp	r2, #0
 8009b34:	d1f9      	bne.n	8009b2a <strcpy+0x2>
 8009b36:	4770      	bx	lr

08009b38 <_strtol_l.isra.0>:
 8009b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b3c:	4680      	mov	r8, r0
 8009b3e:	4689      	mov	r9, r1
 8009b40:	4692      	mov	sl, r2
 8009b42:	461e      	mov	r6, r3
 8009b44:	460f      	mov	r7, r1
 8009b46:	463d      	mov	r5, r7
 8009b48:	9808      	ldr	r0, [sp, #32]
 8009b4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b4e:	f000 fafd 	bl	800a14c <__locale_ctype_ptr_l>
 8009b52:	4420      	add	r0, r4
 8009b54:	7843      	ldrb	r3, [r0, #1]
 8009b56:	f013 0308 	ands.w	r3, r3, #8
 8009b5a:	d132      	bne.n	8009bc2 <_strtol_l.isra.0+0x8a>
 8009b5c:	2c2d      	cmp	r4, #45	; 0x2d
 8009b5e:	d132      	bne.n	8009bc6 <_strtol_l.isra.0+0x8e>
 8009b60:	2201      	movs	r2, #1
 8009b62:	787c      	ldrb	r4, [r7, #1]
 8009b64:	1cbd      	adds	r5, r7, #2
 8009b66:	2e00      	cmp	r6, #0
 8009b68:	d05d      	beq.n	8009c26 <_strtol_l.isra.0+0xee>
 8009b6a:	2e10      	cmp	r6, #16
 8009b6c:	d109      	bne.n	8009b82 <_strtol_l.isra.0+0x4a>
 8009b6e:	2c30      	cmp	r4, #48	; 0x30
 8009b70:	d107      	bne.n	8009b82 <_strtol_l.isra.0+0x4a>
 8009b72:	782b      	ldrb	r3, [r5, #0]
 8009b74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b78:	2b58      	cmp	r3, #88	; 0x58
 8009b7a:	d14f      	bne.n	8009c1c <_strtol_l.isra.0+0xe4>
 8009b7c:	2610      	movs	r6, #16
 8009b7e:	786c      	ldrb	r4, [r5, #1]
 8009b80:	3502      	adds	r5, #2
 8009b82:	2a00      	cmp	r2, #0
 8009b84:	bf14      	ite	ne
 8009b86:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009b8a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009b8e:	2700      	movs	r7, #0
 8009b90:	fbb1 fcf6 	udiv	ip, r1, r6
 8009b94:	4638      	mov	r0, r7
 8009b96:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009b9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009b9e:	2b09      	cmp	r3, #9
 8009ba0:	d817      	bhi.n	8009bd2 <_strtol_l.isra.0+0x9a>
 8009ba2:	461c      	mov	r4, r3
 8009ba4:	42a6      	cmp	r6, r4
 8009ba6:	dd23      	ble.n	8009bf0 <_strtol_l.isra.0+0xb8>
 8009ba8:	1c7b      	adds	r3, r7, #1
 8009baa:	d007      	beq.n	8009bbc <_strtol_l.isra.0+0x84>
 8009bac:	4584      	cmp	ip, r0
 8009bae:	d31c      	bcc.n	8009bea <_strtol_l.isra.0+0xb2>
 8009bb0:	d101      	bne.n	8009bb6 <_strtol_l.isra.0+0x7e>
 8009bb2:	45a6      	cmp	lr, r4
 8009bb4:	db19      	blt.n	8009bea <_strtol_l.isra.0+0xb2>
 8009bb6:	2701      	movs	r7, #1
 8009bb8:	fb00 4006 	mla	r0, r0, r6, r4
 8009bbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bc0:	e7eb      	b.n	8009b9a <_strtol_l.isra.0+0x62>
 8009bc2:	462f      	mov	r7, r5
 8009bc4:	e7bf      	b.n	8009b46 <_strtol_l.isra.0+0xe>
 8009bc6:	2c2b      	cmp	r4, #43	; 0x2b
 8009bc8:	bf04      	itt	eq
 8009bca:	1cbd      	addeq	r5, r7, #2
 8009bcc:	787c      	ldrbeq	r4, [r7, #1]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	e7c9      	b.n	8009b66 <_strtol_l.isra.0+0x2e>
 8009bd2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009bd6:	2b19      	cmp	r3, #25
 8009bd8:	d801      	bhi.n	8009bde <_strtol_l.isra.0+0xa6>
 8009bda:	3c37      	subs	r4, #55	; 0x37
 8009bdc:	e7e2      	b.n	8009ba4 <_strtol_l.isra.0+0x6c>
 8009bde:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009be2:	2b19      	cmp	r3, #25
 8009be4:	d804      	bhi.n	8009bf0 <_strtol_l.isra.0+0xb8>
 8009be6:	3c57      	subs	r4, #87	; 0x57
 8009be8:	e7dc      	b.n	8009ba4 <_strtol_l.isra.0+0x6c>
 8009bea:	f04f 37ff 	mov.w	r7, #4294967295
 8009bee:	e7e5      	b.n	8009bbc <_strtol_l.isra.0+0x84>
 8009bf0:	1c7b      	adds	r3, r7, #1
 8009bf2:	d108      	bne.n	8009c06 <_strtol_l.isra.0+0xce>
 8009bf4:	2322      	movs	r3, #34	; 0x22
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	f8c8 3000 	str.w	r3, [r8]
 8009bfc:	f1ba 0f00 	cmp.w	sl, #0
 8009c00:	d107      	bne.n	8009c12 <_strtol_l.isra.0+0xda>
 8009c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c06:	b102      	cbz	r2, 8009c0a <_strtol_l.isra.0+0xd2>
 8009c08:	4240      	negs	r0, r0
 8009c0a:	f1ba 0f00 	cmp.w	sl, #0
 8009c0e:	d0f8      	beq.n	8009c02 <_strtol_l.isra.0+0xca>
 8009c10:	b10f      	cbz	r7, 8009c16 <_strtol_l.isra.0+0xde>
 8009c12:	f105 39ff 	add.w	r9, r5, #4294967295
 8009c16:	f8ca 9000 	str.w	r9, [sl]
 8009c1a:	e7f2      	b.n	8009c02 <_strtol_l.isra.0+0xca>
 8009c1c:	2430      	movs	r4, #48	; 0x30
 8009c1e:	2e00      	cmp	r6, #0
 8009c20:	d1af      	bne.n	8009b82 <_strtol_l.isra.0+0x4a>
 8009c22:	2608      	movs	r6, #8
 8009c24:	e7ad      	b.n	8009b82 <_strtol_l.isra.0+0x4a>
 8009c26:	2c30      	cmp	r4, #48	; 0x30
 8009c28:	d0a3      	beq.n	8009b72 <_strtol_l.isra.0+0x3a>
 8009c2a:	260a      	movs	r6, #10
 8009c2c:	e7a9      	b.n	8009b82 <_strtol_l.isra.0+0x4a>
	...

08009c30 <strtol>:
 8009c30:	4b08      	ldr	r3, [pc, #32]	; (8009c54 <strtol+0x24>)
 8009c32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c34:	681c      	ldr	r4, [r3, #0]
 8009c36:	4d08      	ldr	r5, [pc, #32]	; (8009c58 <strtol+0x28>)
 8009c38:	6a23      	ldr	r3, [r4, #32]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bf08      	it	eq
 8009c3e:	462b      	moveq	r3, r5
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	4613      	mov	r3, r2
 8009c44:	460a      	mov	r2, r1
 8009c46:	4601      	mov	r1, r0
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f7ff ff75 	bl	8009b38 <_strtol_l.isra.0>
 8009c4e:	b003      	add	sp, #12
 8009c50:	bd30      	pop	{r4, r5, pc}
 8009c52:	bf00      	nop
 8009c54:	2000004c 	.word	0x2000004c
 8009c58:	200000b0 	.word	0x200000b0

08009c5c <__utoa>:
 8009c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5e:	b08b      	sub	sp, #44	; 0x2c
 8009c60:	4605      	mov	r5, r0
 8009c62:	460c      	mov	r4, r1
 8009c64:	466e      	mov	r6, sp
 8009c66:	4b1b      	ldr	r3, [pc, #108]	; (8009cd4 <__utoa+0x78>)
 8009c68:	f103 0c20 	add.w	ip, r3, #32
 8009c6c:	4637      	mov	r7, r6
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	6859      	ldr	r1, [r3, #4]
 8009c72:	3308      	adds	r3, #8
 8009c74:	c703      	stmia	r7!, {r0, r1}
 8009c76:	4563      	cmp	r3, ip
 8009c78:	463e      	mov	r6, r7
 8009c7a:	d1f7      	bne.n	8009c6c <__utoa+0x10>
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	791b      	ldrb	r3, [r3, #4]
 8009c80:	6038      	str	r0, [r7, #0]
 8009c82:	713b      	strb	r3, [r7, #4]
 8009c84:	1e93      	subs	r3, r2, #2
 8009c86:	2b22      	cmp	r3, #34	; 0x22
 8009c88:	f04f 0300 	mov.w	r3, #0
 8009c8c:	d904      	bls.n	8009c98 <__utoa+0x3c>
 8009c8e:	7023      	strb	r3, [r4, #0]
 8009c90:	461c      	mov	r4, r3
 8009c92:	4620      	mov	r0, r4
 8009c94:	b00b      	add	sp, #44	; 0x2c
 8009c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c98:	1e66      	subs	r6, r4, #1
 8009c9a:	fbb5 f0f2 	udiv	r0, r5, r2
 8009c9e:	fb02 5510 	mls	r5, r2, r0, r5
 8009ca2:	af0a      	add	r7, sp, #40	; 0x28
 8009ca4:	443d      	add	r5, r7
 8009ca6:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8009caa:	1c59      	adds	r1, r3, #1
 8009cac:	f806 5f01 	strb.w	r5, [r6, #1]!
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	b968      	cbnz	r0, 8009cd0 <__utoa+0x74>
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	5460      	strb	r0, [r4, r1]
 8009cb8:	4423      	add	r3, r4
 8009cba:	1b19      	subs	r1, r3, r4
 8009cbc:	1b10      	subs	r0, r2, r4
 8009cbe:	4281      	cmp	r1, r0
 8009cc0:	dde7      	ble.n	8009c92 <__utoa+0x36>
 8009cc2:	7811      	ldrb	r1, [r2, #0]
 8009cc4:	7818      	ldrb	r0, [r3, #0]
 8009cc6:	f802 0b01 	strb.w	r0, [r2], #1
 8009cca:	f803 1901 	strb.w	r1, [r3], #-1
 8009cce:	e7f4      	b.n	8009cba <__utoa+0x5e>
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	e7e2      	b.n	8009c9a <__utoa+0x3e>
 8009cd4:	0800b184 	.word	0x0800b184

08009cd8 <__swbuf_r>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	460e      	mov	r6, r1
 8009cdc:	4614      	mov	r4, r2
 8009cde:	4605      	mov	r5, r0
 8009ce0:	b118      	cbz	r0, 8009cea <__swbuf_r+0x12>
 8009ce2:	6983      	ldr	r3, [r0, #24]
 8009ce4:	b90b      	cbnz	r3, 8009cea <__swbuf_r+0x12>
 8009ce6:	f000 f9a7 	bl	800a038 <__sinit>
 8009cea:	4b21      	ldr	r3, [pc, #132]	; (8009d70 <__swbuf_r+0x98>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d12a      	bne.n	8009d46 <__swbuf_r+0x6e>
 8009cf0:	686c      	ldr	r4, [r5, #4]
 8009cf2:	69a3      	ldr	r3, [r4, #24]
 8009cf4:	60a3      	str	r3, [r4, #8]
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	071a      	lsls	r2, r3, #28
 8009cfa:	d52e      	bpl.n	8009d5a <__swbuf_r+0x82>
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	b363      	cbz	r3, 8009d5a <__swbuf_r+0x82>
 8009d00:	6923      	ldr	r3, [r4, #16]
 8009d02:	6820      	ldr	r0, [r4, #0]
 8009d04:	b2f6      	uxtb	r6, r6
 8009d06:	1ac0      	subs	r0, r0, r3
 8009d08:	6963      	ldr	r3, [r4, #20]
 8009d0a:	4637      	mov	r7, r6
 8009d0c:	4283      	cmp	r3, r0
 8009d0e:	dc04      	bgt.n	8009d1a <__swbuf_r+0x42>
 8009d10:	4621      	mov	r1, r4
 8009d12:	4628      	mov	r0, r5
 8009d14:	f000 f926 	bl	8009f64 <_fflush_r>
 8009d18:	bb28      	cbnz	r0, 8009d66 <__swbuf_r+0x8e>
 8009d1a:	68a3      	ldr	r3, [r4, #8]
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	60a3      	str	r3, [r4, #8]
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	6022      	str	r2, [r4, #0]
 8009d28:	701e      	strb	r6, [r3, #0]
 8009d2a:	6963      	ldr	r3, [r4, #20]
 8009d2c:	4283      	cmp	r3, r0
 8009d2e:	d004      	beq.n	8009d3a <__swbuf_r+0x62>
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	07db      	lsls	r3, r3, #31
 8009d34:	d519      	bpl.n	8009d6a <__swbuf_r+0x92>
 8009d36:	2e0a      	cmp	r6, #10
 8009d38:	d117      	bne.n	8009d6a <__swbuf_r+0x92>
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	f000 f911 	bl	8009f64 <_fflush_r>
 8009d42:	b190      	cbz	r0, 8009d6a <__swbuf_r+0x92>
 8009d44:	e00f      	b.n	8009d66 <__swbuf_r+0x8e>
 8009d46:	4b0b      	ldr	r3, [pc, #44]	; (8009d74 <__swbuf_r+0x9c>)
 8009d48:	429c      	cmp	r4, r3
 8009d4a:	d101      	bne.n	8009d50 <__swbuf_r+0x78>
 8009d4c:	68ac      	ldr	r4, [r5, #8]
 8009d4e:	e7d0      	b.n	8009cf2 <__swbuf_r+0x1a>
 8009d50:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <__swbuf_r+0xa0>)
 8009d52:	429c      	cmp	r4, r3
 8009d54:	bf08      	it	eq
 8009d56:	68ec      	ldreq	r4, [r5, #12]
 8009d58:	e7cb      	b.n	8009cf2 <__swbuf_r+0x1a>
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	f000 f80d 	bl	8009d7c <__swsetup_r>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d0cc      	beq.n	8009d00 <__swbuf_r+0x28>
 8009d66:	f04f 37ff 	mov.w	r7, #4294967295
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	0800b1cc 	.word	0x0800b1cc
 8009d74:	0800b1ec 	.word	0x0800b1ec
 8009d78:	0800b1ac 	.word	0x0800b1ac

08009d7c <__swsetup_r>:
 8009d7c:	4b32      	ldr	r3, [pc, #200]	; (8009e48 <__swsetup_r+0xcc>)
 8009d7e:	b570      	push	{r4, r5, r6, lr}
 8009d80:	681d      	ldr	r5, [r3, #0]
 8009d82:	4606      	mov	r6, r0
 8009d84:	460c      	mov	r4, r1
 8009d86:	b125      	cbz	r5, 8009d92 <__swsetup_r+0x16>
 8009d88:	69ab      	ldr	r3, [r5, #24]
 8009d8a:	b913      	cbnz	r3, 8009d92 <__swsetup_r+0x16>
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 f953 	bl	800a038 <__sinit>
 8009d92:	4b2e      	ldr	r3, [pc, #184]	; (8009e4c <__swsetup_r+0xd0>)
 8009d94:	429c      	cmp	r4, r3
 8009d96:	d10f      	bne.n	8009db8 <__swsetup_r+0x3c>
 8009d98:	686c      	ldr	r4, [r5, #4]
 8009d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	0715      	lsls	r5, r2, #28
 8009da2:	d42c      	bmi.n	8009dfe <__swsetup_r+0x82>
 8009da4:	06d0      	lsls	r0, r2, #27
 8009da6:	d411      	bmi.n	8009dcc <__swsetup_r+0x50>
 8009da8:	2209      	movs	r2, #9
 8009daa:	6032      	str	r2, [r6, #0]
 8009dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295
 8009db6:	e03e      	b.n	8009e36 <__swsetup_r+0xba>
 8009db8:	4b25      	ldr	r3, [pc, #148]	; (8009e50 <__swsetup_r+0xd4>)
 8009dba:	429c      	cmp	r4, r3
 8009dbc:	d101      	bne.n	8009dc2 <__swsetup_r+0x46>
 8009dbe:	68ac      	ldr	r4, [r5, #8]
 8009dc0:	e7eb      	b.n	8009d9a <__swsetup_r+0x1e>
 8009dc2:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <__swsetup_r+0xd8>)
 8009dc4:	429c      	cmp	r4, r3
 8009dc6:	bf08      	it	eq
 8009dc8:	68ec      	ldreq	r4, [r5, #12]
 8009dca:	e7e6      	b.n	8009d9a <__swsetup_r+0x1e>
 8009dcc:	0751      	lsls	r1, r2, #29
 8009dce:	d512      	bpl.n	8009df6 <__swsetup_r+0x7a>
 8009dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dd2:	b141      	cbz	r1, 8009de6 <__swsetup_r+0x6a>
 8009dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd8:	4299      	cmp	r1, r3
 8009dda:	d002      	beq.n	8009de2 <__swsetup_r+0x66>
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f000 fa2f 	bl	800a240 <_free_r>
 8009de2:	2300      	movs	r3, #0
 8009de4:	6363      	str	r3, [r4, #52]	; 0x34
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	2300      	movs	r3, #0
 8009df0:	6063      	str	r3, [r4, #4]
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	f043 0308 	orr.w	r3, r3, #8
 8009dfc:	81a3      	strh	r3, [r4, #12]
 8009dfe:	6923      	ldr	r3, [r4, #16]
 8009e00:	b94b      	cbnz	r3, 8009e16 <__swsetup_r+0x9a>
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e0c:	d003      	beq.n	8009e16 <__swsetup_r+0x9a>
 8009e0e:	4621      	mov	r1, r4
 8009e10:	4630      	mov	r0, r6
 8009e12:	f000 f9c3 	bl	800a19c <__smakebuf_r>
 8009e16:	89a2      	ldrh	r2, [r4, #12]
 8009e18:	f012 0301 	ands.w	r3, r2, #1
 8009e1c:	d00c      	beq.n	8009e38 <__swsetup_r+0xbc>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60a3      	str	r3, [r4, #8]
 8009e22:	6963      	ldr	r3, [r4, #20]
 8009e24:	425b      	negs	r3, r3
 8009e26:	61a3      	str	r3, [r4, #24]
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	b953      	cbnz	r3, 8009e42 <__swsetup_r+0xc6>
 8009e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009e34:	d1ba      	bne.n	8009dac <__swsetup_r+0x30>
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	0792      	lsls	r2, r2, #30
 8009e3a:	bf58      	it	pl
 8009e3c:	6963      	ldrpl	r3, [r4, #20]
 8009e3e:	60a3      	str	r3, [r4, #8]
 8009e40:	e7f2      	b.n	8009e28 <__swsetup_r+0xac>
 8009e42:	2000      	movs	r0, #0
 8009e44:	e7f7      	b.n	8009e36 <__swsetup_r+0xba>
 8009e46:	bf00      	nop
 8009e48:	2000004c 	.word	0x2000004c
 8009e4c:	0800b1cc 	.word	0x0800b1cc
 8009e50:	0800b1ec 	.word	0x0800b1ec
 8009e54:	0800b1ac 	.word	0x0800b1ac

08009e58 <__sflush_r>:
 8009e58:	898a      	ldrh	r2, [r1, #12]
 8009e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	4605      	mov	r5, r0
 8009e60:	0710      	lsls	r0, r2, #28
 8009e62:	460c      	mov	r4, r1
 8009e64:	d458      	bmi.n	8009f18 <__sflush_r+0xc0>
 8009e66:	684b      	ldr	r3, [r1, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	dc05      	bgt.n	8009e78 <__sflush_r+0x20>
 8009e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	dc02      	bgt.n	8009e78 <__sflush_r+0x20>
 8009e72:	2000      	movs	r0, #0
 8009e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e7a:	2e00      	cmp	r6, #0
 8009e7c:	d0f9      	beq.n	8009e72 <__sflush_r+0x1a>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e84:	682f      	ldr	r7, [r5, #0]
 8009e86:	6a21      	ldr	r1, [r4, #32]
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	d032      	beq.n	8009ef2 <__sflush_r+0x9a>
 8009e8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	075a      	lsls	r2, r3, #29
 8009e92:	d505      	bpl.n	8009ea0 <__sflush_r+0x48>
 8009e94:	6863      	ldr	r3, [r4, #4]
 8009e96:	1ac0      	subs	r0, r0, r3
 8009e98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e9a:	b10b      	cbz	r3, 8009ea0 <__sflush_r+0x48>
 8009e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e9e:	1ac0      	subs	r0, r0, r3
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ea6:	6a21      	ldr	r1, [r4, #32]
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b0      	blx	r6
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	d106      	bne.n	8009ec0 <__sflush_r+0x68>
 8009eb2:	6829      	ldr	r1, [r5, #0]
 8009eb4:	291d      	cmp	r1, #29
 8009eb6:	d848      	bhi.n	8009f4a <__sflush_r+0xf2>
 8009eb8:	4a29      	ldr	r2, [pc, #164]	; (8009f60 <__sflush_r+0x108>)
 8009eba:	40ca      	lsrs	r2, r1
 8009ebc:	07d6      	lsls	r6, r2, #31
 8009ebe:	d544      	bpl.n	8009f4a <__sflush_r+0xf2>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	6062      	str	r2, [r4, #4]
 8009ec4:	6922      	ldr	r2, [r4, #16]
 8009ec6:	04d9      	lsls	r1, r3, #19
 8009ec8:	6022      	str	r2, [r4, #0]
 8009eca:	d504      	bpl.n	8009ed6 <__sflush_r+0x7e>
 8009ecc:	1c42      	adds	r2, r0, #1
 8009ece:	d101      	bne.n	8009ed4 <__sflush_r+0x7c>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b903      	cbnz	r3, 8009ed6 <__sflush_r+0x7e>
 8009ed4:	6560      	str	r0, [r4, #84]	; 0x54
 8009ed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ed8:	602f      	str	r7, [r5, #0]
 8009eda:	2900      	cmp	r1, #0
 8009edc:	d0c9      	beq.n	8009e72 <__sflush_r+0x1a>
 8009ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ee2:	4299      	cmp	r1, r3
 8009ee4:	d002      	beq.n	8009eec <__sflush_r+0x94>
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 f9aa 	bl	800a240 <_free_r>
 8009eec:	2000      	movs	r0, #0
 8009eee:	6360      	str	r0, [r4, #52]	; 0x34
 8009ef0:	e7c0      	b.n	8009e74 <__sflush_r+0x1c>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	47b0      	blx	r6
 8009ef8:	1c41      	adds	r1, r0, #1
 8009efa:	d1c8      	bne.n	8009e8e <__sflush_r+0x36>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0c5      	beq.n	8009e8e <__sflush_r+0x36>
 8009f02:	2b1d      	cmp	r3, #29
 8009f04:	d001      	beq.n	8009f0a <__sflush_r+0xb2>
 8009f06:	2b16      	cmp	r3, #22
 8009f08:	d101      	bne.n	8009f0e <__sflush_r+0xb6>
 8009f0a:	602f      	str	r7, [r5, #0]
 8009f0c:	e7b1      	b.n	8009e72 <__sflush_r+0x1a>
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f14:	81a3      	strh	r3, [r4, #12]
 8009f16:	e7ad      	b.n	8009e74 <__sflush_r+0x1c>
 8009f18:	690f      	ldr	r7, [r1, #16]
 8009f1a:	2f00      	cmp	r7, #0
 8009f1c:	d0a9      	beq.n	8009e72 <__sflush_r+0x1a>
 8009f1e:	0793      	lsls	r3, r2, #30
 8009f20:	bf18      	it	ne
 8009f22:	2300      	movne	r3, #0
 8009f24:	680e      	ldr	r6, [r1, #0]
 8009f26:	bf08      	it	eq
 8009f28:	694b      	ldreq	r3, [r1, #20]
 8009f2a:	eba6 0807 	sub.w	r8, r6, r7
 8009f2e:	600f      	str	r7, [r1, #0]
 8009f30:	608b      	str	r3, [r1, #8]
 8009f32:	f1b8 0f00 	cmp.w	r8, #0
 8009f36:	dd9c      	ble.n	8009e72 <__sflush_r+0x1a>
 8009f38:	4643      	mov	r3, r8
 8009f3a:	463a      	mov	r2, r7
 8009f3c:	6a21      	ldr	r1, [r4, #32]
 8009f3e:	4628      	mov	r0, r5
 8009f40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f42:	47b0      	blx	r6
 8009f44:	2800      	cmp	r0, #0
 8009f46:	dc06      	bgt.n	8009f56 <__sflush_r+0xfe>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f4e:	81a3      	strh	r3, [r4, #12]
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	e78e      	b.n	8009e74 <__sflush_r+0x1c>
 8009f56:	4407      	add	r7, r0
 8009f58:	eba8 0800 	sub.w	r8, r8, r0
 8009f5c:	e7e9      	b.n	8009f32 <__sflush_r+0xda>
 8009f5e:	bf00      	nop
 8009f60:	20400001 	.word	0x20400001

08009f64 <_fflush_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	690b      	ldr	r3, [r1, #16]
 8009f68:	4605      	mov	r5, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	b1db      	cbz	r3, 8009fa6 <_fflush_r+0x42>
 8009f6e:	b118      	cbz	r0, 8009f78 <_fflush_r+0x14>
 8009f70:	6983      	ldr	r3, [r0, #24]
 8009f72:	b90b      	cbnz	r3, 8009f78 <_fflush_r+0x14>
 8009f74:	f000 f860 	bl	800a038 <__sinit>
 8009f78:	4b0c      	ldr	r3, [pc, #48]	; (8009fac <_fflush_r+0x48>)
 8009f7a:	429c      	cmp	r4, r3
 8009f7c:	d109      	bne.n	8009f92 <_fflush_r+0x2e>
 8009f7e:	686c      	ldr	r4, [r5, #4]
 8009f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f84:	b17b      	cbz	r3, 8009fa6 <_fflush_r+0x42>
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f8e:	f7ff bf63 	b.w	8009e58 <__sflush_r>
 8009f92:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <_fflush_r+0x4c>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	d101      	bne.n	8009f9c <_fflush_r+0x38>
 8009f98:	68ac      	ldr	r4, [r5, #8]
 8009f9a:	e7f1      	b.n	8009f80 <_fflush_r+0x1c>
 8009f9c:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <_fflush_r+0x50>)
 8009f9e:	429c      	cmp	r4, r3
 8009fa0:	bf08      	it	eq
 8009fa2:	68ec      	ldreq	r4, [r5, #12]
 8009fa4:	e7ec      	b.n	8009f80 <_fflush_r+0x1c>
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	bd38      	pop	{r3, r4, r5, pc}
 8009faa:	bf00      	nop
 8009fac:	0800b1cc 	.word	0x0800b1cc
 8009fb0:	0800b1ec 	.word	0x0800b1ec
 8009fb4:	0800b1ac 	.word	0x0800b1ac

08009fb8 <std>:
 8009fb8:	2300      	movs	r3, #0
 8009fba:	b510      	push	{r4, lr}
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8009fc2:	6083      	str	r3, [r0, #8]
 8009fc4:	8181      	strh	r1, [r0, #12]
 8009fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8009fc8:	81c2      	strh	r2, [r0, #14]
 8009fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fce:	6183      	str	r3, [r0, #24]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	2208      	movs	r2, #8
 8009fd4:	305c      	adds	r0, #92	; 0x5c
 8009fd6:	f7ff fd22 	bl	8009a1e <memset>
 8009fda:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <std+0x38>)
 8009fdc:	6224      	str	r4, [r4, #32]
 8009fde:	6263      	str	r3, [r4, #36]	; 0x24
 8009fe0:	4b04      	ldr	r3, [pc, #16]	; (8009ff4 <std+0x3c>)
 8009fe2:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fe4:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <std+0x40>)
 8009fe6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fe8:	4b04      	ldr	r3, [pc, #16]	; (8009ffc <std+0x44>)
 8009fea:	6323      	str	r3, [r4, #48]	; 0x30
 8009fec:	bd10      	pop	{r4, pc}
 8009fee:	bf00      	nop
 8009ff0:	0800a939 	.word	0x0800a939
 8009ff4:	0800a95b 	.word	0x0800a95b
 8009ff8:	0800a993 	.word	0x0800a993
 8009ffc:	0800a9b7 	.word	0x0800a9b7

0800a000 <_cleanup_r>:
 800a000:	4901      	ldr	r1, [pc, #4]	; (800a008 <_cleanup_r+0x8>)
 800a002:	f000 b885 	b.w	800a110 <_fwalk_reent>
 800a006:	bf00      	nop
 800a008:	08009f65 	.word	0x08009f65

0800a00c <__sfmoreglue>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	2568      	movs	r5, #104	; 0x68
 800a010:	1e4a      	subs	r2, r1, #1
 800a012:	4355      	muls	r5, r2
 800a014:	460e      	mov	r6, r1
 800a016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a01a:	f000 f95d 	bl	800a2d8 <_malloc_r>
 800a01e:	4604      	mov	r4, r0
 800a020:	b140      	cbz	r0, 800a034 <__sfmoreglue+0x28>
 800a022:	2100      	movs	r1, #0
 800a024:	e9c0 1600 	strd	r1, r6, [r0]
 800a028:	300c      	adds	r0, #12
 800a02a:	60a0      	str	r0, [r4, #8]
 800a02c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a030:	f7ff fcf5 	bl	8009a1e <memset>
 800a034:	4620      	mov	r0, r4
 800a036:	bd70      	pop	{r4, r5, r6, pc}

0800a038 <__sinit>:
 800a038:	6983      	ldr	r3, [r0, #24]
 800a03a:	b510      	push	{r4, lr}
 800a03c:	4604      	mov	r4, r0
 800a03e:	bb33      	cbnz	r3, 800a08e <__sinit+0x56>
 800a040:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a044:	6503      	str	r3, [r0, #80]	; 0x50
 800a046:	4b12      	ldr	r3, [pc, #72]	; (800a090 <__sinit+0x58>)
 800a048:	4a12      	ldr	r2, [pc, #72]	; (800a094 <__sinit+0x5c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6282      	str	r2, [r0, #40]	; 0x28
 800a04e:	4298      	cmp	r0, r3
 800a050:	bf04      	itt	eq
 800a052:	2301      	moveq	r3, #1
 800a054:	6183      	streq	r3, [r0, #24]
 800a056:	f000 f81f 	bl	800a098 <__sfp>
 800a05a:	6060      	str	r0, [r4, #4]
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 f81b 	bl	800a098 <__sfp>
 800a062:	60a0      	str	r0, [r4, #8]
 800a064:	4620      	mov	r0, r4
 800a066:	f000 f817 	bl	800a098 <__sfp>
 800a06a:	2200      	movs	r2, #0
 800a06c:	60e0      	str	r0, [r4, #12]
 800a06e:	2104      	movs	r1, #4
 800a070:	6860      	ldr	r0, [r4, #4]
 800a072:	f7ff ffa1 	bl	8009fb8 <std>
 800a076:	2201      	movs	r2, #1
 800a078:	2109      	movs	r1, #9
 800a07a:	68a0      	ldr	r0, [r4, #8]
 800a07c:	f7ff ff9c 	bl	8009fb8 <std>
 800a080:	2202      	movs	r2, #2
 800a082:	2112      	movs	r1, #18
 800a084:	68e0      	ldr	r0, [r4, #12]
 800a086:	f7ff ff97 	bl	8009fb8 <std>
 800a08a:	2301      	movs	r3, #1
 800a08c:	61a3      	str	r3, [r4, #24]
 800a08e:	bd10      	pop	{r4, pc}
 800a090:	0800b180 	.word	0x0800b180
 800a094:	0800a001 	.word	0x0800a001

0800a098 <__sfp>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	4b1b      	ldr	r3, [pc, #108]	; (800a108 <__sfp+0x70>)
 800a09c:	4607      	mov	r7, r0
 800a09e:	681e      	ldr	r6, [r3, #0]
 800a0a0:	69b3      	ldr	r3, [r6, #24]
 800a0a2:	b913      	cbnz	r3, 800a0aa <__sfp+0x12>
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f7ff ffc7 	bl	800a038 <__sinit>
 800a0aa:	3648      	adds	r6, #72	; 0x48
 800a0ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	d503      	bpl.n	800a0bc <__sfp+0x24>
 800a0b4:	6833      	ldr	r3, [r6, #0]
 800a0b6:	b133      	cbz	r3, 800a0c6 <__sfp+0x2e>
 800a0b8:	6836      	ldr	r6, [r6, #0]
 800a0ba:	e7f7      	b.n	800a0ac <__sfp+0x14>
 800a0bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0c0:	b16d      	cbz	r5, 800a0de <__sfp+0x46>
 800a0c2:	3468      	adds	r4, #104	; 0x68
 800a0c4:	e7f4      	b.n	800a0b0 <__sfp+0x18>
 800a0c6:	2104      	movs	r1, #4
 800a0c8:	4638      	mov	r0, r7
 800a0ca:	f7ff ff9f 	bl	800a00c <__sfmoreglue>
 800a0ce:	6030      	str	r0, [r6, #0]
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d1f1      	bne.n	800a0b8 <__sfp+0x20>
 800a0d4:	230c      	movs	r3, #12
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	603b      	str	r3, [r7, #0]
 800a0da:	4620      	mov	r0, r4
 800a0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0de:	4b0b      	ldr	r3, [pc, #44]	; (800a10c <__sfp+0x74>)
 800a0e0:	6665      	str	r5, [r4, #100]	; 0x64
 800a0e2:	e9c4 5500 	strd	r5, r5, [r4]
 800a0e6:	60a5      	str	r5, [r4, #8]
 800a0e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a0ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a0f0:	2208      	movs	r2, #8
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0f8:	f7ff fc91 	bl	8009a1e <memset>
 800a0fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a104:	e7e9      	b.n	800a0da <__sfp+0x42>
 800a106:	bf00      	nop
 800a108:	0800b180 	.word	0x0800b180
 800a10c:	ffff0001 	.word	0xffff0001

0800a110 <_fwalk_reent>:
 800a110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a114:	4680      	mov	r8, r0
 800a116:	4689      	mov	r9, r1
 800a118:	2600      	movs	r6, #0
 800a11a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a11e:	b914      	cbnz	r4, 800a126 <_fwalk_reent+0x16>
 800a120:	4630      	mov	r0, r6
 800a122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a126:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a12a:	3f01      	subs	r7, #1
 800a12c:	d501      	bpl.n	800a132 <_fwalk_reent+0x22>
 800a12e:	6824      	ldr	r4, [r4, #0]
 800a130:	e7f5      	b.n	800a11e <_fwalk_reent+0xe>
 800a132:	89ab      	ldrh	r3, [r5, #12]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d907      	bls.n	800a148 <_fwalk_reent+0x38>
 800a138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a13c:	3301      	adds	r3, #1
 800a13e:	d003      	beq.n	800a148 <_fwalk_reent+0x38>
 800a140:	4629      	mov	r1, r5
 800a142:	4640      	mov	r0, r8
 800a144:	47c8      	blx	r9
 800a146:	4306      	orrs	r6, r0
 800a148:	3568      	adds	r5, #104	; 0x68
 800a14a:	e7ee      	b.n	800a12a <_fwalk_reent+0x1a>

0800a14c <__locale_ctype_ptr_l>:
 800a14c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a150:	4770      	bx	lr

0800a152 <__swhatbuf_r>:
 800a152:	b570      	push	{r4, r5, r6, lr}
 800a154:	460e      	mov	r6, r1
 800a156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a15a:	b096      	sub	sp, #88	; 0x58
 800a15c:	2900      	cmp	r1, #0
 800a15e:	4614      	mov	r4, r2
 800a160:	461d      	mov	r5, r3
 800a162:	da07      	bge.n	800a174 <__swhatbuf_r+0x22>
 800a164:	2300      	movs	r3, #0
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	89b3      	ldrh	r3, [r6, #12]
 800a16a:	061a      	lsls	r2, r3, #24
 800a16c:	d410      	bmi.n	800a190 <__swhatbuf_r+0x3e>
 800a16e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a172:	e00e      	b.n	800a192 <__swhatbuf_r+0x40>
 800a174:	466a      	mov	r2, sp
 800a176:	f000 fc51 	bl	800aa1c <_fstat_r>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	dbf2      	blt.n	800a164 <__swhatbuf_r+0x12>
 800a17e:	9a01      	ldr	r2, [sp, #4]
 800a180:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a184:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a188:	425a      	negs	r2, r3
 800a18a:	415a      	adcs	r2, r3
 800a18c:	602a      	str	r2, [r5, #0]
 800a18e:	e7ee      	b.n	800a16e <__swhatbuf_r+0x1c>
 800a190:	2340      	movs	r3, #64	; 0x40
 800a192:	2000      	movs	r0, #0
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	b016      	add	sp, #88	; 0x58
 800a198:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a19c <__smakebuf_r>:
 800a19c:	898b      	ldrh	r3, [r1, #12]
 800a19e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1a0:	079d      	lsls	r5, r3, #30
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	d507      	bpl.n	800a1b8 <__smakebuf_r+0x1c>
 800a1a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	6123      	str	r3, [r4, #16]
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	6163      	str	r3, [r4, #20]
 800a1b4:	b002      	add	sp, #8
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	ab01      	add	r3, sp, #4
 800a1ba:	466a      	mov	r2, sp
 800a1bc:	f7ff ffc9 	bl	800a152 <__swhatbuf_r>
 800a1c0:	9900      	ldr	r1, [sp, #0]
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f000 f887 	bl	800a2d8 <_malloc_r>
 800a1ca:	b948      	cbnz	r0, 800a1e0 <__smakebuf_r+0x44>
 800a1cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d0:	059a      	lsls	r2, r3, #22
 800a1d2:	d4ef      	bmi.n	800a1b4 <__smakebuf_r+0x18>
 800a1d4:	f023 0303 	bic.w	r3, r3, #3
 800a1d8:	f043 0302 	orr.w	r3, r3, #2
 800a1dc:	81a3      	strh	r3, [r4, #12]
 800a1de:	e7e3      	b.n	800a1a8 <__smakebuf_r+0xc>
 800a1e0:	4b0d      	ldr	r3, [pc, #52]	; (800a218 <__smakebuf_r+0x7c>)
 800a1e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	6020      	str	r0, [r4, #0]
 800a1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ec:	81a3      	strh	r3, [r4, #12]
 800a1ee:	9b00      	ldr	r3, [sp, #0]
 800a1f0:	6120      	str	r0, [r4, #16]
 800a1f2:	6163      	str	r3, [r4, #20]
 800a1f4:	9b01      	ldr	r3, [sp, #4]
 800a1f6:	b15b      	cbz	r3, 800a210 <__smakebuf_r+0x74>
 800a1f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	f000 fc1f 	bl	800aa40 <_isatty_r>
 800a202:	b128      	cbz	r0, 800a210 <__smakebuf_r+0x74>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	f023 0303 	bic.w	r3, r3, #3
 800a20a:	f043 0301 	orr.w	r3, r3, #1
 800a20e:	81a3      	strh	r3, [r4, #12]
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	431d      	orrs	r5, r3
 800a214:	81a5      	strh	r5, [r4, #12]
 800a216:	e7cd      	b.n	800a1b4 <__smakebuf_r+0x18>
 800a218:	0800a001 	.word	0x0800a001

0800a21c <__ascii_mbtowc>:
 800a21c:	b082      	sub	sp, #8
 800a21e:	b901      	cbnz	r1, 800a222 <__ascii_mbtowc+0x6>
 800a220:	a901      	add	r1, sp, #4
 800a222:	b142      	cbz	r2, 800a236 <__ascii_mbtowc+0x1a>
 800a224:	b14b      	cbz	r3, 800a23a <__ascii_mbtowc+0x1e>
 800a226:	7813      	ldrb	r3, [r2, #0]
 800a228:	600b      	str	r3, [r1, #0]
 800a22a:	7812      	ldrb	r2, [r2, #0]
 800a22c:	1c10      	adds	r0, r2, #0
 800a22e:	bf18      	it	ne
 800a230:	2001      	movne	r0, #1
 800a232:	b002      	add	sp, #8
 800a234:	4770      	bx	lr
 800a236:	4610      	mov	r0, r2
 800a238:	e7fb      	b.n	800a232 <__ascii_mbtowc+0x16>
 800a23a:	f06f 0001 	mvn.w	r0, #1
 800a23e:	e7f8      	b.n	800a232 <__ascii_mbtowc+0x16>

0800a240 <_free_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	4605      	mov	r5, r0
 800a244:	2900      	cmp	r1, #0
 800a246:	d043      	beq.n	800a2d0 <_free_r+0x90>
 800a248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24c:	1f0c      	subs	r4, r1, #4
 800a24e:	2b00      	cmp	r3, #0
 800a250:	bfb8      	it	lt
 800a252:	18e4      	addlt	r4, r4, r3
 800a254:	f000 fc24 	bl	800aaa0 <__malloc_lock>
 800a258:	4a1e      	ldr	r2, [pc, #120]	; (800a2d4 <_free_r+0x94>)
 800a25a:	6813      	ldr	r3, [r2, #0]
 800a25c:	4610      	mov	r0, r2
 800a25e:	b933      	cbnz	r3, 800a26e <_free_r+0x2e>
 800a260:	6063      	str	r3, [r4, #4]
 800a262:	6014      	str	r4, [r2, #0]
 800a264:	4628      	mov	r0, r5
 800a266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a26a:	f000 bc1a 	b.w	800aaa2 <__malloc_unlock>
 800a26e:	42a3      	cmp	r3, r4
 800a270:	d90b      	bls.n	800a28a <_free_r+0x4a>
 800a272:	6821      	ldr	r1, [r4, #0]
 800a274:	1862      	adds	r2, r4, r1
 800a276:	4293      	cmp	r3, r2
 800a278:	bf01      	itttt	eq
 800a27a:	681a      	ldreq	r2, [r3, #0]
 800a27c:	685b      	ldreq	r3, [r3, #4]
 800a27e:	1852      	addeq	r2, r2, r1
 800a280:	6022      	streq	r2, [r4, #0]
 800a282:	6063      	str	r3, [r4, #4]
 800a284:	6004      	str	r4, [r0, #0]
 800a286:	e7ed      	b.n	800a264 <_free_r+0x24>
 800a288:	4613      	mov	r3, r2
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	b10a      	cbz	r2, 800a292 <_free_r+0x52>
 800a28e:	42a2      	cmp	r2, r4
 800a290:	d9fa      	bls.n	800a288 <_free_r+0x48>
 800a292:	6819      	ldr	r1, [r3, #0]
 800a294:	1858      	adds	r0, r3, r1
 800a296:	42a0      	cmp	r0, r4
 800a298:	d10b      	bne.n	800a2b2 <_free_r+0x72>
 800a29a:	6820      	ldr	r0, [r4, #0]
 800a29c:	4401      	add	r1, r0
 800a29e:	1858      	adds	r0, r3, r1
 800a2a0:	4282      	cmp	r2, r0
 800a2a2:	6019      	str	r1, [r3, #0]
 800a2a4:	d1de      	bne.n	800a264 <_free_r+0x24>
 800a2a6:	6810      	ldr	r0, [r2, #0]
 800a2a8:	6852      	ldr	r2, [r2, #4]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	6019      	str	r1, [r3, #0]
 800a2ae:	605a      	str	r2, [r3, #4]
 800a2b0:	e7d8      	b.n	800a264 <_free_r+0x24>
 800a2b2:	d902      	bls.n	800a2ba <_free_r+0x7a>
 800a2b4:	230c      	movs	r3, #12
 800a2b6:	602b      	str	r3, [r5, #0]
 800a2b8:	e7d4      	b.n	800a264 <_free_r+0x24>
 800a2ba:	6820      	ldr	r0, [r4, #0]
 800a2bc:	1821      	adds	r1, r4, r0
 800a2be:	428a      	cmp	r2, r1
 800a2c0:	bf01      	itttt	eq
 800a2c2:	6811      	ldreq	r1, [r2, #0]
 800a2c4:	6852      	ldreq	r2, [r2, #4]
 800a2c6:	1809      	addeq	r1, r1, r0
 800a2c8:	6021      	streq	r1, [r4, #0]
 800a2ca:	6062      	str	r2, [r4, #4]
 800a2cc:	605c      	str	r4, [r3, #4]
 800a2ce:	e7c9      	b.n	800a264 <_free_r+0x24>
 800a2d0:	bd38      	pop	{r3, r4, r5, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200009e0 	.word	0x200009e0

0800a2d8 <_malloc_r>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	1ccd      	adds	r5, r1, #3
 800a2dc:	f025 0503 	bic.w	r5, r5, #3
 800a2e0:	3508      	adds	r5, #8
 800a2e2:	2d0c      	cmp	r5, #12
 800a2e4:	bf38      	it	cc
 800a2e6:	250c      	movcc	r5, #12
 800a2e8:	2d00      	cmp	r5, #0
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	db01      	blt.n	800a2f2 <_malloc_r+0x1a>
 800a2ee:	42a9      	cmp	r1, r5
 800a2f0:	d903      	bls.n	800a2fa <_malloc_r+0x22>
 800a2f2:	230c      	movs	r3, #12
 800a2f4:	6033      	str	r3, [r6, #0]
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	bd70      	pop	{r4, r5, r6, pc}
 800a2fa:	f000 fbd1 	bl	800aaa0 <__malloc_lock>
 800a2fe:	4a21      	ldr	r2, [pc, #132]	; (800a384 <_malloc_r+0xac>)
 800a300:	6814      	ldr	r4, [r2, #0]
 800a302:	4621      	mov	r1, r4
 800a304:	b991      	cbnz	r1, 800a32c <_malloc_r+0x54>
 800a306:	4c20      	ldr	r4, [pc, #128]	; (800a388 <_malloc_r+0xb0>)
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	b91b      	cbnz	r3, 800a314 <_malloc_r+0x3c>
 800a30c:	4630      	mov	r0, r6
 800a30e:	f000 fb03 	bl	800a918 <_sbrk_r>
 800a312:	6020      	str	r0, [r4, #0]
 800a314:	4629      	mov	r1, r5
 800a316:	4630      	mov	r0, r6
 800a318:	f000 fafe 	bl	800a918 <_sbrk_r>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d124      	bne.n	800a36a <_malloc_r+0x92>
 800a320:	230c      	movs	r3, #12
 800a322:	4630      	mov	r0, r6
 800a324:	6033      	str	r3, [r6, #0]
 800a326:	f000 fbbc 	bl	800aaa2 <__malloc_unlock>
 800a32a:	e7e4      	b.n	800a2f6 <_malloc_r+0x1e>
 800a32c:	680b      	ldr	r3, [r1, #0]
 800a32e:	1b5b      	subs	r3, r3, r5
 800a330:	d418      	bmi.n	800a364 <_malloc_r+0x8c>
 800a332:	2b0b      	cmp	r3, #11
 800a334:	d90f      	bls.n	800a356 <_malloc_r+0x7e>
 800a336:	600b      	str	r3, [r1, #0]
 800a338:	18cc      	adds	r4, r1, r3
 800a33a:	50cd      	str	r5, [r1, r3]
 800a33c:	4630      	mov	r0, r6
 800a33e:	f000 fbb0 	bl	800aaa2 <__malloc_unlock>
 800a342:	f104 000b 	add.w	r0, r4, #11
 800a346:	1d23      	adds	r3, r4, #4
 800a348:	f020 0007 	bic.w	r0, r0, #7
 800a34c:	1ac3      	subs	r3, r0, r3
 800a34e:	d0d3      	beq.n	800a2f8 <_malloc_r+0x20>
 800a350:	425a      	negs	r2, r3
 800a352:	50e2      	str	r2, [r4, r3]
 800a354:	e7d0      	b.n	800a2f8 <_malloc_r+0x20>
 800a356:	684b      	ldr	r3, [r1, #4]
 800a358:	428c      	cmp	r4, r1
 800a35a:	bf16      	itet	ne
 800a35c:	6063      	strne	r3, [r4, #4]
 800a35e:	6013      	streq	r3, [r2, #0]
 800a360:	460c      	movne	r4, r1
 800a362:	e7eb      	b.n	800a33c <_malloc_r+0x64>
 800a364:	460c      	mov	r4, r1
 800a366:	6849      	ldr	r1, [r1, #4]
 800a368:	e7cc      	b.n	800a304 <_malloc_r+0x2c>
 800a36a:	1cc4      	adds	r4, r0, #3
 800a36c:	f024 0403 	bic.w	r4, r4, #3
 800a370:	42a0      	cmp	r0, r4
 800a372:	d005      	beq.n	800a380 <_malloc_r+0xa8>
 800a374:	1a21      	subs	r1, r4, r0
 800a376:	4630      	mov	r0, r6
 800a378:	f000 face 	bl	800a918 <_sbrk_r>
 800a37c:	3001      	adds	r0, #1
 800a37e:	d0cf      	beq.n	800a320 <_malloc_r+0x48>
 800a380:	6025      	str	r5, [r4, #0]
 800a382:	e7db      	b.n	800a33c <_malloc_r+0x64>
 800a384:	200009e0 	.word	0x200009e0
 800a388:	200009e4 	.word	0x200009e4

0800a38c <__sfputc_r>:
 800a38c:	6893      	ldr	r3, [r2, #8]
 800a38e:	b410      	push	{r4}
 800a390:	3b01      	subs	r3, #1
 800a392:	2b00      	cmp	r3, #0
 800a394:	6093      	str	r3, [r2, #8]
 800a396:	da07      	bge.n	800a3a8 <__sfputc_r+0x1c>
 800a398:	6994      	ldr	r4, [r2, #24]
 800a39a:	42a3      	cmp	r3, r4
 800a39c:	db01      	blt.n	800a3a2 <__sfputc_r+0x16>
 800a39e:	290a      	cmp	r1, #10
 800a3a0:	d102      	bne.n	800a3a8 <__sfputc_r+0x1c>
 800a3a2:	bc10      	pop	{r4}
 800a3a4:	f7ff bc98 	b.w	8009cd8 <__swbuf_r>
 800a3a8:	6813      	ldr	r3, [r2, #0]
 800a3aa:	1c58      	adds	r0, r3, #1
 800a3ac:	6010      	str	r0, [r2, #0]
 800a3ae:	7019      	strb	r1, [r3, #0]
 800a3b0:	4608      	mov	r0, r1
 800a3b2:	bc10      	pop	{r4}
 800a3b4:	4770      	bx	lr

0800a3b6 <__sfputs_r>:
 800a3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	4614      	mov	r4, r2
 800a3be:	18d5      	adds	r5, r2, r3
 800a3c0:	42ac      	cmp	r4, r5
 800a3c2:	d101      	bne.n	800a3c8 <__sfputs_r+0x12>
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	e007      	b.n	800a3d8 <__sfputs_r+0x22>
 800a3c8:	463a      	mov	r2, r7
 800a3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7ff ffdc 	bl	800a38c <__sfputc_r>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d1f3      	bne.n	800a3c0 <__sfputs_r+0xa>
 800a3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3dc <_vfiprintf_r>:
 800a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	b09d      	sub	sp, #116	; 0x74
 800a3e4:	4617      	mov	r7, r2
 800a3e6:	461d      	mov	r5, r3
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	b118      	cbz	r0, 800a3f4 <_vfiprintf_r+0x18>
 800a3ec:	6983      	ldr	r3, [r0, #24]
 800a3ee:	b90b      	cbnz	r3, 800a3f4 <_vfiprintf_r+0x18>
 800a3f0:	f7ff fe22 	bl	800a038 <__sinit>
 800a3f4:	4b7c      	ldr	r3, [pc, #496]	; (800a5e8 <_vfiprintf_r+0x20c>)
 800a3f6:	429c      	cmp	r4, r3
 800a3f8:	d158      	bne.n	800a4ac <_vfiprintf_r+0xd0>
 800a3fa:	6874      	ldr	r4, [r6, #4]
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	0718      	lsls	r0, r3, #28
 800a400:	d55e      	bpl.n	800a4c0 <_vfiprintf_r+0xe4>
 800a402:	6923      	ldr	r3, [r4, #16]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d05b      	beq.n	800a4c0 <_vfiprintf_r+0xe4>
 800a408:	2300      	movs	r3, #0
 800a40a:	9309      	str	r3, [sp, #36]	; 0x24
 800a40c:	2320      	movs	r3, #32
 800a40e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a412:	2330      	movs	r3, #48	; 0x30
 800a414:	f04f 0b01 	mov.w	fp, #1
 800a418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a41c:	9503      	str	r5, [sp, #12]
 800a41e:	46b8      	mov	r8, r7
 800a420:	4645      	mov	r5, r8
 800a422:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a426:	b10b      	cbz	r3, 800a42c <_vfiprintf_r+0x50>
 800a428:	2b25      	cmp	r3, #37	; 0x25
 800a42a:	d154      	bne.n	800a4d6 <_vfiprintf_r+0xfa>
 800a42c:	ebb8 0a07 	subs.w	sl, r8, r7
 800a430:	d00b      	beq.n	800a44a <_vfiprintf_r+0x6e>
 800a432:	4653      	mov	r3, sl
 800a434:	463a      	mov	r2, r7
 800a436:	4621      	mov	r1, r4
 800a438:	4630      	mov	r0, r6
 800a43a:	f7ff ffbc 	bl	800a3b6 <__sfputs_r>
 800a43e:	3001      	adds	r0, #1
 800a440:	f000 80c2 	beq.w	800a5c8 <_vfiprintf_r+0x1ec>
 800a444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a446:	4453      	add	r3, sl
 800a448:	9309      	str	r3, [sp, #36]	; 0x24
 800a44a:	f898 3000 	ldrb.w	r3, [r8]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 80ba 	beq.w	800a5c8 <_vfiprintf_r+0x1ec>
 800a454:	2300      	movs	r3, #0
 800a456:	f04f 32ff 	mov.w	r2, #4294967295
 800a45a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	9307      	str	r3, [sp, #28]
 800a462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a466:	931a      	str	r3, [sp, #104]	; 0x68
 800a468:	46a8      	mov	r8, r5
 800a46a:	2205      	movs	r2, #5
 800a46c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a470:	485e      	ldr	r0, [pc, #376]	; (800a5ec <_vfiprintf_r+0x210>)
 800a472:	f000 fb07 	bl	800aa84 <memchr>
 800a476:	9b04      	ldr	r3, [sp, #16]
 800a478:	bb78      	cbnz	r0, 800a4da <_vfiprintf_r+0xfe>
 800a47a:	06d9      	lsls	r1, r3, #27
 800a47c:	bf44      	itt	mi
 800a47e:	2220      	movmi	r2, #32
 800a480:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a484:	071a      	lsls	r2, r3, #28
 800a486:	bf44      	itt	mi
 800a488:	222b      	movmi	r2, #43	; 0x2b
 800a48a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a48e:	782a      	ldrb	r2, [r5, #0]
 800a490:	2a2a      	cmp	r2, #42	; 0x2a
 800a492:	d02a      	beq.n	800a4ea <_vfiprintf_r+0x10e>
 800a494:	46a8      	mov	r8, r5
 800a496:	2000      	movs	r0, #0
 800a498:	250a      	movs	r5, #10
 800a49a:	9a07      	ldr	r2, [sp, #28]
 800a49c:	4641      	mov	r1, r8
 800a49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4a2:	3b30      	subs	r3, #48	; 0x30
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d969      	bls.n	800a57c <_vfiprintf_r+0x1a0>
 800a4a8:	b360      	cbz	r0, 800a504 <_vfiprintf_r+0x128>
 800a4aa:	e024      	b.n	800a4f6 <_vfiprintf_r+0x11a>
 800a4ac:	4b50      	ldr	r3, [pc, #320]	; (800a5f0 <_vfiprintf_r+0x214>)
 800a4ae:	429c      	cmp	r4, r3
 800a4b0:	d101      	bne.n	800a4b6 <_vfiprintf_r+0xda>
 800a4b2:	68b4      	ldr	r4, [r6, #8]
 800a4b4:	e7a2      	b.n	800a3fc <_vfiprintf_r+0x20>
 800a4b6:	4b4f      	ldr	r3, [pc, #316]	; (800a5f4 <_vfiprintf_r+0x218>)
 800a4b8:	429c      	cmp	r4, r3
 800a4ba:	bf08      	it	eq
 800a4bc:	68f4      	ldreq	r4, [r6, #12]
 800a4be:	e79d      	b.n	800a3fc <_vfiprintf_r+0x20>
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f7ff fc5a 	bl	8009d7c <__swsetup_r>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	d09d      	beq.n	800a408 <_vfiprintf_r+0x2c>
 800a4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d0:	b01d      	add	sp, #116	; 0x74
 800a4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d6:	46a8      	mov	r8, r5
 800a4d8:	e7a2      	b.n	800a420 <_vfiprintf_r+0x44>
 800a4da:	4a44      	ldr	r2, [pc, #272]	; (800a5ec <_vfiprintf_r+0x210>)
 800a4dc:	4645      	mov	r5, r8
 800a4de:	1a80      	subs	r0, r0, r2
 800a4e0:	fa0b f000 	lsl.w	r0, fp, r0
 800a4e4:	4318      	orrs	r0, r3
 800a4e6:	9004      	str	r0, [sp, #16]
 800a4e8:	e7be      	b.n	800a468 <_vfiprintf_r+0x8c>
 800a4ea:	9a03      	ldr	r2, [sp, #12]
 800a4ec:	1d11      	adds	r1, r2, #4
 800a4ee:	6812      	ldr	r2, [r2, #0]
 800a4f0:	9103      	str	r1, [sp, #12]
 800a4f2:	2a00      	cmp	r2, #0
 800a4f4:	db01      	blt.n	800a4fa <_vfiprintf_r+0x11e>
 800a4f6:	9207      	str	r2, [sp, #28]
 800a4f8:	e004      	b.n	800a504 <_vfiprintf_r+0x128>
 800a4fa:	4252      	negs	r2, r2
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	9207      	str	r2, [sp, #28]
 800a502:	9304      	str	r3, [sp, #16]
 800a504:	f898 3000 	ldrb.w	r3, [r8]
 800a508:	2b2e      	cmp	r3, #46	; 0x2e
 800a50a:	d10e      	bne.n	800a52a <_vfiprintf_r+0x14e>
 800a50c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a510:	2b2a      	cmp	r3, #42	; 0x2a
 800a512:	d138      	bne.n	800a586 <_vfiprintf_r+0x1aa>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	f108 0802 	add.w	r8, r8, #2
 800a51a:	1d1a      	adds	r2, r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	9203      	str	r2, [sp, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	bfb8      	it	lt
 800a524:	f04f 33ff 	movlt.w	r3, #4294967295
 800a528:	9305      	str	r3, [sp, #20]
 800a52a:	4d33      	ldr	r5, [pc, #204]	; (800a5f8 <_vfiprintf_r+0x21c>)
 800a52c:	2203      	movs	r2, #3
 800a52e:	f898 1000 	ldrb.w	r1, [r8]
 800a532:	4628      	mov	r0, r5
 800a534:	f000 faa6 	bl	800aa84 <memchr>
 800a538:	b140      	cbz	r0, 800a54c <_vfiprintf_r+0x170>
 800a53a:	2340      	movs	r3, #64	; 0x40
 800a53c:	1b40      	subs	r0, r0, r5
 800a53e:	fa03 f000 	lsl.w	r0, r3, r0
 800a542:	9b04      	ldr	r3, [sp, #16]
 800a544:	f108 0801 	add.w	r8, r8, #1
 800a548:	4303      	orrs	r3, r0
 800a54a:	9304      	str	r3, [sp, #16]
 800a54c:	f898 1000 	ldrb.w	r1, [r8]
 800a550:	2206      	movs	r2, #6
 800a552:	482a      	ldr	r0, [pc, #168]	; (800a5fc <_vfiprintf_r+0x220>)
 800a554:	f108 0701 	add.w	r7, r8, #1
 800a558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a55c:	f000 fa92 	bl	800aa84 <memchr>
 800a560:	2800      	cmp	r0, #0
 800a562:	d037      	beq.n	800a5d4 <_vfiprintf_r+0x1f8>
 800a564:	4b26      	ldr	r3, [pc, #152]	; (800a600 <_vfiprintf_r+0x224>)
 800a566:	bb1b      	cbnz	r3, 800a5b0 <_vfiprintf_r+0x1d4>
 800a568:	9b03      	ldr	r3, [sp, #12]
 800a56a:	3307      	adds	r3, #7
 800a56c:	f023 0307 	bic.w	r3, r3, #7
 800a570:	3308      	adds	r3, #8
 800a572:	9303      	str	r3, [sp, #12]
 800a574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a576:	444b      	add	r3, r9
 800a578:	9309      	str	r3, [sp, #36]	; 0x24
 800a57a:	e750      	b.n	800a41e <_vfiprintf_r+0x42>
 800a57c:	fb05 3202 	mla	r2, r5, r2, r3
 800a580:	2001      	movs	r0, #1
 800a582:	4688      	mov	r8, r1
 800a584:	e78a      	b.n	800a49c <_vfiprintf_r+0xc0>
 800a586:	2300      	movs	r3, #0
 800a588:	250a      	movs	r5, #10
 800a58a:	4619      	mov	r1, r3
 800a58c:	f108 0801 	add.w	r8, r8, #1
 800a590:	9305      	str	r3, [sp, #20]
 800a592:	4640      	mov	r0, r8
 800a594:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a598:	3a30      	subs	r2, #48	; 0x30
 800a59a:	2a09      	cmp	r2, #9
 800a59c:	d903      	bls.n	800a5a6 <_vfiprintf_r+0x1ca>
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0c3      	beq.n	800a52a <_vfiprintf_r+0x14e>
 800a5a2:	9105      	str	r1, [sp, #20]
 800a5a4:	e7c1      	b.n	800a52a <_vfiprintf_r+0x14e>
 800a5a6:	fb05 2101 	mla	r1, r5, r1, r2
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	4680      	mov	r8, r0
 800a5ae:	e7f0      	b.n	800a592 <_vfiprintf_r+0x1b6>
 800a5b0:	ab03      	add	r3, sp, #12
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	4b13      	ldr	r3, [pc, #76]	; (800a604 <_vfiprintf_r+0x228>)
 800a5b8:	a904      	add	r1, sp, #16
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f3af 8000 	nop.w
 800a5c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a5c4:	4681      	mov	r9, r0
 800a5c6:	d1d5      	bne.n	800a574 <_vfiprintf_r+0x198>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	065b      	lsls	r3, r3, #25
 800a5cc:	f53f af7e 	bmi.w	800a4cc <_vfiprintf_r+0xf0>
 800a5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5d2:	e77d      	b.n	800a4d0 <_vfiprintf_r+0xf4>
 800a5d4:	ab03      	add	r3, sp, #12
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	4622      	mov	r2, r4
 800a5da:	4b0a      	ldr	r3, [pc, #40]	; (800a604 <_vfiprintf_r+0x228>)
 800a5dc:	a904      	add	r1, sp, #16
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f000 f888 	bl	800a6f4 <_printf_i>
 800a5e4:	e7ec      	b.n	800a5c0 <_vfiprintf_r+0x1e4>
 800a5e6:	bf00      	nop
 800a5e8:	0800b1cc 	.word	0x0800b1cc
 800a5ec:	0800b216 	.word	0x0800b216
 800a5f0:	0800b1ec 	.word	0x0800b1ec
 800a5f4:	0800b1ac 	.word	0x0800b1ac
 800a5f8:	0800b21c 	.word	0x0800b21c
 800a5fc:	0800b220 	.word	0x0800b220
 800a600:	00000000 	.word	0x00000000
 800a604:	0800a3b7 	.word	0x0800a3b7

0800a608 <_printf_common>:
 800a608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a60c:	4691      	mov	r9, r2
 800a60e:	461f      	mov	r7, r3
 800a610:	688a      	ldr	r2, [r1, #8]
 800a612:	690b      	ldr	r3, [r1, #16]
 800a614:	4606      	mov	r6, r0
 800a616:	4293      	cmp	r3, r2
 800a618:	bfb8      	it	lt
 800a61a:	4613      	movlt	r3, r2
 800a61c:	f8c9 3000 	str.w	r3, [r9]
 800a620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a624:	460c      	mov	r4, r1
 800a626:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a62a:	b112      	cbz	r2, 800a632 <_printf_common+0x2a>
 800a62c:	3301      	adds	r3, #1
 800a62e:	f8c9 3000 	str.w	r3, [r9]
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	0699      	lsls	r1, r3, #26
 800a636:	bf42      	ittt	mi
 800a638:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a63c:	3302      	addmi	r3, #2
 800a63e:	f8c9 3000 	strmi.w	r3, [r9]
 800a642:	6825      	ldr	r5, [r4, #0]
 800a644:	f015 0506 	ands.w	r5, r5, #6
 800a648:	d107      	bne.n	800a65a <_printf_common+0x52>
 800a64a:	f104 0a19 	add.w	sl, r4, #25
 800a64e:	68e3      	ldr	r3, [r4, #12]
 800a650:	f8d9 2000 	ldr.w	r2, [r9]
 800a654:	1a9b      	subs	r3, r3, r2
 800a656:	42ab      	cmp	r3, r5
 800a658:	dc29      	bgt.n	800a6ae <_printf_common+0xa6>
 800a65a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a65e:	6822      	ldr	r2, [r4, #0]
 800a660:	3300      	adds	r3, #0
 800a662:	bf18      	it	ne
 800a664:	2301      	movne	r3, #1
 800a666:	0692      	lsls	r2, r2, #26
 800a668:	d42e      	bmi.n	800a6c8 <_printf_common+0xc0>
 800a66a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a66e:	4639      	mov	r1, r7
 800a670:	4630      	mov	r0, r6
 800a672:	47c0      	blx	r8
 800a674:	3001      	adds	r0, #1
 800a676:	d021      	beq.n	800a6bc <_printf_common+0xb4>
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	68e5      	ldr	r5, [r4, #12]
 800a67c:	f003 0306 	and.w	r3, r3, #6
 800a680:	2b04      	cmp	r3, #4
 800a682:	bf18      	it	ne
 800a684:	2500      	movne	r5, #0
 800a686:	f8d9 2000 	ldr.w	r2, [r9]
 800a68a:	f04f 0900 	mov.w	r9, #0
 800a68e:	bf08      	it	eq
 800a690:	1aad      	subeq	r5, r5, r2
 800a692:	68a3      	ldr	r3, [r4, #8]
 800a694:	6922      	ldr	r2, [r4, #16]
 800a696:	bf08      	it	eq
 800a698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a69c:	4293      	cmp	r3, r2
 800a69e:	bfc4      	itt	gt
 800a6a0:	1a9b      	subgt	r3, r3, r2
 800a6a2:	18ed      	addgt	r5, r5, r3
 800a6a4:	341a      	adds	r4, #26
 800a6a6:	454d      	cmp	r5, r9
 800a6a8:	d11a      	bne.n	800a6e0 <_printf_common+0xd8>
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	e008      	b.n	800a6c0 <_printf_common+0xb8>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	4652      	mov	r2, sl
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	47c0      	blx	r8
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d103      	bne.n	800a6c4 <_printf_common+0xbc>
 800a6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c4:	3501      	adds	r5, #1
 800a6c6:	e7c2      	b.n	800a64e <_printf_common+0x46>
 800a6c8:	2030      	movs	r0, #48	; 0x30
 800a6ca:	18e1      	adds	r1, r4, r3
 800a6cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6d6:	4422      	add	r2, r4
 800a6d8:	3302      	adds	r3, #2
 800a6da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6de:	e7c4      	b.n	800a66a <_printf_common+0x62>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	4622      	mov	r2, r4
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	47c0      	blx	r8
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	d0e6      	beq.n	800a6bc <_printf_common+0xb4>
 800a6ee:	f109 0901 	add.w	r9, r9, #1
 800a6f2:	e7d8      	b.n	800a6a6 <_printf_common+0x9e>

0800a6f4 <_printf_i>:
 800a6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	7e09      	ldrb	r1, [r1, #24]
 800a700:	b085      	sub	sp, #20
 800a702:	296e      	cmp	r1, #110	; 0x6e
 800a704:	4617      	mov	r7, r2
 800a706:	4606      	mov	r6, r0
 800a708:	4698      	mov	r8, r3
 800a70a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a70c:	f000 80b3 	beq.w	800a876 <_printf_i+0x182>
 800a710:	d822      	bhi.n	800a758 <_printf_i+0x64>
 800a712:	2963      	cmp	r1, #99	; 0x63
 800a714:	d036      	beq.n	800a784 <_printf_i+0x90>
 800a716:	d80a      	bhi.n	800a72e <_printf_i+0x3a>
 800a718:	2900      	cmp	r1, #0
 800a71a:	f000 80b9 	beq.w	800a890 <_printf_i+0x19c>
 800a71e:	2958      	cmp	r1, #88	; 0x58
 800a720:	f000 8083 	beq.w	800a82a <_printf_i+0x136>
 800a724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a728:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a72c:	e032      	b.n	800a794 <_printf_i+0xa0>
 800a72e:	2964      	cmp	r1, #100	; 0x64
 800a730:	d001      	beq.n	800a736 <_printf_i+0x42>
 800a732:	2969      	cmp	r1, #105	; 0x69
 800a734:	d1f6      	bne.n	800a724 <_printf_i+0x30>
 800a736:	6820      	ldr	r0, [r4, #0]
 800a738:	6813      	ldr	r3, [r2, #0]
 800a73a:	0605      	lsls	r5, r0, #24
 800a73c:	f103 0104 	add.w	r1, r3, #4
 800a740:	d52a      	bpl.n	800a798 <_printf_i+0xa4>
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6011      	str	r1, [r2, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	da03      	bge.n	800a752 <_printf_i+0x5e>
 800a74a:	222d      	movs	r2, #45	; 0x2d
 800a74c:	425b      	negs	r3, r3
 800a74e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a752:	486f      	ldr	r0, [pc, #444]	; (800a910 <_printf_i+0x21c>)
 800a754:	220a      	movs	r2, #10
 800a756:	e039      	b.n	800a7cc <_printf_i+0xd8>
 800a758:	2973      	cmp	r1, #115	; 0x73
 800a75a:	f000 809d 	beq.w	800a898 <_printf_i+0x1a4>
 800a75e:	d808      	bhi.n	800a772 <_printf_i+0x7e>
 800a760:	296f      	cmp	r1, #111	; 0x6f
 800a762:	d020      	beq.n	800a7a6 <_printf_i+0xb2>
 800a764:	2970      	cmp	r1, #112	; 0x70
 800a766:	d1dd      	bne.n	800a724 <_printf_i+0x30>
 800a768:	6823      	ldr	r3, [r4, #0]
 800a76a:	f043 0320 	orr.w	r3, r3, #32
 800a76e:	6023      	str	r3, [r4, #0]
 800a770:	e003      	b.n	800a77a <_printf_i+0x86>
 800a772:	2975      	cmp	r1, #117	; 0x75
 800a774:	d017      	beq.n	800a7a6 <_printf_i+0xb2>
 800a776:	2978      	cmp	r1, #120	; 0x78
 800a778:	d1d4      	bne.n	800a724 <_printf_i+0x30>
 800a77a:	2378      	movs	r3, #120	; 0x78
 800a77c:	4865      	ldr	r0, [pc, #404]	; (800a914 <_printf_i+0x220>)
 800a77e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a782:	e055      	b.n	800a830 <_printf_i+0x13c>
 800a784:	6813      	ldr	r3, [r2, #0]
 800a786:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a78a:	1d19      	adds	r1, r3, #4
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6011      	str	r1, [r2, #0]
 800a790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a794:	2301      	movs	r3, #1
 800a796:	e08c      	b.n	800a8b2 <_printf_i+0x1be>
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a79e:	6011      	str	r1, [r2, #0]
 800a7a0:	bf18      	it	ne
 800a7a2:	b21b      	sxthne	r3, r3
 800a7a4:	e7cf      	b.n	800a746 <_printf_i+0x52>
 800a7a6:	6813      	ldr	r3, [r2, #0]
 800a7a8:	6825      	ldr	r5, [r4, #0]
 800a7aa:	1d18      	adds	r0, r3, #4
 800a7ac:	6010      	str	r0, [r2, #0]
 800a7ae:	0628      	lsls	r0, r5, #24
 800a7b0:	d501      	bpl.n	800a7b6 <_printf_i+0xc2>
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	e002      	b.n	800a7bc <_printf_i+0xc8>
 800a7b6:	0668      	lsls	r0, r5, #25
 800a7b8:	d5fb      	bpl.n	800a7b2 <_printf_i+0xbe>
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	296f      	cmp	r1, #111	; 0x6f
 800a7be:	bf14      	ite	ne
 800a7c0:	220a      	movne	r2, #10
 800a7c2:	2208      	moveq	r2, #8
 800a7c4:	4852      	ldr	r0, [pc, #328]	; (800a910 <_printf_i+0x21c>)
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7cc:	6865      	ldr	r5, [r4, #4]
 800a7ce:	2d00      	cmp	r5, #0
 800a7d0:	60a5      	str	r5, [r4, #8]
 800a7d2:	f2c0 8095 	blt.w	800a900 <_printf_i+0x20c>
 800a7d6:	6821      	ldr	r1, [r4, #0]
 800a7d8:	f021 0104 	bic.w	r1, r1, #4
 800a7dc:	6021      	str	r1, [r4, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d13d      	bne.n	800a85e <_printf_i+0x16a>
 800a7e2:	2d00      	cmp	r5, #0
 800a7e4:	f040 808e 	bne.w	800a904 <_printf_i+0x210>
 800a7e8:	4665      	mov	r5, ip
 800a7ea:	2a08      	cmp	r2, #8
 800a7ec:	d10b      	bne.n	800a806 <_printf_i+0x112>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	07db      	lsls	r3, r3, #31
 800a7f2:	d508      	bpl.n	800a806 <_printf_i+0x112>
 800a7f4:	6923      	ldr	r3, [r4, #16]
 800a7f6:	6862      	ldr	r2, [r4, #4]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	bfde      	ittt	le
 800a7fc:	2330      	movle	r3, #48	; 0x30
 800a7fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a802:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a806:	ebac 0305 	sub.w	r3, ip, r5
 800a80a:	6123      	str	r3, [r4, #16]
 800a80c:	f8cd 8000 	str.w	r8, [sp]
 800a810:	463b      	mov	r3, r7
 800a812:	aa03      	add	r2, sp, #12
 800a814:	4621      	mov	r1, r4
 800a816:	4630      	mov	r0, r6
 800a818:	f7ff fef6 	bl	800a608 <_printf_common>
 800a81c:	3001      	adds	r0, #1
 800a81e:	d14d      	bne.n	800a8bc <_printf_i+0x1c8>
 800a820:	f04f 30ff 	mov.w	r0, #4294967295
 800a824:	b005      	add	sp, #20
 800a826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a82a:	4839      	ldr	r0, [pc, #228]	; (800a910 <_printf_i+0x21c>)
 800a82c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a830:	6813      	ldr	r3, [r2, #0]
 800a832:	6821      	ldr	r1, [r4, #0]
 800a834:	1d1d      	adds	r5, r3, #4
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6015      	str	r5, [r2, #0]
 800a83a:	060a      	lsls	r2, r1, #24
 800a83c:	d50b      	bpl.n	800a856 <_printf_i+0x162>
 800a83e:	07ca      	lsls	r2, r1, #31
 800a840:	bf44      	itt	mi
 800a842:	f041 0120 	orrmi.w	r1, r1, #32
 800a846:	6021      	strmi	r1, [r4, #0]
 800a848:	b91b      	cbnz	r3, 800a852 <_printf_i+0x15e>
 800a84a:	6822      	ldr	r2, [r4, #0]
 800a84c:	f022 0220 	bic.w	r2, r2, #32
 800a850:	6022      	str	r2, [r4, #0]
 800a852:	2210      	movs	r2, #16
 800a854:	e7b7      	b.n	800a7c6 <_printf_i+0xd2>
 800a856:	064d      	lsls	r5, r1, #25
 800a858:	bf48      	it	mi
 800a85a:	b29b      	uxthmi	r3, r3
 800a85c:	e7ef      	b.n	800a83e <_printf_i+0x14a>
 800a85e:	4665      	mov	r5, ip
 800a860:	fbb3 f1f2 	udiv	r1, r3, r2
 800a864:	fb02 3311 	mls	r3, r2, r1, r3
 800a868:	5cc3      	ldrb	r3, [r0, r3]
 800a86a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a86e:	460b      	mov	r3, r1
 800a870:	2900      	cmp	r1, #0
 800a872:	d1f5      	bne.n	800a860 <_printf_i+0x16c>
 800a874:	e7b9      	b.n	800a7ea <_printf_i+0xf6>
 800a876:	6813      	ldr	r3, [r2, #0]
 800a878:	6825      	ldr	r5, [r4, #0]
 800a87a:	1d18      	adds	r0, r3, #4
 800a87c:	6961      	ldr	r1, [r4, #20]
 800a87e:	6010      	str	r0, [r2, #0]
 800a880:	0628      	lsls	r0, r5, #24
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	d501      	bpl.n	800a88a <_printf_i+0x196>
 800a886:	6019      	str	r1, [r3, #0]
 800a888:	e002      	b.n	800a890 <_printf_i+0x19c>
 800a88a:	066a      	lsls	r2, r5, #25
 800a88c:	d5fb      	bpl.n	800a886 <_printf_i+0x192>
 800a88e:	8019      	strh	r1, [r3, #0]
 800a890:	2300      	movs	r3, #0
 800a892:	4665      	mov	r5, ip
 800a894:	6123      	str	r3, [r4, #16]
 800a896:	e7b9      	b.n	800a80c <_printf_i+0x118>
 800a898:	6813      	ldr	r3, [r2, #0]
 800a89a:	1d19      	adds	r1, r3, #4
 800a89c:	6011      	str	r1, [r2, #0]
 800a89e:	681d      	ldr	r5, [r3, #0]
 800a8a0:	6862      	ldr	r2, [r4, #4]
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f000 f8ed 	bl	800aa84 <memchr>
 800a8aa:	b108      	cbz	r0, 800a8b0 <_printf_i+0x1bc>
 800a8ac:	1b40      	subs	r0, r0, r5
 800a8ae:	6060      	str	r0, [r4, #4]
 800a8b0:	6863      	ldr	r3, [r4, #4]
 800a8b2:	6123      	str	r3, [r4, #16]
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8ba:	e7a7      	b.n	800a80c <_printf_i+0x118>
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	462a      	mov	r2, r5
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	47c0      	blx	r8
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d0aa      	beq.n	800a820 <_printf_i+0x12c>
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	079b      	lsls	r3, r3, #30
 800a8ce:	d413      	bmi.n	800a8f8 <_printf_i+0x204>
 800a8d0:	68e0      	ldr	r0, [r4, #12]
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	4298      	cmp	r0, r3
 800a8d6:	bfb8      	it	lt
 800a8d8:	4618      	movlt	r0, r3
 800a8da:	e7a3      	b.n	800a824 <_printf_i+0x130>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	464a      	mov	r2, r9
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	47c0      	blx	r8
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	d09a      	beq.n	800a820 <_printf_i+0x12c>
 800a8ea:	3501      	adds	r5, #1
 800a8ec:	68e3      	ldr	r3, [r4, #12]
 800a8ee:	9a03      	ldr	r2, [sp, #12]
 800a8f0:	1a9b      	subs	r3, r3, r2
 800a8f2:	42ab      	cmp	r3, r5
 800a8f4:	dcf2      	bgt.n	800a8dc <_printf_i+0x1e8>
 800a8f6:	e7eb      	b.n	800a8d0 <_printf_i+0x1dc>
 800a8f8:	2500      	movs	r5, #0
 800a8fa:	f104 0919 	add.w	r9, r4, #25
 800a8fe:	e7f5      	b.n	800a8ec <_printf_i+0x1f8>
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1ac      	bne.n	800a85e <_printf_i+0x16a>
 800a904:	7803      	ldrb	r3, [r0, #0]
 800a906:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a90a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a90e:	e76c      	b.n	800a7ea <_printf_i+0xf6>
 800a910:	0800b227 	.word	0x0800b227
 800a914:	0800b238 	.word	0x0800b238

0800a918 <_sbrk_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	2300      	movs	r3, #0
 800a91c:	4c05      	ldr	r4, [pc, #20]	; (800a934 <_sbrk_r+0x1c>)
 800a91e:	4605      	mov	r5, r0
 800a920:	4608      	mov	r0, r1
 800a922:	6023      	str	r3, [r4, #0]
 800a924:	f7f7 fe8c 	bl	8002640 <_sbrk>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_sbrk_r+0x1a>
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_sbrk_r+0x1a>
 800a930:	602b      	str	r3, [r5, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	20000ed4 	.word	0x20000ed4

0800a938 <__sread>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	460c      	mov	r4, r1
 800a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a940:	f000 f8b0 	bl	800aaa4 <_read_r>
 800a944:	2800      	cmp	r0, #0
 800a946:	bfab      	itete	ge
 800a948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a94a:	89a3      	ldrhlt	r3, [r4, #12]
 800a94c:	181b      	addge	r3, r3, r0
 800a94e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a952:	bfac      	ite	ge
 800a954:	6563      	strge	r3, [r4, #84]	; 0x54
 800a956:	81a3      	strhlt	r3, [r4, #12]
 800a958:	bd10      	pop	{r4, pc}

0800a95a <__swrite>:
 800a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	461f      	mov	r7, r3
 800a960:	898b      	ldrh	r3, [r1, #12]
 800a962:	4605      	mov	r5, r0
 800a964:	05db      	lsls	r3, r3, #23
 800a966:	460c      	mov	r4, r1
 800a968:	4616      	mov	r6, r2
 800a96a:	d505      	bpl.n	800a978 <__swrite+0x1e>
 800a96c:	2302      	movs	r3, #2
 800a96e:	2200      	movs	r2, #0
 800a970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a974:	f000 f874 	bl	800aa60 <_lseek_r>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	4632      	mov	r2, r6
 800a97c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a980:	81a3      	strh	r3, [r4, #12]
 800a982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a986:	463b      	mov	r3, r7
 800a988:	4628      	mov	r0, r5
 800a98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98e:	f000 b823 	b.w	800a9d8 <_write_r>

0800a992 <__sseek>:
 800a992:	b510      	push	{r4, lr}
 800a994:	460c      	mov	r4, r1
 800a996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a99a:	f000 f861 	bl	800aa60 <_lseek_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	bf15      	itete	ne
 800a9a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9ae:	81a3      	strheq	r3, [r4, #12]
 800a9b0:	bf18      	it	ne
 800a9b2:	81a3      	strhne	r3, [r4, #12]
 800a9b4:	bd10      	pop	{r4, pc}

0800a9b6 <__sclose>:
 800a9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ba:	f000 b81f 	b.w	800a9fc <_close_r>

0800a9be <__ascii_wctomb>:
 800a9be:	b149      	cbz	r1, 800a9d4 <__ascii_wctomb+0x16>
 800a9c0:	2aff      	cmp	r2, #255	; 0xff
 800a9c2:	bf8b      	itete	hi
 800a9c4:	238a      	movhi	r3, #138	; 0x8a
 800a9c6:	700a      	strbls	r2, [r1, #0]
 800a9c8:	6003      	strhi	r3, [r0, #0]
 800a9ca:	2001      	movls	r0, #1
 800a9cc:	bf88      	it	hi
 800a9ce:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9d2:	4770      	bx	lr
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	4770      	bx	lr

0800a9d8 <_write_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	4605      	mov	r5, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	4611      	mov	r1, r2
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	4c05      	ldr	r4, [pc, #20]	; (800a9f8 <_write_r+0x20>)
 800a9e4:	6022      	str	r2, [r4, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f7f7 fe10 	bl	800260c <_write>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d102      	bne.n	800a9f6 <_write_r+0x1e>
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	b103      	cbz	r3, 800a9f6 <_write_r+0x1e>
 800a9f4:	602b      	str	r3, [r5, #0]
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	20000ed4 	.word	0x20000ed4

0800a9fc <_close_r>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4c05      	ldr	r4, [pc, #20]	; (800aa18 <_close_r+0x1c>)
 800aa02:	4605      	mov	r5, r0
 800aa04:	4608      	mov	r0, r1
 800aa06:	6023      	str	r3, [r4, #0]
 800aa08:	f7f7 fe0d 	bl	8002626 <_close>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_close_r+0x1a>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_close_r+0x1a>
 800aa14:	602b      	str	r3, [r5, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	20000ed4 	.word	0x20000ed4

0800aa1c <_fstat_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4c06      	ldr	r4, [pc, #24]	; (800aa3c <_fstat_r+0x20>)
 800aa22:	4605      	mov	r5, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	4611      	mov	r1, r2
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	f7f7 fdff 	bl	800262c <_fstat>
 800aa2e:	1c43      	adds	r3, r0, #1
 800aa30:	d102      	bne.n	800aa38 <_fstat_r+0x1c>
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	b103      	cbz	r3, 800aa38 <_fstat_r+0x1c>
 800aa36:	602b      	str	r3, [r5, #0]
 800aa38:	bd38      	pop	{r3, r4, r5, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000ed4 	.word	0x20000ed4

0800aa40 <_isatty_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	2300      	movs	r3, #0
 800aa44:	4c05      	ldr	r4, [pc, #20]	; (800aa5c <_isatty_r+0x1c>)
 800aa46:	4605      	mov	r5, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	f7f7 fdf3 	bl	8002636 <_isatty>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_isatty_r+0x1a>
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_isatty_r+0x1a>
 800aa58:	602b      	str	r3, [r5, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	20000ed4 	.word	0x20000ed4

0800aa60 <_lseek_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4605      	mov	r5, r0
 800aa64:	4608      	mov	r0, r1
 800aa66:	4611      	mov	r1, r2
 800aa68:	2200      	movs	r2, #0
 800aa6a:	4c05      	ldr	r4, [pc, #20]	; (800aa80 <_lseek_r+0x20>)
 800aa6c:	6022      	str	r2, [r4, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f7f7 fde3 	bl	800263a <_lseek>
 800aa74:	1c43      	adds	r3, r0, #1
 800aa76:	d102      	bne.n	800aa7e <_lseek_r+0x1e>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	b103      	cbz	r3, 800aa7e <_lseek_r+0x1e>
 800aa7c:	602b      	str	r3, [r5, #0]
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	20000ed4 	.word	0x20000ed4

0800aa84 <memchr>:
 800aa84:	b510      	push	{r4, lr}
 800aa86:	b2c9      	uxtb	r1, r1
 800aa88:	4402      	add	r2, r0
 800aa8a:	4290      	cmp	r0, r2
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	d101      	bne.n	800aa94 <memchr+0x10>
 800aa90:	2300      	movs	r3, #0
 800aa92:	e003      	b.n	800aa9c <memchr+0x18>
 800aa94:	781c      	ldrb	r4, [r3, #0]
 800aa96:	3001      	adds	r0, #1
 800aa98:	428c      	cmp	r4, r1
 800aa9a:	d1f6      	bne.n	800aa8a <memchr+0x6>
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	bd10      	pop	{r4, pc}

0800aaa0 <__malloc_lock>:
 800aaa0:	4770      	bx	lr

0800aaa2 <__malloc_unlock>:
 800aaa2:	4770      	bx	lr

0800aaa4 <_read_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	4611      	mov	r1, r2
 800aaac:	2200      	movs	r2, #0
 800aaae:	4c05      	ldr	r4, [pc, #20]	; (800aac4 <_read_r+0x20>)
 800aab0:	6022      	str	r2, [r4, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	f7f7 fd9d 	bl	80025f2 <_read>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_read_r+0x1e>
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_read_r+0x1e>
 800aac0:	602b      	str	r3, [r5, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	20000ed4 	.word	0x20000ed4

0800aac8 <_init>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr

0800aad4 <_fini>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr
